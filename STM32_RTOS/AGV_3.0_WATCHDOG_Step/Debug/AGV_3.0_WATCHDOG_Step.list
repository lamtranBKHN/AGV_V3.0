
AGV_3.0_WATCHDOG_Step.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c868  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800c9f8  0800c9f8  0001c9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc18  0800cc18  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc18  0800cc18  0001cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc20  0800cc20  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cc20  0800cc20  0001cc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cc28  0800cc28  0001cc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800cc30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00004238  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042b4  200042b4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a2ae  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e84  00000000  00000000  0005a35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002250  00000000  00000000  000601e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020d0  00000000  00000000  00062430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b144  00000000  00000000  00064500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002329b  00000000  00000000  0008f644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3f42  00000000  00000000  000b28df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a6821  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009e14  00000000  00000000  001a6874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9e0 	.word	0x0800c9e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800c9e0 	.word	0x0800c9e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 b96e 	b.w	8000e3c <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9d08      	ldr	r5, [sp, #32]
 8000b7e:	4604      	mov	r4, r0
 8000b80:	468c      	mov	ip, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f040 8083 	bne.w	8000c8e <__udivmoddi4+0x116>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4617      	mov	r7, r2
 8000b8c:	d947      	bls.n	8000c1e <__udivmoddi4+0xa6>
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	b142      	cbz	r2, 8000ba6 <__udivmoddi4+0x2e>
 8000b94:	f1c2 0020 	rsb	r0, r2, #32
 8000b98:	fa24 f000 	lsr.w	r0, r4, r0
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	4097      	lsls	r7, r2
 8000ba0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba4:	4094      	lsls	r4, r2
 8000ba6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000baa:	0c23      	lsrs	r3, r4, #16
 8000bac:	fbbc f6f8 	udiv	r6, ip, r8
 8000bb0:	fa1f fe87 	uxth.w	lr, r7
 8000bb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x60>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bca:	f080 8119 	bcs.w	8000e00 <__udivmoddi4+0x288>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 8116 	bls.w	8000e00 <__udivmoddi4+0x288>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be0:	fb08 3310 	mls	r3, r8, r0, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x8c>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bf6:	f080 8105 	bcs.w	8000e04 <__udivmoddi4+0x28c>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f240 8102 	bls.w	8000e04 <__udivmoddi4+0x28c>
 8000c00:	3802      	subs	r0, #2
 8000c02:	443c      	add	r4, r7
 8000c04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c08:	eba4 040e 	sub.w	r4, r4, lr
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	b11d      	cbz	r5, 8000c18 <__udivmoddi4+0xa0>
 8000c10:	40d4      	lsrs	r4, r2
 8000c12:	2300      	movs	r3, #0
 8000c14:	e9c5 4300 	strd	r4, r3, [r5]
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	b902      	cbnz	r2, 8000c22 <__udivmoddi4+0xaa>
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	d150      	bne.n	8000ccc <__udivmoddi4+0x154>
 8000c2a:	1bcb      	subs	r3, r1, r7
 8000c2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c30:	fa1f f887 	uxth.w	r8, r7
 8000c34:	2601      	movs	r6, #1
 8000c36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c3a:	0c21      	lsrs	r1, r4, #16
 8000c3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb08 f30c 	mul.w	r3, r8, ip
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0xe4>
 8000c4c:	1879      	adds	r1, r7, r1
 8000c4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0xe2>
 8000c54:	428b      	cmp	r3, r1
 8000c56:	f200 80e9 	bhi.w	8000e2c <__udivmoddi4+0x2b4>
 8000c5a:	4684      	mov	ip, r0
 8000c5c:	1ac9      	subs	r1, r1, r3
 8000c5e:	b2a3      	uxth	r3, r4
 8000c60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c6c:	fb08 f800 	mul.w	r8, r8, r0
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x10c>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x10a>
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	f200 80d9 	bhi.w	8000e34 <__udivmoddi4+0x2bc>
 8000c82:	4618      	mov	r0, r3
 8000c84:	eba4 0408 	sub.w	r4, r4, r8
 8000c88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c8c:	e7bf      	b.n	8000c0e <__udivmoddi4+0x96>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x12e>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	f000 80b1 	beq.w	8000dfa <__udivmoddi4+0x282>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f683 	clz	r6, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d14a      	bne.n	8000d44 <__udivmoddi4+0x1cc>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0x140>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80b8 	bhi.w	8000e28 <__udivmoddi4+0x2b0>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0103 	sbc.w	r1, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d0a8      	beq.n	8000c18 <__udivmoddi4+0xa0>
 8000cc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd4:	4097      	lsls	r7, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cde:	40d9      	lsrs	r1, r3
 8000ce0:	4330      	orrs	r0, r6
 8000ce2:	0c03      	lsrs	r3, r0, #16
 8000ce4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce8:	fa1f f887 	uxth.w	r8, r7
 8000cec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb06 f108 	mul.w	r1, r6, r8
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x19c>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d06:	f080 808d 	bcs.w	8000e24 <__udivmoddi4+0x2ac>
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	f240 808a 	bls.w	8000e24 <__udivmoddi4+0x2ac>
 8000d10:	3e02      	subs	r6, #2
 8000d12:	443b      	add	r3, r7
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	b281      	uxth	r1, r0
 8000d18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb00 f308 	mul.w	r3, r0, r8
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x1c4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d32:	d273      	bcs.n	8000e1c <__udivmoddi4+0x2a4>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d971      	bls.n	8000e1c <__udivmoddi4+0x2a4>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4439      	add	r1, r7
 8000d3c:	1acb      	subs	r3, r1, r3
 8000d3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d42:	e778      	b.n	8000c36 <__udivmoddi4+0xbe>
 8000d44:	f1c6 0c20 	rsb	ip, r6, #32
 8000d48:	fa03 f406 	lsl.w	r4, r3, r6
 8000d4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d50:	431c      	orrs	r4, r3
 8000d52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d56:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	0c3b      	lsrs	r3, r7, #16
 8000d66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6a:	fa1f f884 	uxth.w	r8, r4
 8000d6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d76:	fb09 fa08 	mul.w	sl, r9, r8
 8000d7a:	458a      	cmp	sl, r1
 8000d7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d80:	fa00 f306 	lsl.w	r3, r0, r6
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x220>
 8000d86:	1861      	adds	r1, r4, r1
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d8c:	d248      	bcs.n	8000e20 <__udivmoddi4+0x2a8>
 8000d8e:	458a      	cmp	sl, r1
 8000d90:	d946      	bls.n	8000e20 <__udivmoddi4+0x2a8>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4421      	add	r1, r4
 8000d98:	eba1 010a 	sub.w	r1, r1, sl
 8000d9c:	b2bf      	uxth	r7, r7
 8000d9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000daa:	fb00 f808 	mul.w	r8, r0, r8
 8000dae:	45b8      	cmp	r8, r7
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x24a>
 8000db2:	19e7      	adds	r7, r4, r7
 8000db4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db8:	d22e      	bcs.n	8000e18 <__udivmoddi4+0x2a0>
 8000dba:	45b8      	cmp	r8, r7
 8000dbc:	d92c      	bls.n	8000e18 <__udivmoddi4+0x2a0>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4427      	add	r7, r4
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	eba7 0708 	sub.w	r7, r7, r8
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	454f      	cmp	r7, r9
 8000dd0:	46c6      	mov	lr, r8
 8000dd2:	4649      	mov	r1, r9
 8000dd4:	d31a      	bcc.n	8000e0c <__udivmoddi4+0x294>
 8000dd6:	d017      	beq.n	8000e08 <__udivmoddi4+0x290>
 8000dd8:	b15d      	cbz	r5, 8000df2 <__udivmoddi4+0x27a>
 8000dda:	ebb3 020e 	subs.w	r2, r3, lr
 8000dde:	eb67 0701 	sbc.w	r7, r7, r1
 8000de2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de6:	40f2      	lsrs	r2, r6
 8000de8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dec:	40f7      	lsrs	r7, r6
 8000dee:	e9c5 2700 	strd	r2, r7, [r5]
 8000df2:	2600      	movs	r6, #0
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	462e      	mov	r6, r5
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	e70b      	b.n	8000c18 <__udivmoddi4+0xa0>
 8000e00:	4606      	mov	r6, r0
 8000e02:	e6e9      	b.n	8000bd8 <__udivmoddi4+0x60>
 8000e04:	4618      	mov	r0, r3
 8000e06:	e6fd      	b.n	8000c04 <__udivmoddi4+0x8c>
 8000e08:	4543      	cmp	r3, r8
 8000e0a:	d2e5      	bcs.n	8000dd8 <__udivmoddi4+0x260>
 8000e0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e10:	eb69 0104 	sbc.w	r1, r9, r4
 8000e14:	3801      	subs	r0, #1
 8000e16:	e7df      	b.n	8000dd8 <__udivmoddi4+0x260>
 8000e18:	4608      	mov	r0, r1
 8000e1a:	e7d2      	b.n	8000dc2 <__udivmoddi4+0x24a>
 8000e1c:	4660      	mov	r0, ip
 8000e1e:	e78d      	b.n	8000d3c <__udivmoddi4+0x1c4>
 8000e20:	4681      	mov	r9, r0
 8000e22:	e7b9      	b.n	8000d98 <__udivmoddi4+0x220>
 8000e24:	4666      	mov	r6, ip
 8000e26:	e775      	b.n	8000d14 <__udivmoddi4+0x19c>
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e74a      	b.n	8000cc2 <__udivmoddi4+0x14a>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	4439      	add	r1, r7
 8000e32:	e713      	b.n	8000c5c <__udivmoddi4+0xe4>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	e724      	b.n	8000c84 <__udivmoddi4+0x10c>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <_Z7hex2decPcS_>:
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	2101      	movs	r1, #1
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 f83f 	bl	8000ed4 <_Z8char2decPci>
 8000e56:	4602      	mov	r2, r0
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	2100      	movs	r1, #0
 8000e60:	6838      	ldr	r0, [r7, #0]
 8000e62:	f000 f837 	bl	8000ed4 <_Z8char2decPci>
 8000e66:	4602      	mov	r2, r0
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_Z10twoHex2decPcS_S_S_>:
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f000 f821 	bl	8000ed4 <_Z8char2decPci>
 8000e92:	4602      	mov	r2, r0
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	4413      	add	r3, r2
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	68b8      	ldr	r0, [r7, #8]
 8000e9e:	f000 f819 	bl	8000ed4 <_Z8char2decPci>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	2103      	movs	r1, #3
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f811 	bl	8000ed4 <_Z8char2decPci>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	2102      	movs	r1, #2
 8000ebc:	6838      	ldr	r0, [r7, #0]
 8000ebe:	f000 f809 	bl	8000ed4 <_Z8char2decPci>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_Z8char2decPci>:
 8000ed4:	b5b0      	push	{r4, r5, r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ee8:	d92b      	bls.n	8000f42 <_Z8char2decPci+0x6e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b39      	cmp	r3, #57	; 0x39
 8000ef0:	d827      	bhi.n	8000f42 <_Z8char2decPci+0x6e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	3b30      	subs	r3, #48	; 0x30
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fac3 	bl	8000484 <__aeabi_i2d>
 8000efe:	4604      	mov	r4, r0
 8000f00:	460d      	mov	r5, r1
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	2010      	movs	r0, #16
 8000f06:	f000 f880 	bl	800100a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f0a:	ec53 2b10 	vmov	r2, r3, d0
 8000f0e:	4620      	mov	r0, r4
 8000f10:	4629      	mov	r1, r5
 8000f12:	f7ff fb21 	bl	8000558 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4614      	mov	r4, r2
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff fab0 	bl	8000484 <__aeabi_i2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4620      	mov	r0, r4
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	f7ff f95e 	bl	80001ec <__adddf3>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fdbe 	bl	8000ab8 <__aeabi_d2iz>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e05e      	b.n	8001000 <_Z8char2decPci+0x12c>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b40      	cmp	r3, #64	; 0x40
 8000f48:	d92b      	bls.n	8000fa2 <_Z8char2decPci+0xce>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b46      	cmp	r3, #70	; 0x46
 8000f50:	d827      	bhi.n	8000fa2 <_Z8char2decPci+0xce>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3b37      	subs	r3, #55	; 0x37
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fa93 	bl	8000484 <__aeabi_i2d>
 8000f5e:	4604      	mov	r4, r0
 8000f60:	460d      	mov	r5, r1
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	2010      	movs	r0, #16
 8000f66:	f000 f850 	bl	800100a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f6a:	ec53 2b10 	vmov	r2, r3, d0
 8000f6e:	4620      	mov	r0, r4
 8000f70:	4629      	mov	r1, r5
 8000f72:	f7ff faf1 	bl	8000558 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4614      	mov	r4, r2
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f7ff fa80 	bl	8000484 <__aeabi_i2d>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4620      	mov	r0, r4
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f7ff f92e 	bl	80001ec <__adddf3>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fd8e 	bl	8000ab8 <__aeabi_d2iz>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e02e      	b.n	8001000 <_Z8char2decPci+0x12c>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b60      	cmp	r3, #96	; 0x60
 8000fa8:	d92a      	bls.n	8001000 <_Z8char2decPci+0x12c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b66      	cmp	r3, #102	; 0x66
 8000fb0:	d826      	bhi.n	8001000 <_Z8char2decPci+0x12c>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	3b57      	subs	r3, #87	; 0x57
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fa63 	bl	8000484 <__aeabi_i2d>
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	460d      	mov	r5, r1
 8000fc2:	6839      	ldr	r1, [r7, #0]
 8000fc4:	2010      	movs	r0, #16
 8000fc6:	f000 f820 	bl	800100a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fca:	ec53 2b10 	vmov	r2, r3, d0
 8000fce:	4620      	mov	r0, r4
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	f7ff fac1 	bl	8000558 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4614      	mov	r4, r2
 8000fdc:	461d      	mov	r5, r3
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f7ff fa50 	bl	8000484 <__aeabi_i2d>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4620      	mov	r0, r4
 8000fea:	4629      	mov	r1, r5
 8000fec:	f7ff f8fe 	bl	80001ec <__adddf3>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f7ff fd5e 	bl	8000ab8 <__aeabi_d2iz>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bdb0      	pop	{r4, r5, r7, pc}

0800100a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
 800100a:	b5b0      	push	{r4, r5, r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fa35 	bl	8000484 <__aeabi_i2d>
 800101a:	4604      	mov	r4, r0
 800101c:	460d      	mov	r5, r1
 800101e:	6838      	ldr	r0, [r7, #0]
 8001020:	f7ff fa30 	bl	8000484 <__aeabi_i2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	ec43 2b11 	vmov	d1, r2, r3
 800102c:	ec45 4b10 	vmov	d0, r4, r5
 8001030:	f00a fba4 	bl	800b77c <pow>
 8001034:	eeb0 7a40 	vmov.f32	s14, s0
 8001038:	eef0 7a60 	vmov.f32	s15, s1
 800103c:	eeb0 0a47 	vmov.f32	s0, s14
 8001040:	eef0 0a67 	vmov.f32	s1, s15
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800104c <vApplicationGetIdleTaskMemory>:
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <vApplicationGetIdleTaskMemory+0x2c>)
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <vApplicationGetIdleTaskMemory+0x30>)
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000098 	.word	0x20000098
 800107c:	200000ec 	.word	0x200000ec

08001080 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f00a faa8 	bl	800b5f6 <_ZNSaIcED1Ev>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 feb9 	bl	8001e32 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_ZNSt6vectorIcSaIcEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffeb 	bl	80010b0 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fed8 	bl	8001ea2 <_ZNSaI10DataStructED1Ev>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZNSt12_Vector_baseI10DataStructSaIS0_EEC1Ev>:
      _Vector_base() = default;
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 febb 	bl	8001e82 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE12_Vector_implC1Ev>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <_ZNSt6vectorI10DataStructSaIS0_EEC1Ev>:
      vector() = default;
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffeb 	bl	80010fc <_ZNSt12_Vector_baseI10DataStructSaIS0_EEC1Ev>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char recievedData[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <HAL_UART_RxCpltCallback+0x40>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10d      	bne.n	800115e <HAL_UART_RxCpltCallback+0x2e>
		if(recievedData[0] != '\n') {
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_UART_RxCpltCallback+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b0a      	cmp	r3, #10
 8001148:	d004      	beq.n	8001154 <HAL_UART_RxCpltCallback+0x24>
			data.push_back(recievedData[0]);
 800114a:	490a      	ldr	r1, [pc, #40]	; (8001174 <HAL_UART_RxCpltCallback+0x44>)
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <HAL_UART_RxCpltCallback+0x48>)
 800114e:	f000 fed3 	bl	8001ef8 <_ZNSt6vectorIcSaIcEE9push_backERKc>
 8001152:	e004      	b.n	800115e <HAL_UART_RxCpltCallback+0x2e>
		} else {
			osSemaphoreRelease(parseCommandSemHandle);
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_UART_RxCpltCallback+0x4c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f007 fdf3 	bl	8008d44 <osSemaphoreRelease>
		}
	}
	HAL_UART_Receive_IT(&huart4, (uint8_t*)recievedData, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	4904      	ldr	r1, [pc, #16]	; (8001174 <HAL_UART_RxCpltCallback+0x44>)
 8001162:	4807      	ldr	r0, [pc, #28]	; (8001180 <HAL_UART_RxCpltCallback+0x50>)
 8001164:	f006 fe62 	bl	8007e2c <HAL_UART_Receive_IT>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40004c00 	.word	0x40004c00
 8001174:	200004a8 	.word	0x200004a8
 8001178:	2000047c 	.word	0x2000047c
 800117c:	20000478 	.word	0x20000478
 8001180:	20000424 	.word	0x20000424
 8001184:	00000000 	.word	0x00000000

08001188 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_ENABLE_IT(&htim11, TIM_IT_CC1);
	__HAL_TIM_SET_CAPTUREPOLARITY(&htim11, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7f1b      	ldrb	r3, [r3, #28]
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 8083 	bne.w	80012a0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (!sonarFirstCapture) // if the first value is not captured
 800119a:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	f083 0301 	eor.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d01a      	beq.n	80011de <HAL_TIM_IC_CaptureCallback+0x56>
		{
			sonarIcVal1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80011a8:	2100      	movs	r1, #0
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f006 f942 	bl	8007434 <HAL_TIM_ReadCapturedValue>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a40      	ldr	r2, [pc, #256]	; (80012b4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011b4:	6013      	str	r3, [r2, #0]
			sonarFirstCapture = true;  // set the first captured as true
 80011b6:	4b3e      	ldr	r3, [pc, #248]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a1a      	ldr	r2, [r3, #32]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 020a 	bic.w	r2, r2, #10
 80011ca:	621a      	str	r2, [r3, #32]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6a1a      	ldr	r2, [r3, #32]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0202 	orr.w	r2, r2, #2
 80011da:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim11, TIM_IT_CC1);
		}
	}
}
 80011dc:	e060      	b.n	80012a0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (sonarFirstCapture)   // if the first is already captured
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d05c      	beq.n	80012a0 <HAL_TIM_IC_CaptureCallback+0x118>
			sonarIcVal2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80011e6:	2100      	movs	r1, #0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f006 f923 	bl	8007434 <HAL_TIM_ReadCapturedValue>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a31      	ldr	r2, [pc, #196]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011f2:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
			uint32_t Difference = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
			if (sonarIcVal2 > sonarIcVal1)
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d906      	bls.n	800121a <HAL_TIM_IC_CaptureCallback+0x92>
				Difference = sonarIcVal2-sonarIcVal1;
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e00e      	b.n	8001238 <HAL_TIM_IC_CaptureCallback+0xb0>
			else if (sonarIcVal1 > sonarIcVal2)
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d908      	bls.n	8001238 <HAL_TIM_IC_CaptureCallback+0xb0>
				Difference = (0xffff - sonarIcVal1) + sonarIcVal2;
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001234:	33ff      	adds	r3, #255	; 0xff
 8001236:	60fb      	str	r3, [r7, #12]
			sonarDistance = double(Difference * .034/2);
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff f913 	bl	8000464 <__aeabi_ui2d>
 800123e:	a31a      	add	r3, pc, #104	; (adr r3, 80012a8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f988 	bl	8000558 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001258:	f7ff faa8 	bl	80007ac <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fc28 	bl	8000ab8 <__aeabi_d2iz>
 8001268:	4603      	mov	r3, r0
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <HAL_TIM_IC_CaptureCallback+0x134>)
 800126c:	6013      	str	r3, [r2, #0]
			sonarFirstCapture = false; // set it back to false
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a1a      	ldr	r2, [r3, #32]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 020a 	bic.w	r2, r2, #10
 8001282:	621a      	str	r2, [r3, #32]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6a12      	ldr	r2, [r2, #32]
 800128e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim11, TIM_IT_CC1);
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0202 	bic.w	r2, r2, #2
 800129e:	60da      	str	r2, [r3, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	b020c49c 	.word	0xb020c49c
 80012ac:	3fa16872 	.word	0x3fa16872
 80012b0:	200004a4 	.word	0x200004a4
 80012b4:	20000498 	.word	0x20000498
 80012b8:	2000049c 	.word	0x2000049c
 80012bc:	200004a0 	.word	0x200004a0
 80012c0:	200003dc 	.word	0x200003dc

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b09e      	sub	sp, #120	; 0x78
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ca:	f003 fd8d 	bl	8004de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ce:	f000 f87d 	bl	80013cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d2:	f000 faf9 	bl	80018c8 <_ZL12MX_GPIO_Initv>
  MX_IWDG_Init();
 80012d6:	f000 f981 	bl	80015dc <_ZL12MX_IWDG_Initv>
  MX_TIM10_Init();
 80012da:	f000 f99f 	bl	800161c <_ZL13MX_TIM10_Initv>
  MX_TIM11_Init();
 80012de:	f000 f9f9 	bl	80016d4 <_ZL13MX_TIM11_Initv>
  MX_UART4_Init();
 80012e2:	f000 fac3 	bl	800186c <_ZL13MX_UART4_Initv>
  MX_ADC1_Init();
 80012e6:	f000 f8e9 	bl	80014bc <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 80012ea:	f000 f943 	bl	8001574 <_ZL12MX_I2C1_Initv>
  MX_TIM12_Init();
 80012ee:	f000 fa47 	bl	8001780 <_ZL13MX_TIM12_Initv>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of parseCommandSem */
  osSemaphoreDef(parseCommandSem);
 80012f2:	2300      	movs	r3, #0
 80012f4:	673b      	str	r3, [r7, #112]	; 0x70
 80012f6:	2300      	movs	r3, #0
 80012f8:	677b      	str	r3, [r7, #116]	; 0x74
  parseCommandSemHandle = osSemaphoreCreate(osSemaphore(parseCommandSem), 1);
 80012fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012fe:	2101      	movs	r1, #1
 8001300:	4618      	mov	r0, r3
 8001302:	f007 fc9e 	bl	8008c42 <osSemaphoreCreate>
 8001306:	4603      	mov	r3, r0
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <main+0xe4>)
 800130a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 128);
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <main+0xe8>)
 800130e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001312:	461d      	mov	r5, r3
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800131c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8001320:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f007 fc2b 	bl	8008b82 <osThreadCreate>
 800132c:	4603      	mov	r3, r0
 800132e:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <main+0xec>)
 8001330:	6013      	str	r3, [r2, #0]

  /* definition and creation of parseCommand */
  osThreadDef(parseCommand, StartParseCommand, osPriorityBelowNormal, 0, 128);
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <main+0xf0>)
 8001334:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001338:	461d      	mov	r5, r3
 800133a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  parseCommandHandle = osThreadCreate(osThread(parseCommand), NULL);
 8001346:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f007 fc18 	bl	8008b82 <osThreadCreate>
 8001352:	4603      	mov	r3, r0
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <main+0xf4>)
 8001356:	6013      	str	r3, [r2, #0]

  /* definition and creation of checkSafety */
  osThreadDef(checkSafety, StartCheckSafety, osPriorityNormal, 0, 128);
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <main+0xf8>)
 800135a:	f107 041c 	add.w	r4, r7, #28
 800135e:	461d      	mov	r5, r3
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkSafetyHandle = osThreadCreate(osThread(checkSafety), NULL);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f007 fc05 	bl	8008b82 <osThreadCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <main+0xfc>)
 800137c:	6013      	str	r3, [r2, #0]

  /* definition and creation of checkBattery */
  osThreadDef(checkBattery, StartCheckbattery, osPriorityBelowNormal, 0, 128);
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <main+0x100>)
 8001380:	463c      	mov	r4, r7
 8001382:	461d      	mov	r5, r3
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkBatteryHandle = osThreadCreate(osThread(checkBattery), NULL);
 8001390:	463b      	mov	r3, r7
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f007 fbf4 	bl	8008b82 <osThreadCreate>
 800139a:	4603      	mov	r3, r0
 800139c:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <main+0x104>)
 800139e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013a0:	f007 fbe8 	bl	8008b74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <main+0xe0>
 80013a6:	bf00      	nop
 80013a8:	20000478 	.word	0x20000478
 80013ac:	0800ca30 	.word	0x0800ca30
 80013b0:	20000468 	.word	0x20000468
 80013b4:	0800ca4c 	.word	0x0800ca4c
 80013b8:	2000046c 	.word	0x2000046c
 80013bc:	0800ca68 	.word	0x0800ca68
 80013c0:	20000470 	.word	0x20000470
 80013c4:	0800ca84 	.word	0x0800ca84
 80013c8:	20000474 	.word	0x20000474

080013cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b094      	sub	sp, #80	; 0x50
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0320 	add.w	r3, r7, #32
 80013d6:	2230      	movs	r2, #48	; 0x30
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f00b f9ec 	bl	800c7b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <_Z18SystemClock_Configv+0xe8>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a2e      	ldr	r2, [pc, #184]	; (80014b4 <_Z18SystemClock_Configv+0xe8>)
 80013fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <_Z18SystemClock_Configv+0xe8>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <_Z18SystemClock_Configv+0xec>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <_Z18SystemClock_Configv+0xec>)
 8001416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <_Z18SystemClock_Configv+0xec>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001428:	230b      	movs	r3, #11
 800142a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800142c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001432:	2301      	movs	r3, #1
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001436:	2310      	movs	r3, #16
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800143a:	2301      	movs	r3, #1
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001442:	2300      	movs	r3, #0
 8001444:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001446:	2308      	movs	r3, #8
 8001448:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 800144a:	2378      	movs	r3, #120	; 0x78
 800144c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144e:	2302      	movs	r3, #2
 8001450:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001452:	2304      	movs	r3, #4
 8001454:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	4618      	mov	r0, r3
 800145c:	f004 fc9a 	bl	8005d94 <HAL_RCC_OscConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	bf14      	ite	ne
 8001466:	2301      	movne	r3, #1
 8001468:	2300      	moveq	r3, #0
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8001470:	f000 fcda 	bl	8001e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001474:	230f      	movs	r3, #15
 8001476:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001478:	2302      	movs	r3, #2
 800147a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001480:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001486:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800148a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2103      	movs	r1, #3
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fef6 	bl	8006284 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	bf14      	ite	ne
 800149e:	2301      	movne	r3, #1
 80014a0:	2300      	moveq	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <_Z18SystemClock_Configv+0xe0>
  {
    Error_Handler();
 80014a8:	f000 fcbe 	bl	8001e28 <Error_Handler>
  }
}
 80014ac:	bf00      	nop
 80014ae:	3750      	adds	r7, #80	; 0x50
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000

080014bc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <_ZL12MX_ADC1_Initv+0xb0>)
 80014d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <_ZL12MX_ADC1_Initv+0xb4>)
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 8001508:	2201      	movs	r2, #1
 800150a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 8001516:	2201      	movs	r2, #1
 8001518:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800151a:	4813      	ldr	r0, [pc, #76]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 800151c:	f003 fcca 	bl	8004eb4 <HAL_ADC_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf14      	ite	ne
 8001526:	2301      	movne	r3, #1
 8001528:	2300      	moveq	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001530:	f000 fc7a 	bl	8001e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001534:	2301      	movs	r3, #1
 8001536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001538:	2301      	movs	r3, #1
 800153a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	4808      	ldr	r0, [pc, #32]	; (8001568 <_ZL12MX_ADC1_Initv+0xac>)
 8001546:	f003 fcf9 	bl	8004f3c <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800155a:	f000 fc65 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200002ec 	.word	0x200002ec
 800156c:	40012000 	.word	0x40012000
 8001570:	0f000001 	.word	0x0f000001

08001574 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <_ZL12MX_I2C1_Initv+0x5c>)
 800157a:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <_ZL12MX_I2C1_Initv+0x60>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001580:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <_ZL12MX_I2C1_Initv+0x64>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <_ZL12MX_I2C1_Initv+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <_ZL12MX_I2C1_Initv+0x5c>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80015b2:	f004 fa59 	bl	8005a68 <HAL_I2C_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80015c6:	f000 fc2f 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000334 	.word	0x20000334
 80015d4:	40005400 	.word	0x40005400
 80015d8:	000186a0 	.word	0x000186a0

080015dc <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <_ZL12MX_IWDG_Initv+0x38>)
 80015e2:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <_ZL12MX_IWDG_Initv+0x3c>)
 80015e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <_ZL12MX_IWDG_Initv+0x38>)
 80015e8:	2203      	movs	r2, #3
 80015ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <_ZL12MX_IWDG_Initv+0x38>)
 80015ee:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015f2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <_ZL12MX_IWDG_Initv+0x38>)
 80015f6:	f004 fb7b 	bl	8005cf0 <HAL_IWDG_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <_ZL12MX_IWDG_Initv+0x32>
  {
    Error_Handler();
 800160a:	f000 fc0d 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000388 	.word	0x20000388
 8001618:	40003000 	.word	0x40003000

0800161c <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <_ZL13MX_TIM10_Initv+0xb0>)
 8001636:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <_ZL13MX_TIM10_Initv+0xb4>)
 8001638:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1 - 1;
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <_ZL13MX_TIM10_Initv+0xb0>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <_ZL13MX_TIM10_Initv+0xb0>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 60 - 1;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <_ZL13MX_TIM10_Initv+0xb0>)
 8001648:	223b      	movs	r2, #59	; 0x3b
 800164a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <_ZL13MX_TIM10_Initv+0xb0>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <_ZL13MX_TIM10_Initv+0xb0>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001658:	481c      	ldr	r0, [pc, #112]	; (80016cc <_ZL13MX_TIM10_Initv+0xb0>)
 800165a:	f005 f923 	bl	80068a4 <HAL_TIM_Base_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <_ZL13MX_TIM10_Initv+0x56>
  {
    Error_Handler();
 800166e:	f000 fbdb 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001672:	4816      	ldr	r0, [pc, #88]	; (80016cc <_ZL13MX_TIM10_Initv+0xb0>)
 8001674:	f005 f9d6 	bl	8006a24 <HAL_TIM_PWM_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <_ZL13MX_TIM10_Initv+0x70>
  {
    Error_Handler();
 8001688:	f000 fbce 	bl	8001e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168c:	2360      	movs	r3, #96	; 0x60
 800168e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	480a      	ldr	r0, [pc, #40]	; (80016cc <_ZL13MX_TIM10_Initv+0xb0>)
 80016a4:	f005 fd3c 	bl	8007120 <HAL_TIM_PWM_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf14      	ite	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	2300      	moveq	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <_ZL13MX_TIM10_Initv+0xa0>
  {
    Error_Handler();
 80016b8:	f000 fbb6 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <_ZL13MX_TIM10_Initv+0xb0>)
 80016be:	f003 f879 	bl	80047b4 <HAL_TIM_MspPostInit>

}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000394 	.word	0x20000394
 80016d0:	40014400 	.word	0x40014400

080016d4 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <_ZL13MX_TIM11_Initv+0xa4>)
 80016e8:	4a24      	ldr	r2, [pc, #144]	; (800177c <_ZL13MX_TIM11_Initv+0xa8>)
 80016ea:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 60 - 1;
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <_ZL13MX_TIM11_Initv+0xa4>)
 80016ee:	223b      	movs	r2, #59	; 0x3b
 80016f0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <_ZL13MX_TIM11_Initv+0xa4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xffff - 1;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <_ZL13MX_TIM11_Initv+0xa4>)
 80016fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016fe:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <_ZL13MX_TIM11_Initv+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <_ZL13MX_TIM11_Initv+0xa4>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800170c:	481a      	ldr	r0, [pc, #104]	; (8001778 <_ZL13MX_TIM11_Initv+0xa4>)
 800170e:	f005 f8c9 	bl	80068a4 <HAL_TIM_Base_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf14      	ite	ne
 8001718:	2301      	movne	r3, #1
 800171a:	2300      	moveq	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <_ZL13MX_TIM11_Initv+0x52>
  {
    Error_Handler();
 8001722:	f000 fb81 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8001726:	4814      	ldr	r0, [pc, #80]	; (8001778 <_ZL13MX_TIM11_Initv+0xa4>)
 8001728:	f005 f9d5 	bl	8006ad6 <HAL_TIM_IC_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <_ZL13MX_TIM11_Initv+0x6c>
  {
    Error_Handler();
 800173c:	f000 fb74 	bl	8001e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001740:	2300      	movs	r3, #0
 8001742:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001744:	2301      	movs	r3, #1
 8001746:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	4619      	mov	r1, r3
 8001756:	4808      	ldr	r0, [pc, #32]	; (8001778 <_ZL13MX_TIM11_Initv+0xa4>)
 8001758:	f005 fc46 	bl	8006fe8 <HAL_TIM_IC_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <_ZL13MX_TIM11_Initv+0x9c>
  {
    Error_Handler();
 800176c:	f000 fb5c 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200003dc 	.word	0x200003dc
 800177c:	40014800 	.word	0x40014800

08001780 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	; 0x30
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017a6:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 80017a8:	4a2f      	ldr	r2, [pc, #188]	; (8001868 <_ZL13MX_TIM12_Initv+0xe8>)
 80017aa:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 80017ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017be:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80017cc:	4825      	ldr	r0, [pc, #148]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 80017ce:	f005 f869 	bl	80068a4 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <_ZL13MX_TIM12_Initv+0x66>
  {
    Error_Handler();
 80017e2:	f000 fb21 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80017ec:	f107 0320 	add.w	r3, r7, #32
 80017f0:	4619      	mov	r1, r3
 80017f2:	481c      	ldr	r0, [pc, #112]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 80017f4:	f005 fd56 	bl	80072a4 <HAL_TIM_ConfigClockSource>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <_ZL13MX_TIM12_Initv+0x8c>
  {
    Error_Handler();
 8001808:	f000 fb0e 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800180c:	4815      	ldr	r0, [pc, #84]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 800180e:	f005 f909 	bl	8006a24 <HAL_TIM_PWM_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <_ZL13MX_TIM12_Initv+0xa6>
  {
    Error_Handler();
 8001822:	f000 fb01 	bl	8001e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001826:	2360      	movs	r3, #96	; 0x60
 8001828:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	4619      	mov	r1, r3
 800183c:	4809      	ldr	r0, [pc, #36]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 800183e:	f005 fc6f 	bl	8007120 <HAL_TIM_PWM_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf14      	ite	ne
 8001848:	2301      	movne	r3, #1
 800184a:	2300      	moveq	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <_ZL13MX_TIM12_Initv+0xd6>
  {
    Error_Handler();
 8001852:	f000 fae9 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001856:	4803      	ldr	r0, [pc, #12]	; (8001864 <_ZL13MX_TIM12_Initv+0xe4>)
 8001858:	f002 ffac 	bl	80047b4 <HAL_TIM_MspPostInit>

}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	; 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200004ac 	.word	0x200004ac
 8001868:	40001800 	.word	0x40001800

0800186c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_ZL13MX_UART4_Initv+0x54>)
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <_ZL13MX_UART4_Initv+0x58>)
 8001874:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = BAUD_RATE;
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <_ZL13MX_UART4_Initv+0x54>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_ZL13MX_UART4_Initv+0x54>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <_ZL13MX_UART4_Initv+0x54>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <_ZL13MX_UART4_Initv+0x54>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <_ZL13MX_UART4_Initv+0x54>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <_ZL13MX_UART4_Initv+0x54>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_ZL13MX_UART4_Initv+0x54>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018a2:	4807      	ldr	r0, [pc, #28]	; (80018c0 <_ZL13MX_UART4_Initv+0x54>)
 80018a4:	f006 fa75 	bl	8007d92 <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 80018b8:	f000 fab6 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000424 	.word	0x20000424
 80018c4:	40004c00 	.word	0x40004c00

080018c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a44      	ldr	r2, [pc, #272]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 80018e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a3d      	ldr	r2, [pc, #244]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b37      	ldr	r3, [pc, #220]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a36      	ldr	r2, [pc, #216]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a2f      	ldr	r2, [pc, #188]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <_ZL12MX_GPIO_Initv+0x130>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, motor_left_dir_Pin|motor_left_step_Pin|motor_right_dir_Pin|motor_right_step_Pin
 800194e:	2200      	movs	r2, #0
 8001950:	f241 010f 	movw	r1, #4111	; 0x100f
 8001954:	4829      	ldr	r0, [pc, #164]	; (80019fc <_ZL12MX_GPIO_Initv+0x134>)
 8001956:	f004 f853 	bl	8005a00 <HAL_GPIO_WritePin>
                          |buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, running_led_Pin|planning_led_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	21c0      	movs	r1, #192	; 0xc0
 800195e:	4828      	ldr	r0, [pc, #160]	; (8001a00 <_ZL12MX_GPIO_Initv+0x138>)
 8001960:	f004 f84e 	bl	8005a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : motor_left_dir_Pin motor_right_dir_Pin */
  GPIO_InitStruct.Pin = motor_left_dir_Pin|motor_right_dir_Pin;
 8001964:	2305      	movs	r3, #5
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800196c:	2302      	movs	r3, #2
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001970:	2301      	movs	r3, #1
 8001972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <_ZL12MX_GPIO_Initv+0x134>)
 800197c:	f003 fe8c 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_left_step_Pin motor_right_step_Pin */
  GPIO_InitStruct.Pin = motor_left_step_Pin|motor_right_step_Pin;
 8001980:	230a      	movs	r3, #10
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001988:	2302      	movs	r3, #2
 800198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4819      	ldr	r0, [pc, #100]	; (80019fc <_ZL12MX_GPIO_Initv+0x134>)
 8001998:	f003 fe7e 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pins : running_led_Pin planning_led_Pin */
  GPIO_InitStruct.Pin = running_led_Pin|planning_led_Pin;
 800199c:	23c0      	movs	r3, #192	; 0xc0
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4813      	ldr	r0, [pc, #76]	; (8001a00 <_ZL12MX_GPIO_Initv+0x138>)
 80019b4:	f003 fe70 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : proximity_sensor_Pin */
  GPIO_InitStruct.Pin = proximity_sensor_Pin;
 80019b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <_ZL12MX_GPIO_Initv+0x13c>)
 80019ce:	f003 fe63 	bl	8005698 <HAL_GPIO_Init>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 80019d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019dc:	2302      	movs	r3, #2
 80019de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4804      	ldr	r0, [pc, #16]	; (80019fc <_ZL12MX_GPIO_Initv+0x134>)
 80019ec:	f003 fe54 	bl	8005698 <HAL_GPIO_Init>

}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400

08001a08 <_Z13StartMainTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b08e      	sub	sp, #56	; 0x38
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_IWDG_Init(&hiwdg);
 8001a10:	4886      	ldr	r0, [pc, #536]	; (8001c2c <_Z13StartMainTaskPKv+0x224>)
 8001a12:	f004 f96d 	bl	8005cf0 <HAL_IWDG_Init>
	int buzzerStartTimes = 6;
 8001a16:	2306      	movs	r3, #6
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
	while(--buzzerStartTimes){
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <_Z13StartMainTaskPKv+0x3a>
		HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a34:	487e      	ldr	r0, [pc, #504]	; (8001c30 <_Z13StartMainTaskPKv+0x228>)
 8001a36:	f003 fffc 	bl	8005a32 <HAL_GPIO_TogglePin>
		osDelay(100);
 8001a3a:	2064      	movs	r0, #100	; 0x64
 8001a3c:	f007 f8ed 	bl	8008c1a <osDelay>
	while(--buzzerStartTimes){
 8001a40:	e7eb      	b.n	8001a1a <_Z13StartMainTaskPKv+0x12>
	}
	HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a48:	4879      	ldr	r0, [pc, #484]	; (8001c30 <_Z13StartMainTaskPKv+0x228>)
 8001a4a:	f003 ffd9 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart4, (uint8_t*)recievedData, 1);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4978      	ldr	r1, [pc, #480]	; (8001c34 <_Z13StartMainTaskPKv+0x22c>)
 8001a52:	4879      	ldr	r0, [pc, #484]	; (8001c38 <_Z13StartMainTaskPKv+0x230>)
 8001a54:	f006 f9ea 	bl	8007e2c <HAL_UART_Receive_IT>
  /* Infinite loop */
	for(;;)
	{
		// Refresh watch dog timer
		HAL_IWDG_Refresh(&hiwdg);
 8001a58:	4874      	ldr	r0, [pc, #464]	; (8001c2c <_Z13StartMainTaskPKv+0x224>)
 8001a5a:	f004 f98b 	bl	8005d74 <HAL_IWDG_Refresh>
		// Check if new received command is not empty and merge to current command
		if(parsedData.size() == 0) {
 8001a5e:	4877      	ldr	r0, [pc, #476]	; (8001c3c <_Z13StartMainTaskPKv+0x234>)
 8001a60:	f000 fa70 	bl	8001f44 <_ZNKSt6vectorI10DataStructSaIS0_EE4sizeEv>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf0c      	ite	eq
 8001a6a:	2301      	moveq	r3, #1
 8001a6c:	2300      	movne	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <_Z13StartMainTaskPKv+0x7c>
			HAL_GPIO_TogglePin(running_led_GPIO_Port, running_led_Pin);
 8001a74:	2140      	movs	r1, #64	; 0x40
 8001a76:	4872      	ldr	r0, [pc, #456]	; (8001c40 <_Z13StartMainTaskPKv+0x238>)
 8001a78:	f003 ffdb 	bl	8005a32 <HAL_GPIO_TogglePin>
			osDelay(200);
 8001a7c:	20c8      	movs	r0, #200	; 0xc8
 8001a7e:	f007 f8cc 	bl	8008c1a <osDelay>
			continue;
 8001a82:	e0d1      	b.n	8001c28 <_Z13StartMainTaskPKv+0x220>
		}

		bool isOnLongDirectMove = false;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		while(parsedData.size() != 0) {
 8001a8a:	486c      	ldr	r0, [pc, #432]	; (8001c3c <_Z13StartMainTaskPKv+0x234>)
 8001a8c:	f000 fa5a 	bl	8001f44 <_ZNKSt6vectorI10DataStructSaIS0_EE4sizeEv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80c0 	beq.w	8001c22 <_Z13StartMainTaskPKv+0x21a>
		  DataStruct currentCommand = *parsedData.begin();
 8001aa2:	4866      	ldr	r0, [pc, #408]	; (8001c3c <_Z13StartMainTaskPKv+0x234>)
 8001aa4:	f000 fa64 	bl	8001f70 <_ZNSt6vectorI10DataStructSaIS0_EE5beginEv>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fa6d 	bl	8001f90 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEdeEv>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f107 040c 	add.w	r4, r7, #12
 8001abc:	461d      	mov	r5, r3
 8001abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac2:	682b      	ldr	r3, [r5, #0]
 8001ac4:	6023      	str	r3, [r4, #0]
		  // Erase current data
		  parsedData.erase(parsedData.begin());
 8001ac6:	485d      	ldr	r0, [pc, #372]	; (8001c3c <_Z13StartMainTaskPKv+0x234>)
 8001ac8:	f000 fa52 	bl	8001f70 <_ZNSt6vectorI10DataStructSaIS0_EE5beginEv>
 8001acc:	4603      	mov	r3, r0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fa64 	bl	8001fa8 <_ZN9__gnu_cxx17__normal_iteratorIPK10DataStructSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8001ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae2:	4856      	ldr	r0, [pc, #344]	; (8001c3c <_Z13StartMainTaskPKv+0x234>)
 8001ae4:	f000 fa71 	bl	8001fca <_ZNSt6vectorI10DataStructSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>

		  int act = currentCommand.action;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	3b01      	subs	r3, #1
 8001af0:	2b0a      	cmp	r3, #10
 8001af2:	d871      	bhi.n	8001bd8 <_Z13StartMainTaskPKv+0x1d0>
 8001af4:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <_Z13StartMainTaskPKv+0xf4>)
 8001af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afa:	bf00      	nop
 8001afc:	08001b29 	.word	0x08001b29
 8001b00:	08001b8d 	.word	0x08001b8d
 8001b04:	08001b93 	.word	0x08001b93
 8001b08:	08001b99 	.word	0x08001b99
 8001b0c:	08001b9f 	.word	0x08001b9f
 8001b10:	08001ba9 	.word	0x08001ba9
 8001b14:	08001bbb 	.word	0x08001bbb
 8001b18:	08001bf9 	.word	0x08001bf9
 8001b1c:	08001bf9 	.word	0x08001bf9
 8001b20:	08001bcd 	.word	0x08001bcd
 8001b24:	08001bd3 	.word	0x08001bd3
		  switch(act) {
		  case 1:
			  // direct move
			  if(!isOnLongDirectMove) {
 8001b28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b2c:	f083 0301 	eor.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01c      	beq.n	8001b70 <_Z13StartMainTaskPKv+0x168>
				  if(currentCommand.distance >= 2 || direcmoveDistance != 0) {
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	dc03      	bgt.n	8001b44 <_Z13StartMainTaskPKv+0x13c>
 8001b3c:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <_Z13StartMainTaskPKv+0x23c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <_Z13StartMainTaskPKv+0x154>
					  stepDirectMove( (currentCommand.distance - 1) * DIRECT_MOVE_STEP );
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	2264      	movs	r2, #100	; 0x64
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 f88a 	bl	8003c68 <_Z14stepDirectMovem>
					  isOnLongDirectMove = true;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001b5a:	e012      	b.n	8001b82 <_Z13StartMainTaskPKv+0x17a>
				  }
				  else if(currentCommand.distance == 1) {
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d10f      	bne.n	8001b82 <_Z13StartMainTaskPKv+0x17a>
					  stepDirectMove( DIRECT_MOVE_STEP );
 8001b62:	2064      	movs	r0, #100	; 0x64
 8001b64:	f002 f880 	bl	8003c68 <_Z14stepDirectMovem>
					  isOnLongDirectMove = false;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001b6e:	e008      	b.n	8001b82 <_Z13StartMainTaskPKv+0x17a>
				  }
			  }
			  else if(currentCommand.distance == 1) {
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d105      	bne.n	8001b82 <_Z13StartMainTaskPKv+0x17a>
				  stepDirectMove( DIRECT_MOVE_STEP );
 8001b76:	2064      	movs	r0, #100	; 0x64
 8001b78:	f002 f876 	bl	8003c68 <_Z14stepDirectMovem>
				  isOnLongDirectMove = false;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			  }
			  direcmoveDistance = currentCommand.distance - 1;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	4a2f      	ldr	r2, [pc, #188]	; (8001c44 <_Z13StartMainTaskPKv+0x23c>)
 8001b88:	6013      	str	r3, [r2, #0]
			  break;
 8001b8a:	e036      	b.n	8001bfa <_Z13StartMainTaskPKv+0x1f2>
		  case 2:
			  // Rotate 90
			  turnRight();
 8001b8c:	f002 f92c 	bl	8003de8 <_Z9turnRightv>
			  break;
 8001b90:	e033      	b.n	8001bfa <_Z13StartMainTaskPKv+0x1f2>
		  case 3:
			  // Rotate -90
			  turnLeft();
 8001b92:	f002 f8c9 	bl	8003d28 <_Z8turnLeftv>
			  break;
 8001b96:	e030      	b.n	8001bfa <_Z13StartMainTaskPKv+0x1f2>
		  case 4:
			  // Rotate 180
			  turnBack();
 8001b98:	f002 f986 	bl	8003ea8 <_Z8turnBackv>
			  break;
 8001b9c:	e02d      	b.n	8001bfa <_Z13StartMainTaskPKv+0x1f2>
		  case 5:
			  // Stop
			  osDelay(500);
 8001b9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ba2:	f007 f83a 	bl	8008c1a <osDelay>
			  break;
 8001ba6:	e028      	b.n	8001bfa <_Z13StartMainTaskPKv+0x1f2>
		  case 6:
			  // Lift up
			  osDelay(500);
 8001ba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bac:	f007 f835 	bl	8008c1a <osDelay>
//			  liftUp();
			  osDelay(500);
 8001bb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb4:	f007 f831 	bl	8008c1a <osDelay>
			  break;
 8001bb8:	e01f      	b.n	8001bfa <_Z13StartMainTaskPKv+0x1f2>
		  case 7:
			  // Lift down
			  osDelay(500);
 8001bba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bbe:	f007 f82c 	bl	8008c1a <osDelay>
//			  liftDown();
			  osDelay(500);
 8001bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc6:	f007 f828 	bl	8008c1a <osDelay>
			  break;
 8001bca:	e016      	b.n	8001bfa <_Z13StartMainTaskPKv+0x1f2>
			  // TODO: Power OFF
			  break;
		  case 10:
			  // Reset
			  // TODO: Reset
			  HAL_NVIC_SystemReset();
 8001bcc:	f003 fccd 	bl	800556a <HAL_NVIC_SystemReset>
			  break;
 8001bd0:	e013      	b.n	8001bfa <_Z13StartMainTaskPKv+0x1f2>
		  case 11:
			  // Move backward
			  moveBack();
 8001bd2:	f002 f9c9 	bl	8003f68 <_Z8moveBackv>
			  break;
 8001bd6:	e010      	b.n	8001bfa <_Z13StartMainTaskPKv+0x1f2>
		  default:
			  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bde:	4814      	ldr	r0, [pc, #80]	; (8001c30 <_Z13StartMainTaskPKv+0x228>)
 8001be0:	f003 ff0e 	bl	8005a00 <HAL_GPIO_WritePin>
			  osDelay(100);
 8001be4:	2064      	movs	r0, #100	; 0x64
 8001be6:	f007 f818 	bl	8008c1a <osDelay>
			  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf0:	480f      	ldr	r0, [pc, #60]	; (8001c30 <_Z13StartMainTaskPKv+0x228>)
 8001bf2:	f003 ff05 	bl	8005a00 <HAL_GPIO_WritePin>
			  break;
 8001bf6:	e000      	b.n	8001bfa <_Z13StartMainTaskPKv+0x1f2>
			  break;
 8001bf8:	bf00      	nop
		  }
		  HAL_GPIO_TogglePin(running_led_GPIO_Port, running_led_Pin);
 8001bfa:	2140      	movs	r1, #64	; 0x40
 8001bfc:	4810      	ldr	r0, [pc, #64]	; (8001c40 <_Z13StartMainTaskPKv+0x238>)
 8001bfe:	f003 ff18 	bl	8005a32 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8001c02:	2201      	movs	r2, #1
 8001c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c08:	4809      	ldr	r0, [pc, #36]	; (8001c30 <_Z13StartMainTaskPKv+0x228>)
 8001c0a:	f003 fef9 	bl	8005a00 <HAL_GPIO_WritePin>
		  osDelay(50);
 8001c0e:	2032      	movs	r0, #50	; 0x32
 8001c10:	f007 f803 	bl	8008c1a <osDelay>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <_Z13StartMainTaskPKv+0x228>)
 8001c1c:	f003 fef0 	bl	8005a00 <HAL_GPIO_WritePin>
		while(parsedData.size() != 0) {
 8001c20:	e733      	b.n	8001a8a <_Z13StartMainTaskPKv+0x82>
		}

		parsedData.clear();
 8001c22:	4806      	ldr	r0, [pc, #24]	; (8001c3c <_Z13StartMainTaskPKv+0x234>)
 8001c24:	f000 f9f8 	bl	8002018 <_ZNSt6vectorI10DataStructSaIS0_EE5clearEv>
	}
 8001c28:	e716      	b.n	8001a58 <_Z13StartMainTaskPKv+0x50>
 8001c2a:	bf00      	nop
 8001c2c:	20000388 	.word	0x20000388
 8001c30:	40020800 	.word	0x40020800
 8001c34:	200004a8 	.word	0x200004a8
 8001c38:	20000424 	.word	0x20000424
 8001c3c:	20000488 	.word	0x20000488
 8001c40:	40020000 	.word	0x40020000
 8001c44:	20000494 	.word	0x20000494

08001c48 <_Z17StartParseCommandPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParseCommand */
void StartParseCommand(void const * argument)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b08d      	sub	sp, #52	; 0x34
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParseDataTask */
  /* Infinite loop */
	for(;;)
	  {
		osSemaphoreWait(parseCommandSemHandle, osWaitForever);
 8001c50:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <_Z17StartParseCommandPKv+0xf4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f007 f825 	bl	8008ca8 <osSemaphoreWait>

		// Refresh watch dog timer
		HAL_IWDG_Refresh(&hiwdg);
 8001c5e:	4838      	ldr	r0, [pc, #224]	; (8001d40 <_Z17StartParseCommandPKv+0xf8>)
 8001c60:	f004 f888 	bl	8005d74 <HAL_IWDG_Refresh>

		// Check raw received data
		if(data.size() == 0) {
 8001c64:	4837      	ldr	r0, [pc, #220]	; (8001d44 <_Z17StartParseCommandPKv+0xfc>)
 8001c66:	f000 f9e5 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d15d      	bne.n	8001d36 <_Z17StartParseCommandPKv+0xee>
			continue;
		}

		// Create a temp parsed data and check
		std::vector<DataStruct> parsedNewTempData = parseData(data);
 8001c7a:	f107 0318 	add.w	r3, r7, #24
 8001c7e:	4931      	ldr	r1, [pc, #196]	; (8001d44 <_Z17StartParseCommandPKv+0xfc>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 f9e6 	bl	8002052 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	f107 0218 	add.w	r2, r7, #24
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 f9c9 	bl	8004028 <_Z9parseDataSt6vectorIcSaIcEE>
 8001c96:	f107 0318 	add.w	r3, r7, #24
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fa16 	bl	80020cc <_ZNSt6vectorIcSaIcEED1Ev>
		// Clear old raw data
		data.clear();
 8001ca0:	4828      	ldr	r0, [pc, #160]	; (8001d44 <_Z17StartParseCommandPKv+0xfc>)
 8001ca2:	f000 fa49 	bl	8002138 <_ZNSt6vectorIcSaIcEE5clearEv>

		parsedData.insert( parsedData.end(), parsedNewTempData.begin(), parsedNewTempData.end() );
 8001ca6:	4828      	ldr	r0, [pc, #160]	; (8001d48 <_Z17StartParseCommandPKv+0x100>)
 8001ca8:	f000 fa54 	bl	8002154 <_ZNSt6vectorI10DataStructSaIS0_EE3endEv>
 8001cac:	4603      	mov	r3, r0
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f974 	bl	8001fa8 <_ZN9__gnu_cxx17__normal_iteratorIPK10DataStructSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f953 	bl	8001f70 <_ZNSt6vectorI10DataStructSaIS0_EE5beginEv>
 8001cca:	4604      	mov	r4, r0
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fa3f 	bl	8002154 <_ZNSt6vectorI10DataStructSaIS0_EE3endEv>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4622      	mov	r2, r4
 8001cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cdc:	481a      	ldr	r0, [pc, #104]	; (8001d48 <_Z17StartParseCommandPKv+0x100>)
 8001cde:	f000 fa4a 	bl	8002176 <_ZNSt6vectorI10DataStructSaIS0_EE6insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEvEES7_NS5_IPKS0_S2_EET_SB_>

		parsedNewTempData.clear();
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f996 	bl	8002018 <_ZNSt6vectorI10DataStructSaIS0_EE5clearEv>

		int i = 6;
 8001cec:	2306      	movs	r3, #6
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(i--) {
 8001cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf2:	1e5a      	subs	r2, r3, #1
 8001cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf14      	ite	ne
 8001cfa:	2301      	movne	r3, #1
 8001cfc:	2300      	moveq	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00c      	beq.n	8001d1e <_Z17StartParseCommandPKv+0xd6>
		  HAL_GPIO_TogglePin(planning_led_GPIO_Port, planning_led_Pin);
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <_Z17StartParseCommandPKv+0x104>)
 8001d08:	f003 fe93 	bl	8005a32 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(buzzer_GPIO_Port, buzzer_Pin);
 8001d0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d10:	480f      	ldr	r0, [pc, #60]	; (8001d50 <_Z17StartParseCommandPKv+0x108>)
 8001d12:	f003 fe8e 	bl	8005a32 <HAL_GPIO_TogglePin>
		  osDelay(30);
 8001d16:	201e      	movs	r0, #30
 8001d18:	f006 ff7f 	bl	8008c1a <osDelay>
		while(i--) {
 8001d1c:	e7e8      	b.n	8001cf0 <_Z17StartParseCommandPKv+0xa8>
		}

		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d24:	480a      	ldr	r0, [pc, #40]	; (8001d50 <_Z17StartParseCommandPKv+0x108>)
 8001d26:	f003 fe6b 	bl	8005a00 <HAL_GPIO_WritePin>
		std::vector<DataStruct> parsedNewTempData = parseData(data);
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f9e7 	bl	8002102 <_ZNSt6vectorI10DataStructSaIS0_EED1Ev>
 8001d34:	e78c      	b.n	8001c50 <_Z17StartParseCommandPKv+0x8>
			continue;
 8001d36:	bf00      	nop
	  }
 8001d38:	e78a      	b.n	8001c50 <_Z17StartParseCommandPKv+0x8>
 8001d3a:	bf00      	nop
 8001d3c:	20000478 	.word	0x20000478
 8001d40:	20000388 	.word	0x20000388
 8001d44:	2000047c 	.word	0x2000047c
 8001d48:	20000488 	.word	0x20000488
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020800 	.word	0x40020800

08001d54 <_Z16StartCheckSafetyPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCheckSafety */
void StartCheckSafety(void const * argument)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCheckSafety */
  // Start IC IT
  HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	481f      	ldr	r0, [pc, #124]	; (8001ddc <_Z16StartCheckSafetyPKv+0x88>)
 8001d60:	f004 ff12 	bl	8006b88 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
//	checkObstacleSonar();
	osDelay(300);
 8001d64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d68:	f006 ff57 	bl	8008c1a <osDelay>
	bool hasObstacle = false;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
	hasObstacle = HAL_GPIO_ReadPin(proximity_sensor_GPIO_Port, proximity_sensor_Pin);
 8001d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d74:	481a      	ldr	r0, [pc, #104]	; (8001de0 <_Z16StartCheckSafetyPKv+0x8c>)
 8001d76:	f003 fe2b 	bl	80059d0 <HAL_GPIO_ReadPin>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
	if(!hasObstacle || sonarDistance < SAFETY_DISTANCE) {
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d103      	bne.n	8001d9a <_Z16StartCheckSafetyPKv+0x46>
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <_Z16StartCheckSafetyPKv+0x90>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b27      	cmp	r3, #39	; 0x27
 8001d98:	dc01      	bgt.n	8001d9e <_Z16StartCheckSafetyPKv+0x4a>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <_Z16StartCheckSafetyPKv+0x4c>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d015      	beq.n	8001dd0 <_Z16StartCheckSafetyPKv+0x7c>
		osThreadSuspend(mainTaskHandle);
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_Z16StartCheckSafetyPKv+0x94>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f007 f801 	bl	8008db0 <osThreadSuspend>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <_Z16StartCheckSafetyPKv+0x98>)
 8001db6:	f003 fe23 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay(2000);
 8001dba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dbe:	f006 ff2c 	bl	8008c1a <osDelay>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc8:	4808      	ldr	r0, [pc, #32]	; (8001dec <_Z16StartCheckSafetyPKv+0x98>)
 8001dca:	f003 fe19 	bl	8005a00 <HAL_GPIO_WritePin>
 8001dce:	e7c9      	b.n	8001d64 <_Z16StartCheckSafetyPKv+0x10>
	} else {
		osThreadResume(mainTaskHandle);
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <_Z16StartCheckSafetyPKv+0x94>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f006 fff7 	bl	8008dc8 <osThreadResume>
	}
  }
 8001dda:	e7c3      	b.n	8001d64 <_Z16StartCheckSafetyPKv+0x10>
 8001ddc:	200003dc 	.word	0x200003dc
 8001de0:	40020400 	.word	0x40020400
 8001de4:	200004a0 	.word	0x200004a0
 8001de8:	20000468 	.word	0x20000468
 8001dec:	40020800 	.word	0x40020800

08001df0 <_Z17StartCheckbatteryPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCheckbattery */
void StartCheckbattery(void const * argument)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCheckbattery */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dfc:	f006 ff0d 	bl	8008c1a <osDelay>
 8001e00:	e7fa      	b.n	8001df8 <_Z17StartCheckbatteryPKv+0x8>
	...

08001e04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e16:	f003 f809 	bl	8004e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40002000 	.word	0x40002000

08001e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <Error_Handler+0x8>

08001e32 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f009 fbd9 	bl	800b5f2 <_ZNSaIcEC1Ev>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f9cf 	bl	80021e6 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001e68:	461a      	mov	r2, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f9cf 	bl	800220e <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f910 	bl	8001098 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f9d2 	bl	8002234 <_ZNSaI10DataStructEC1Ev>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f9da 	bl	800224c <_ZNSt12_Vector_baseI10DataStructSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_ZNSaI10DataStructED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f9e2 	bl	8002274 <_ZN9__gnu_cxx13new_allocatorI10DataStructED1Ev>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <_ZNSt12_Vector_baseI10DataStructSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	109b      	asrs	r3, r3, #2
 8001ed4:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <_ZNSt12_Vector_baseI10DataStructSaIS0_EED1Ev+0x38>)
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001eda:	461a      	mov	r2, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f9d4 	bl	800228a <_ZNSt12_Vector_baseI10DataStructSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff f8fd 	bl	80010e4 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE12_Vector_implD1Ev>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	cccccccd 	.word	0xcccccccd

08001ef8 <_ZNSt6vectorIcSaIcEE9push_backERKc>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d00c      	beq.n	8001f28 <_ZNSt6vectorIcSaIcEE9push_backERKc+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	4619      	mov	r1, r3
 8001f18:	f000 f9ca 	bl	80022b0 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8001f26:	e008      	b.n	8001f3a <_ZNSt6vectorIcSaIcEE9push_backERKc+0x42>
	  _M_realloc_insert(end(), __x);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f9d4 	bl	80022d6 <_ZNSt6vectorIcSaIcEE3endEv>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f9f5 	bl	8002324 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
      }
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <_ZNKSt6vectorI10DataStructSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	109b      	asrs	r3, r3, #2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <_ZNKSt6vectorI10DataStructSaIS0_EE4sizeEv+0x28>)
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	cccccccd 	.word	0xcccccccd

08001f70 <_ZNSt6vectorI10DataStructSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fa87 	bl	8002494 <_ZN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEdeEv>:
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const _GLIBCXX_NOEXCEPT
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_ZN9__gnu_cxx17__normal_iteratorIPK10DataStructSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f000 fa7e 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_ZNSt6vectorI10DataStructSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ffcb 	bl	8001f70 <_ZNSt6vectorI10DataStructSaIS0_EE5beginEv>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fa73 	bl	80024ca <_ZNKSt6vectorI10DataStructSaIS0_EE6cbeginEv>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	f107 020c 	add.w	r2, r7, #12
 8001fec:	463b      	mov	r3, r7
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fa7f 	bl	80024f4 <_ZN9__gnu_cxxmiIPK10DataStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fa92 	bl	8002528 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEplEi>
 8002004:	4603      	mov	r3, r0
 8002006:	4619      	mov	r1, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 faa8 	bl	800255e <_ZNSt6vectorI10DataStructSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 800200e:	4603      	mov	r3, r0
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_ZNSt6vectorI10DataStructSaIS0_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fad6 	bl	80025d8 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_erase_at_endEPS0_>
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 8002052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800205c:	687c      	ldr	r4, [r7, #4]
 800205e:	6838      	ldr	r0, [r7, #0]
 8002060:	f7ff ffe8 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8002064:	4605      	mov	r5, r0
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fae9 	bl	8002640 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800206e:	4602      	mov	r2, r0
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fad4 	bl	8002624 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	461a      	mov	r2, r3
 8002082:	4629      	mov	r1, r5
 8002084:	4620      	mov	r0, r4
 8002086:	f000 fae6 	bl	8002656 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	4618      	mov	r0, r3
 8002090:	f009 fab1 	bl	800b5f6 <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8002094:	6838      	ldr	r0, [r7, #0]
 8002096:	f000 faf2 	bl	800267e <_ZNKSt6vectorIcSaIcEE5beginEv>
 800209a:	4605      	mov	r5, r0
 800209c:	6838      	ldr	r0, [r7, #0]
 800209e:	f000 fb02 	bl	80026a6 <_ZNKSt6vectorIcSaIcEE3endEv>
 80020a2:	4606      	mov	r6, r0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fb0f 	bl	80026ce <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80020b0:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80020b2:	4622      	mov	r2, r4
 80020b4:	4631      	mov	r1, r6
 80020b6:	4628      	mov	r0, r5
 80020b8:	f000 fb14 	bl	80026e4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 80020bc:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	605a      	str	r2, [r3, #4]
      }
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020cc <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681c      	ldr	r4, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 faf5 	bl	80026ce <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80020e4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80020e6:	461a      	mov	r2, r3
 80020e8:	4629      	mov	r1, r5
 80020ea:	4620      	mov	r0, r4
 80020ec:	f000 fb0b 	bl	8002706 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fead 	bl	8001e52 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bdb0      	pop	{r4, r5, r7, pc}

08002102 <_ZNSt6vectorI10DataStructSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002102:	b5b0      	push	{r4, r5, r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681c      	ldr	r4, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fb04 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 800211a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800211c:	461a      	mov	r2, r3
 800211e:	4629      	mov	r1, r5
 8002120:	4620      	mov	r0, r4
 8002122:	f000 fb09 	bl	8002738 <_ZSt8_DestroyIP10DataStructS0_EvT_S2_RSaIT0_E>
      }
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fec7 	bl	8001ebc <_ZNSt12_Vector_baseI10DataStructSaIS0_EED1Ev>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bdb0      	pop	{r4, r5, r7, pc}

08002138 <_ZNSt6vectorIcSaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fb04 	bl	8002754 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZNSt6vectorI10DataStructSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	1d1a      	adds	r2, r3, #4
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f994 	bl	8002494 <_ZN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_ZNSt6vectorI10DataStructSaIS0_EE6insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEvEES7_NS5_IPKS0_S2_EET_SB_>:
	insert(const_iterator __position, _InputIterator __first,
 8002176:	b590      	push	{r4, r7, lr}
 8002178:	b08d      	sub	sp, #52	; 0x34
 800217a:	af02      	add	r7, sp, #8
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	603b      	str	r3, [r7, #0]
	  difference_type __offset = __position - cbegin();
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f9a0 	bl	80024ca <_ZNKSt6vectorI10DataStructSaIS0_EE6cbeginEv>
 800218a:	4603      	mov	r3, r0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	f107 0214 	add.w	r2, r7, #20
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f000 f9ab 	bl	80024f4 <_ZN9__gnu_cxxmiIPK10DataStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800219e:	6278      	str	r0, [r7, #36]	; 0x24
	  _M_insert_dispatch(begin() + __offset,
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7ff fee5 	bl	8001f70 <_ZNSt6vectorI10DataStructSaIS0_EE5beginEv>
 80021a6:	4603      	mov	r3, r0
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	f107 0318 	add.w	r3, r7, #24
 80021ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f9b9 	bl	8002528 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEplEi>
 80021b6:	4601      	mov	r1, r0
 80021b8:	f88d 4000 	strb.w	r4, [sp]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fae7 	bl	8002794 <_ZNSt6vectorI10DataStructSaIS0_EE18_M_insert_dispatchIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St12__false_type>
	  return begin() + __offset;
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f7ff fed2 	bl	8001f70 <_ZNSt6vectorI10DataStructSaIS0_EE5beginEv>
 80021cc:	4603      	mov	r3, r0
 80021ce:	623b      	str	r3, [r7, #32]
 80021d0:	f107 0320 	add.w	r3, r7, #32
 80021d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f9a6 	bl	8002528 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEplEi>
 80021dc:	4603      	mov	r3, r0
	}
 80021de:	4618      	mov	r0, r3
 80021e0:	372c      	adds	r7, #44	; 0x2c
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}

080021e6 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
	{ }
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
	if (__p)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 facb 	bl	80027c2 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <_ZNSaI10DataStructEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 facf 	bl	80027e0 <_ZN9__gnu_cxx13new_allocatorI10DataStructEC1Ev>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_ZNSt12_Vector_baseI10DataStructSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
	{ }
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_ZN9__gnu_cxx13new_allocatorI10DataStructED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <_ZNSt12_Vector_baseI10DataStructSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
	if (__p)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 faa7 	bl	80027f6 <_ZNSt16allocator_traitsISaI10DataStructEE10deallocateERS1_PS0_j>
      }
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 faa9 	bl	8002814 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461a      	mov	r2, r3
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 faae 	bl	800282a <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_>
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	1d1a      	adds	r2, r3, #4
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fab5 	bl	8002858 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_ZNSt6vectorIcSaIcEE15_S_use_relocateEv>:
      _S_use_relocate()
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f805 	bl	800230e <_ZNSt6vectorIcSaIcEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8002304:	4603      	mov	r3, r0
      }
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_ZNSt6vectorIcSaIcEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8002316:	2301      	movs	r3, #1
      }
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8002324:	b5b0      	push	{r4, r5, r7, lr}
 8002326:	b08c      	sub	sp, #48	; 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8002330:	4a57      	ldr	r2, [pc, #348]	; (8002490 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x16c>)
 8002332:	2101      	movs	r1, #1
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fa9f 	bl	8002878 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 800233a:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fadc 	bl	8002906 <_ZNSt6vectorIcSaIcEE5beginEv>
 800234e:	4603      	mov	r3, r0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	f107 0214 	add.w	r2, r7, #20
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fae2 	bl	8002926 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002362:	4603      	mov	r3, r0
 8002364:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800236a:	4618      	mov	r0, r3
 800236c:	f000 faef 	bl	800294e <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8002370:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8002376:	68fc      	ldr	r4, [r7, #12]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	18d5      	adds	r5, r2, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fa48 	bl	8002814 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	4629      	mov	r1, r5
 800238a:	4620      	mov	r0, r4
 800238c:	f7ff ff90 	bl	80022b0 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8002394:	f7ff ffb0 	bl	80022f8 <_ZNSt6vectorIcSaIcEE15_S_use_relocateEv>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d027      	beq.n	80023ee <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0xca>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800239e:	f107 0308 	add.w	r3, r7, #8
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fafb 	bl	800299e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 80023a8:	4603      	mov	r3, r0
 80023aa:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f98d 	bl	80026ce <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80023b4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4621      	mov	r1, r4
 80023ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023bc:	f000 fadb 	bl	8002976 <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>
 80023c0:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	3301      	adds	r3, #1
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fae6 	bl	800299e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 80023d2:	4603      	mov	r3, r0
 80023d4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f978 	bl	80026ce <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80023de:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80023e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e2:	6a39      	ldr	r1, [r7, #32]
 80023e4:	4620      	mov	r0, r4
 80023e6:	f000 fac6 	bl	8002976 <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>
 80023ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80023ec:	e026      	b.n	800243c <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x118>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fad3 	bl	800299e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f965 	bl	80026ce <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002404:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4621      	mov	r1, r4
 800240a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800240c:	f000 fad2 	bl	80029b4 <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 8002410:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	3301      	adds	r3, #1
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8002418:	f107 0308 	add.w	r3, r7, #8
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fabe 	bl	800299e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8002422:	4603      	mov	r3, r0
 8002424:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f950 	bl	80026ce <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800242e:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8002430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002432:	6a39      	ldr	r1, [r7, #32]
 8002434:	4620      	mov	r0, r4
 8002436:	f000 fabd 	bl	80029b4 <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800243a:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800243c:	f7ff ff5c 	bl	80022f8 <_ZNSt6vectorIcSaIcEE15_S_use_relocateEv>
 8002440:	4603      	mov	r3, r0
 8002442:	f083 0301 	eor.w	r3, r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x13c>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f93d 	bl	80026ce <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	6a39      	ldr	r1, [r7, #32]
 800245a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800245c:	f000 f953 	bl	8002706 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8002460:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 800246a:	461a      	mov	r2, r3
 800246c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800246e:	f7ff fece 	bl	800220e <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      this->_M_impl._M_start = __new_start;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	441a      	add	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
    }
 8002488:	bf00      	nop
 800248a:	3730      	adds	r7, #48	; 0x30
 800248c:	46bd      	mov	sp, r7
 800248e:	bdb0      	pop	{r4, r5, r7, pc}
 8002490:	0800caa0 	.word	0x0800caa0

08002494 <_ZN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_ZNKSt6vectorI10DataStructSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	f107 020c 	add.w	r2, r7, #12
 80024dc:	f107 0308 	add.w	r3, r7, #8
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fa7f 	bl	80029e6 <_ZN9__gnu_cxx17__normal_iteratorIPK10DataStructSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <_ZN9__gnu_cxxmiIPK10DataStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa81 	bl	8002a06 <_ZNK9__gnu_cxx17__normal_iteratorIPK10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002504:	4603      	mov	r3, r0
 8002506:	681c      	ldr	r4, [r3, #0]
 8002508:	6838      	ldr	r0, [r7, #0]
 800250a:	f000 fa7c 	bl	8002a06 <_ZNK9__gnu_cxx17__normal_iteratorIPK10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 800250e:	4603      	mov	r3, r0
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1ae3      	subs	r3, r4, r3
 8002514:	109b      	asrs	r3, r3, #2
 8002516:	4a03      	ldr	r2, [pc, #12]	; (8002524 <_ZN9__gnu_cxxmiIPK10DataStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bd90      	pop	{r4, r7, pc}
 8002524:	cccccccd 	.word	0xcccccccd

08002528 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	f107 020c 	add.w	r2, r7, #12
 8002548:	f107 0308 	add.w	r3, r7, #8
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ffa0 	bl	8002494 <_ZN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_ZNSt6vectorI10DataStructSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 800255e:	b590      	push	{r4, r7, lr}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 8002568:	463b      	mov	r3, r7
 800256a:	2101      	movs	r1, #1
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ffdb 	bl	8002528 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEplEi>
 8002572:	4603      	mov	r3, r0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff fdec 	bl	8002154 <_ZNSt6vectorI10DataStructSaIS0_EE3endEv>
 800257c:	4603      	mov	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	f107 020c 	add.w	r2, r7, #12
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fa46 	bl	8002a1c <_ZN9__gnu_cxxneIP10DataStructSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00e      	beq.n	80025b4 <_ZNSt6vectorI10DataStructSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8002596:	463b      	mov	r3, r7
 8002598:	2101      	movs	r1, #1
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ffc4 	bl	8002528 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEplEi>
 80025a0:	4604      	mov	r4, r0
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fdd6 	bl	8002154 <_ZNSt6vectorI10DataStructSaIS0_EE3endEv>
 80025a8:	4603      	mov	r3, r0
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4620      	mov	r0, r4
 80025b0:	f000 fa4c 	bl	8002a4c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f1a3 0214 	sub.w	r2, r3, #20
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f000 fa57 	bl	8002a7c <_ZNSt16allocator_traitsISaI10DataStructEE7destroyIS0_EEvRS1_PT_>
      return __position;
 80025ce:	683b      	ldr	r3, [r7, #0]
    }
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd90      	pop	{r4, r7, pc}

080025d8 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_erase_at_endEPS0_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	109b      	asrs	r3, r3, #2
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_erase_at_endEPS0_+0x48>)
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00e      	beq.n	8002618 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_erase_at_endEPS0_+0x40>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f88e 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8002606:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002608:	461a      	mov	r2, r3
 800260a:	4621      	mov	r1, r4
 800260c:	6838      	ldr	r0, [r7, #0]
 800260e:	f000 f893 	bl	8002738 <_ZSt8_DestroyIP10DataStructS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bd90      	pop	{r4, r7, pc}
 8002620:	cccccccd 	.word	0xcccccccd

08002624 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6839      	ldr	r1, [r7, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fa2f 	bl	8002a96 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fa22 	bl	8002ab0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fa30 	bl	8002ad4 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	f107 020c 	add.w	r2, r7, #12
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fa36 	bl	8002b08 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	f107 020c 	add.w	r2, r7, #12
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fa22 	bl	8002b08 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa16 	bl	8002b28 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fa19 	bl	8002b4c <_ZSt8_DestroyIPcEvT_S1_>
    }
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <_ZSt8_DestroyIP10DataStructS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fa0d 	bl	8002b66 <_ZSt8_DestroyIP10DataStructEvT_S2_>
    }
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00e      	beq.n	800278c <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ffaa 	bl	80026ce <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800277a:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800277c:	461a      	mov	r2, r3
 800277e:	4621      	mov	r1, r4
 8002780:	6838      	ldr	r0, [r7, #0]
 8002782:	f7ff ffc0 	bl	8002706 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	605a      	str	r2, [r3, #4]
      }
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}

08002794 <_ZNSt6vectorI10DataStructSaIS0_EE18_M_insert_dispatchIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St12__false_type>:
	_M_insert_dispatch(iterator __pos, _InputIterator __first,
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
			  std::__iterator_category(__first));
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f9eb 	bl	8002b80 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKS9_>
	  _M_range_insert(__pos, __first, __last,
 80027aa:	f88d 4000 	strb.w	r4, [sp]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f9ed 	bl	8002b94 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag>
	}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}

080027c2 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fb0c 	bl	8002df0 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_ZN9__gnu_cxx13new_allocatorI10DataStructEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <_ZNSt16allocator_traitsISaI10DataStructEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 faff 	bl	8002e0a <_ZN9__gnu_cxx13new_allocatorI10DataStructE10deallocateEPS1_j>
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800282a:	b590      	push	{r4, r7, lr}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff ffec 	bl	8002814 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800283c:	4603      	mov	r3, r0
 800283e:	781c      	ldrb	r4, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4619      	mov	r1, r3
 8002844:	2001      	movs	r0, #1
 8002846:	f7fe fc1b 	bl	8001080 <_ZnwjPv>
 800284a:	4603      	mov	r3, r0
 800284c:	4622      	mov	r2, r4
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bd90      	pop	{r4, r7, pc}

08002858 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 facd 	bl	8002e24 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800288a:	4604      	mov	r4, r0
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff fbd1 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8002892:	4603      	mov	r3, r0
 8002894:	1ae2      	subs	r2, r4, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	429a      	cmp	r2, r3
 800289a:	bf34      	ite	cc
 800289c:	2301      	movcc	r3, #1
 800289e:	2300      	movcs	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f008 feac 	bl	800b604 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff fbc1 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80028b2:	4604      	mov	r4, r0
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff fbbd 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80028ba:	4603      	mov	r3, r0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	f107 0208 	add.w	r2, r7, #8
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fabc 	bl	8002e46 <_ZSt3maxIjERKT_S2_S2_>
 80028ce:	4603      	mov	r3, r0
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4423      	add	r3, r4
 80028d4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f7ff fbac 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80028dc:	4602      	mov	r2, r0
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d306      	bcc.n	80028f2 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x7a>
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 fa9d 	bl	8002e24 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 80028ea:	4602      	mov	r2, r0
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d904      	bls.n	80028fc <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x84>
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fa96 	bl	8002e24 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 80028f8:	4603      	mov	r3, r0
 80028fa:	e000      	b.n	80028fe <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x86>
 80028fc:	697b      	ldr	r3, [r7, #20]
      }
 80028fe:	4618      	mov	r0, r3
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd90      	pop	{r4, r7, pc}

08002906 <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff9e 	bl	8002858 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002926:	b590      	push	{r4, r7, lr}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f834 	bl	800299e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8002936:	4603      	mov	r3, r0
 8002938:	681c      	ldr	r4, [r3, #0]
 800293a:	6838      	ldr	r0, [r7, #0]
 800293c:	f000 f82f 	bl	800299e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8002940:	4603      	mov	r3, r0
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	1ae3      	subs	r3, r4, r3
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}

0800294e <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6839      	ldr	r1, [r7, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fa83 	bl	8002e6e <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 8002968:	4603      	mov	r3, r0
 800296a:	e000      	b.n	800296e <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 800296c:	2300      	movs	r3, #0
      }
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002976:	b590      	push	{r4, r7, lr}
 8002978:	b089      	sub	sp, #36	; 0x24
 800297a:	af02      	add	r7, sp, #8
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002984:	f88d 4000 	strb.w	r4, [sp]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fa7c 	bl	8002e8c <_ZNSt6vectorIcSaIcEE14_S_do_relocateEPcS2_S2_RS0_St17integral_constantIbLb1EE>
 8002994:	4603      	mov	r3, r0
      }
 8002996:	4618      	mov	r0, r3
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd90      	pop	{r4, r7, pc}

0800299e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fa74 	bl	8002eb0 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 80029c8:	4604      	mov	r4, r0
 80029ca:	68b8      	ldr	r0, [r7, #8]
 80029cc:	f000 fa70 	bl	8002eb0 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 80029d0:	4601      	mov	r1, r0
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4620      	mov	r0, r4
 80029d8:	f000 fa79 	bl	8002ece <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 80029dc:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd90      	pop	{r4, r7, pc}

080029e6 <_ZN9__gnu_cxx17__normal_iteratorIPK10DataStructSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <_ZNK9__gnu_cxx17__normal_iteratorIPK10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <_ZN9__gnu_cxxneIP10DataStructSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff fd44 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	681c      	ldr	r4, [r3, #0]
 8002a30:	6838      	ldr	r0, [r7, #0]
 8002a32:	f7ff fd3f 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002a36:	4603      	mov	r3, r0
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	429c      	cmp	r4, r3
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd90      	pop	{r4, r7, pc}

08002a4c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fa49 	bl	8002ef0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEET_S8_>
 8002a5e:	4604      	mov	r4, r0
 8002a60:	68b8      	ldr	r0, [r7, #8]
 8002a62:	f000 fa45 	bl	8002ef0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEET_S8_>
 8002a66:	4603      	mov	r3, r0
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f000 fa4a 	bl	8002f06 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8002a72:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
    }
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}

08002a7c <_ZNSt16allocator_traitsISaI10DataStructEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8002a86:	6839      	ldr	r1, [r7, #0]
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fa5d 	bl	8002f48 <_ZN9__gnu_cxx13new_allocatorI10DataStructE7destroyIS1_EEvPT_>
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f008 fda6 	bl	800b5f4 <_ZNSaIcEC1ERKS_>
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f008 fd99 	bl	800b5f4 <_ZNSaIcEC1ERKS_>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fb8e 	bl	80021e6 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff34 	bl	800294e <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	441a      	add	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	609a      	str	r2, [r3, #8]
      }
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002b34:	2301      	movs	r3, #1
 8002b36:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fa0e 	bl	8002f5e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 8002b42:	4603      	mov	r3, r0
    }
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002b56:	6839      	ldr	r1, [r7, #0]
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fa10 	bl	8002f7e <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_ZSt8_DestroyIP10DataStructEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002b70:	6839      	ldr	r1, [r7, #0]
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fa0e 	bl	8002f94 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10DataStructEEvT_S4_>
    }
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKS9_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 8002b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b96:	b08d      	sub	sp, #52	; 0x34
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 8002ba2:	463a      	mov	r2, r7
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff37 	bl	8002a1c <_ZN9__gnu_cxxneIP10DataStructSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8115 	beq.w	8002de0 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x24c>
	  {
	    const size_type __n = std::distance(__first, __last);
 8002bb6:	6839      	ldr	r1, [r7, #0]
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f9f6 	bl	8002faa <_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E15difference_typeES9_S9_>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	    if (size_type(this->_M_impl._M_end_of_storage
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_finish) >= __n)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	109b      	asrs	r3, r3, #2
 8002bce:	4a86      	ldr	r2, [pc, #536]	; (8002de8 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x254>)
 8002bd0:	fb02 f303 	mul.w	r3, r2, r3
 8002bd4:	461a      	mov	r2, r3
	    if (size_type(this->_M_impl._M_end_of_storage
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	f200 8093 	bhi.w	8002d04 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x170>
	      {
		const size_type __elems_after = end() - __position;
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff fab8 	bl	8002154 <_ZNSt6vectorI10DataStructSaIS0_EE3endEv>
 8002be4:	4603      	mov	r3, r0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	f107 0208 	add.w	r2, r7, #8
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f9ec 	bl	8002fd0 <_ZN9__gnu_cxxmiIP10DataStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	61fb      	str	r3, [r7, #28]
		pointer __old_finish(this->_M_impl._M_finish);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	61bb      	str	r3, [r7, #24]
		if (__elems_after > __n)
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d939      	bls.n	8002c7e <_ZNSt6vectorI10DataStructSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0xea>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	425b      	negs	r3, r3
 8002c1a:	18cc      	adds	r4, r1, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685d      	ldr	r5, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685e      	ldr	r6, [r3, #4]
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fd7b 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8002c2c:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8002c2e:	4632      	mov	r2, r6
 8002c30:	4629      	mov	r1, r5
 8002c32:	4620      	mov	r0, r4
 8002c34:	f000 f9e6 	bl	8003004 <_ZSt22__uninitialized_move_aIP10DataStructS1_SaIS0_EET0_T_S4_S3_RT1_>
		    this->_M_impl._M_finish += __n;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	18ca      	adds	r2, r1, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		    _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8002c4c:	f107 0308 	add.w	r3, r7, #8
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fc2f 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002c56:	4603      	mov	r3, r0
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	425b      	negs	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f000 f9e2 	bl	8003036 <_ZSt13move_backwardIP10DataStructS1_ET0_T_S3_S2_>
					    __old_finish - __n, __old_finish);
		    std::copy(__first, __last, __position);
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	6839      	ldr	r1, [r7, #0]
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f9f5 	bl	8003066 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
 8002c7c:	e0b0      	b.n	8002de0 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x24c>
		    _ForwardIterator __mid = __first;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	613b      	str	r3, [r7, #16]
		    std::advance(__mid, __elems_after);
 8002c82:	f107 0310 	add.w	r3, r7, #16
 8002c86:	69f9      	ldr	r1, [r7, #28]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fa04 	bl	8003096 <_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEjEvRT_T0_>
		    std::__uninitialized_copy_a(__mid, __last,
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685c      	ldr	r4, [r3, #4]
						_M_get_Tp_allocator());
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fd44 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8002c9a:	4603      	mov	r3, r0
		    std::__uninitialized_copy_a(__mid, __last,
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	6839      	ldr	r1, [r7, #0]
 8002ca0:	6938      	ldr	r0, [r7, #16]
 8002ca2:	f000 fa0b 	bl	80030bc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_S2_ET0_T_S9_S8_RSaIT1_E>
		    this->_M_impl._M_finish += __n - __elems_after;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	1ad2      	subs	r2, r2, r3
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	18ca      	adds	r2, r1, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	605a      	str	r2, [r3, #4]
		    std::__uninitialized_move_a(__position.base(),
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fbf6 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	681c      	ldr	r4, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fd25 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8002cd8:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(__position.base(),
 8002cda:	462a      	mov	r2, r5
 8002cdc:	69b9      	ldr	r1, [r7, #24]
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f000 f990 	bl	8003004 <_ZSt22__uninitialized_move_aIP10DataStructS1_SaIS0_EET0_T_S4_S3_RT1_>
		    this->_M_impl._M_finish += __elems_after;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	18ca      	adds	r2, r1, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	605a      	str	r2, [r3, #4]
		    std::copy(__first, __mid, __position);
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	6939      	ldr	r1, [r7, #16]
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f9b2 	bl	8003066 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      }
 8002d02:	e06d      	b.n	8002de0 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x24c>
		const size_type __len =
 8002d04:	4a39      	ldr	r2, [pc, #228]	; (8002dec <_ZNSt6vectorI10DataStructSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x258>)
 8002d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f9e8 	bl	80030de <_ZNKSt6vectorI10DataStructSaIS0_EE12_M_check_lenEjPKc>
 8002d0e:	62b8      	str	r0, [r7, #40]	; 0x28
		pointer __new_start(this->_M_allocate(__len));
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fa29 	bl	800316c <_ZNSt12_Vector_baseI10DataStructSaIS0_EE11_M_allocateEj>
 8002d1a:	6278      	str	r0, [r7, #36]	; 0x24
		pointer __new_finish(__new_start);
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	623b      	str	r3, [r7, #32]
		      (this->_M_impl._M_start, __position.base(),
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681c      	ldr	r4, [r3, #0]
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fbc3 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	681d      	ldr	r5, [r3, #0]
		       __new_start, _M_get_Tp_allocator());
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fcf4 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8002d3a:	4603      	mov	r3, r0
		      (this->_M_impl._M_start, __position.base(),
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	4629      	mov	r1, r5
 8002d40:	4620      	mov	r0, r4
 8002d42:	f000 fa27 	bl	8003194 <_ZSt34__uninitialized_move_if_noexcept_aIP10DataStructS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002d46:	6238      	str	r0, [r7, #32]
						    _M_get_Tp_allocator());
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fce9 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8002d50:	4603      	mov	r3, r0
		      = std::__uninitialized_copy_a(__first, __last,
 8002d52:	6a3a      	ldr	r2, [r7, #32]
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f9b0 	bl	80030bc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_S2_ET0_T_S9_S8_RSaIT1_E>
 8002d5c:	6238      	str	r0, [r7, #32]
		      (__position.base(), this->_M_impl._M_finish,
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fba6 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	681c      	ldr	r4, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	685d      	ldr	r5, [r3, #4]
		       __new_finish, _M_get_Tp_allocator());
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fcd5 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8002d78:	4603      	mov	r3, r0
		      (__position.base(), this->_M_impl._M_finish,
 8002d7a:	6a3a      	ldr	r2, [r7, #32]
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f000 fa08 	bl	8003194 <_ZSt34__uninitialized_move_if_noexcept_aIP10DataStructS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002d84:	6238      	str	r0, [r7, #32]
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681c      	ldr	r4, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685d      	ldr	r5, [r3, #4]
			      _M_get_Tp_allocator());
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fcc6 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8002d96:	4603      	mov	r3, r0
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7ff fccb 	bl	8002738 <_ZSt8_DestroyIP10DataStructS0_EvT_S2_RSaIT0_E>
		_M_deallocate(this->_M_impl._M_start,
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6819      	ldr	r1, [r3, #0]
			      this->_M_impl._M_end_of_storage
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689a      	ldr	r2, [r3, #8]
			      - this->_M_impl._M_start);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	109b      	asrs	r3, r3, #2
 8002db4:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <_ZNSt6vectorI10DataStructSaIS0_EE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPS0_S2_EEEEvS7_T_S8_St20forward_iterator_tag+0x254>)
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
		_M_deallocate(this->_M_impl._M_start,
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f7ff fa65 	bl	800228a <_ZNSt12_Vector_baseI10DataStructSaIS0_EE13_M_deallocateEPS0_j>
		this->_M_impl._M_start = __new_start;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	601a      	str	r2, [r3, #0]
		this->_M_impl._M_finish = __new_finish;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a3a      	ldr	r2, [r7, #32]
 8002dca:	605a      	str	r2, [r3, #4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8002dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	441a      	add	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	609a      	str	r2, [r3, #8]
      }
 8002de0:	bf00      	nop
 8002de2:	3734      	adds	r7, #52	; 0x34
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de8:	cccccccd 	.word	0xcccccccd
 8002dec:	0800cabc 	.word	0x0800cabc

08002df0 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(pointer __p, size_type)
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002dfc:	68b8      	ldr	r0, [r7, #8]
 8002dfe:	f008 fbe5 	bl	800b5cc <_ZdlPv>
      }
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <_ZN9__gnu_cxx13new_allocatorI10DataStructE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002e16:	68b8      	ldr	r0, [r7, #8]
 8002e18:	f008 fbd8 	bl	800b5cc <_ZdlPv>
      }
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fc06 	bl	8002640 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f9c5 	bl	80031c6 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d201      	bcs.n	8002e60 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	e000      	b.n	8002e62 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002e60:	687b      	ldr	r3, [r7, #4]
    }
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f9bc 	bl	80031fa <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <_ZNSt6vectorIcSaIcEE14_S_do_relocateEPcS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f9c6 	bl	8003232 <_ZSt12__relocate_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 8002ea6:	4603      	mov	r3, r0
      }
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f9d4 	bl	800326c <_ZNSt13move_iteratorIPcEC1ES0_>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f9d2 	bl	800328a <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002f06:	b5b0      	push	{r4, r5, r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f9cb 	bl	80032ae <_ZSt12__niter_baseIP10DataStructSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002f18:	4604      	mov	r4, r0
 8002f1a:	68b8      	ldr	r0, [r7, #8]
 8002f1c:	f000 f9c7 	bl	80032ae <_ZSt12__niter_baseIP10DataStructSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002f20:	4605      	mov	r5, r0
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f9c3 	bl	80032ae <_ZSt12__niter_baseIP10DataStructSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f000 f9cb 	bl	80032ca <_ZSt13__copy_move_aILb1EP10DataStructS1_ET1_T0_S3_S2_>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f9d9 	bl	80032f0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8002f3e:	4603      	mov	r3, r0
    }
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bdb0      	pop	{r4, r5, r7, pc}

08002f48 <_ZN9__gnu_cxx13new_allocatorI10DataStructE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f9da 	bl	8003328 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10DataStructEEvT_S4_>:
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E15difference_typeES9_S9_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002faa:	b590      	push	{r4, r7, lr}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fde2 	bl	8002b80 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKS9_>
      return std::__distance(__first, __last,
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	6839      	ldr	r1, [r7, #0]
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f9c9 	bl	8003358 <_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E15difference_typeES9_S9_St26random_access_iterator_tag>
 8002fc6:	4603      	mov	r3, r0
    }
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <_ZN9__gnu_cxxmiIP10DataStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff fa6a 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	681c      	ldr	r4, [r3, #0]
 8002fe4:	6838      	ldr	r0, [r7, #0]
 8002fe6:	f7ff fa65 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8002fea:	4603      	mov	r3, r0
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1ae3      	subs	r3, r4, r3
 8002ff0:	109b      	asrs	r3, r3, #2
 8002ff2:	4a03      	ldr	r2, [pc, #12]	; (8003000 <_ZN9__gnu_cxxmiIP10DataStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}
 8003000:	cccccccd 	.word	0xcccccccd

08003004 <_ZSt22__uninitialized_move_aIP10DataStructS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f9b3 	bl	800337e <_ZSt18make_move_iteratorIP10DataStructESt13move_iteratorIT_ES3_>
 8003018:	4604      	mov	r4, r0
 800301a:	68b8      	ldr	r0, [r7, #8]
 800301c:	f000 f9af 	bl	800337e <_ZSt18make_move_iteratorIP10DataStructESt13move_iteratorIT_ES3_>
 8003020:	4601      	mov	r1, r0
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4620      	mov	r0, r4
 8003028:	f000 f9b8 	bl	800339c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10DataStructES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800302c:	4603      	mov	r3, r0
    }
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bd90      	pop	{r4, r7, pc}

08003036 <_ZSt13move_backwardIP10DataStructS1_ET0_T_S3_S2_>:
   *  Result may not be in the range (first,last].  Use move instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003036:	b590      	push	{r4, r7, lr}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f9bb 	bl	80033be <_ZSt12__miter_baseIP10DataStructET_S2_>
 8003048:	4604      	mov	r4, r0
 800304a:	68b8      	ldr	r0, [r7, #8]
 800304c:	f000 f9b7 	bl	80033be <_ZSt12__miter_baseIP10DataStructET_S2_>
 8003050:	4603      	mov	r3, r0
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4619      	mov	r1, r3
 8003056:	4620      	mov	r0, r4
 8003058:	f000 f9bc 	bl	80033d4 <_ZSt23__copy_move_backward_a2ILb1EP10DataStructS1_ET1_T0_S3_S2_>
 800305c:	4603      	mov	r3, r0
						std::__miter_base(__last),
						__result);
    }
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bd90      	pop	{r4, r7, pc}

08003066 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 8003066:	b590      	push	{r4, r7, lr}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff ff3c 	bl	8002ef0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003078:	4604      	mov	r4, r0
 800307a:	68b8      	ldr	r0, [r7, #8]
 800307c:	f7ff ff38 	bl	8002ef0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003080:	4603      	mov	r3, r0
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4619      	mov	r1, r3
 8003086:	4620      	mov	r0, r4
 8003088:	f000 f9c7 	bl	800341a <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 800308c:	4603      	mov	r3, r0
    }
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bd90      	pop	{r4, r7, pc}

08003096 <_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8003096:	b590      	push	{r4, r7, lr}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff fd6b 	bl	8002b80 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKS9_>
 80030aa:	4622      	mov	r2, r4
 80030ac:	68f9      	ldr	r1, [r7, #12]
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9d4 	bl	800345c <_ZSt9__advanceIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEiEvRT_T0_St26random_access_iterator_tag>
    }
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd90      	pop	{r4, r7, pc}

080030bc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_S2_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f9d2 	bl	8003478 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_ET0_T_S9_S8_>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <_ZNKSt6vectorI10DataStructSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80030de:	b590      	push	{r4, r7, lr}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f9d6 	bl	800349c <_ZNKSt6vectorI10DataStructSaIS0_EE8max_sizeEv>
 80030f0:	4604      	mov	r4, r0
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7fe ff26 	bl	8001f44 <_ZNKSt6vectorI10DataStructSaIS0_EE4sizeEv>
 80030f8:	4603      	mov	r3, r0
 80030fa:	1ae2      	subs	r2, r4, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	bf34      	ite	cc
 8003102:	2301      	movcc	r3, #1
 8003104:	2300      	movcs	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <_ZNKSt6vectorI10DataStructSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f008 fa79 	bl	800b604 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7fe ff16 	bl	8001f44 <_ZNKSt6vectorI10DataStructSaIS0_EE4sizeEv>
 8003118:	4604      	mov	r4, r0
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f7fe ff12 	bl	8001f44 <_ZNKSt6vectorI10DataStructSaIS0_EE4sizeEv>
 8003120:	4603      	mov	r3, r0
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	f107 0208 	add.w	r2, r7, #8
 8003128:	f107 0310 	add.w	r3, r7, #16
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fe89 	bl	8002e46 <_ZSt3maxIjERKT_S2_S2_>
 8003134:	4603      	mov	r3, r0
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4423      	add	r3, r4
 800313a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7fe ff01 	bl	8001f44 <_ZNKSt6vectorI10DataStructSaIS0_EE4sizeEv>
 8003142:	4602      	mov	r2, r0
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	4293      	cmp	r3, r2
 8003148:	d306      	bcc.n	8003158 <_ZNKSt6vectorI10DataStructSaIS0_EE12_M_check_lenEjPKc+0x7a>
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f9a6 	bl	800349c <_ZNKSt6vectorI10DataStructSaIS0_EE8max_sizeEv>
 8003150:	4602      	mov	r2, r0
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	4293      	cmp	r3, r2
 8003156:	d904      	bls.n	8003162 <_ZNKSt6vectorI10DataStructSaIS0_EE12_M_check_lenEjPKc+0x84>
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f99f 	bl	800349c <_ZNKSt6vectorI10DataStructSaIS0_EE8max_sizeEv>
 800315e:	4603      	mov	r3, r0
 8003160:	e000      	b.n	8003164 <_ZNKSt6vectorI10DataStructSaIS0_EE12_M_check_lenEjPKc+0x86>
 8003162:	697b      	ldr	r3, [r7, #20]
      }
 8003164:	4618      	mov	r0, r3
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd90      	pop	{r4, r7, pc}

0800316c <_ZNSt12_Vector_baseI10DataStructSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <_ZNSt12_Vector_baseI10DataStructSaIS0_EE11_M_allocateEj+0x1e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6839      	ldr	r1, [r7, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f99c 	bl	80034be <_ZNSt16allocator_traitsISaI10DataStructEE8allocateERS1_j>
 8003186:	4603      	mov	r3, r0
 8003188:	e000      	b.n	800318c <_ZNSt12_Vector_baseI10DataStructSaIS0_EE11_M_allocateEj+0x20>
 800318a:	2300      	movs	r3, #0
      }
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <_ZSt34__uninitialized_move_if_noexcept_aIP10DataStructS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f99a 	bl	80034dc <_ZSt32__make_move_if_noexcept_iteratorI10DataStructSt13move_iteratorIPS0_EET0_PT_>
 80031a8:	4604      	mov	r4, r0
 80031aa:	68b8      	ldr	r0, [r7, #8]
 80031ac:	f000 f996 	bl	80034dc <_ZSt32__make_move_if_noexcept_iteratorI10DataStructSt13move_iteratorIPS0_EET0_PT_>
 80031b0:	4601      	mov	r1, r0
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4620      	mov	r0, r4
 80031b8:	f000 f8f0 	bl	800339c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10DataStructES2_S1_ET0_T_S5_S4_RSaIT1_E>
 80031bc:	4603      	mov	r3, r0
    }
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd90      	pop	{r4, r7, pc}

080031c6 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80031ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80031d2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f990 	bl	80034fa <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 80031da:	4603      	mov	r3, r0
 80031dc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80031de:	f107 0208 	add.w	r2, r7, #8
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f992 	bl	8003512 <_ZSt3minIjERKT_S2_S2_>
 80031ee:	4603      	mov	r3, r0
 80031f0:	681b      	ldr	r3, [r3, #0]
      }
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f997 	bl	800353a <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 800320c:	4602      	mov	r2, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4293      	cmp	r3, r2
 8003212:	bf8c      	ite	hi
 8003214:	2301      	movhi	r3, #1
 8003216:	2300      	movls	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800321e:	f008 f9eb 	bl	800b5f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003222:	68b8      	ldr	r0, [r7, #8]
 8003224:	f008 f9d4 	bl	800b5d0 <_Znwj>
 8003228:	4603      	mov	r3, r0
      }
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <_ZSt12__relocate_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003232:	b5b0      	push	{r4, r5, r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f986 	bl	8003552 <_ZSt12__niter_baseIPcET_S1_>
 8003246:	4604      	mov	r4, r0
 8003248:	68b8      	ldr	r0, [r7, #8]
 800324a:	f000 f982 	bl	8003552 <_ZSt12__niter_baseIPcET_S1_>
 800324e:	4605      	mov	r5, r0
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f97e 	bl	8003552 <_ZSt12__niter_baseIPcET_S1_>
 8003256:	4602      	mov	r2, r0
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4629      	mov	r1, r5
 800325c:	4620      	mov	r0, r4
 800325e:	f000 f983 	bl	8003568 <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8003262:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bdb0      	pop	{r4, r5, r7, pc}

0800326c <_ZNSt13move_iteratorIPcEC1ES0_>:
      move_iterator(iterator_type __i)
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f97d 	bl	800359e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>
 80032a4:	4603      	mov	r3, r0
    }
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_ZSt12__niter_baseIP10DataStructSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f8fb 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 80032be:	4603      	mov	r3, r0
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <_ZSt13__copy_move_aILb1EP10DataStructS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f96e 	bl	80035c0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10DataStructEEPT_PKS4_S7_S5_>
 80032e4:	4603      	mov	r3, r0
    }
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ffd7 	bl	80032ae <_ZSt12__niter_baseIP10DataStructSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003300:	4602      	mov	r2, r0
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	109b      	asrs	r3, r3, #2
 8003308:	4a06      	ldr	r2, [pc, #24]	; (8003324 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_+0x34>)
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	461a      	mov	r2, r3
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff f907 	bl	8002528 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEplEi>
 800331a:	4603      	mov	r3, r0
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	cccccccd 	.word	0xcccccccd

08003328 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f96d 	bl	8003614 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800333a:	4604      	mov	r4, r0
 800333c:	68b8      	ldr	r0, [r7, #8]
 800333e:	f000 f969 	bl	8003614 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 8003342:	4603      	mov	r3, r0
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	4619      	mov	r1, r3
 8003348:	4620      	mov	r0, r4
 800334a:	f000 f96e 	bl	800362a <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 800334e:	4603      	mov	r3, r0
    }
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	bd90      	pop	{r4, r7, pc}

08003358 <_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEENSt15iterator_traitsIT_E15difference_typeES9_S9_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003364:	f107 020c 	add.w	r2, r7, #12
 8003368:	f107 0308 	add.w	r3, r7, #8
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fe2e 	bl	8002fd0 <_ZN9__gnu_cxxmiIP10DataStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8003374:	4603      	mov	r3, r0
    }
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <_ZSt18make_move_iteratorIP10DataStructESt13move_iteratorIT_ES3_>:
    make_move_iterator(_Iterator __i)
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(__i); }
 8003386:	f107 030c 	add.w	r3, r7, #12
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 f96f 	bl	8003670 <_ZNSt13move_iteratorIP10DataStructEC1ES1_>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10DataStructES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f96d 	bl	800368e <_ZSt18uninitialized_copyISt13move_iteratorIP10DataStructES2_ET0_T_S5_S4_>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <_ZSt12__miter_baseIP10DataStructET_S2_>:
    __miter_base(_Iterator __it)
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <_ZSt23__copy_move_backward_a2ILb1EP10DataStructS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80033d4:	b5b0      	push	{r4, r5, r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f966 	bl	80036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>
 80033e6:	4604      	mov	r4, r0
 80033e8:	68b8      	ldr	r0, [r7, #8]
 80033ea:	f000 f962 	bl	80036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>
 80033ee:	4605      	mov	r5, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f95d 	bl	80036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	4629      	mov	r1, r5
 80033fe:	4620      	mov	r0, r4
 8003400:	f000 f962 	bl	80036c8 <_ZSt22__copy_move_backward_aILb1EP10DataStructS1_ET1_T0_S3_S2_>
 8003404:	4602      	mov	r2, r0
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f96e 	bl	80036ec <_ZSt12__niter_wrapIP10DataStructET_RKS2_S2_>
 8003410:	4603      	mov	r3, r0
    }
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bdb0      	pop	{r4, r5, r7, pc}

0800341a <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800341a:	b5b0      	push	{r4, r5, r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff ff41 	bl	80032ae <_ZSt12__niter_baseIP10DataStructSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800342c:	4604      	mov	r4, r0
 800342e:	68b8      	ldr	r0, [r7, #8]
 8003430:	f7ff ff3d 	bl	80032ae <_ZSt12__niter_baseIP10DataStructSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003434:	4605      	mov	r5, r0
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ff39 	bl	80032ae <_ZSt12__niter_baseIP10DataStructSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	4629      	mov	r1, r5
 8003442:	4620      	mov	r0, r4
 8003444:	f000 f95e 	bl	8003704 <_ZSt13__copy_move_aILb0EP10DataStructS1_ET1_T0_S3_S2_>
 8003448:	4603      	mov	r3, r0
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ff4f 	bl	80032f0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8003452:	4603      	mov	r3, r0
    }
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bdb0      	pop	{r4, r5, r7, pc}

0800345c <_ZSt9__advanceIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f95c 	bl	8003728 <_ZN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEpLEi>
    }
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003484:	2301      	movs	r3, #1
 8003486:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f961 	bl	8003754 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS4_SaIS4_EEEES5_EET0_T_SB_SA_>
 8003492:	4603      	mov	r3, r0
    }
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <_ZNKSt6vectorI10DataStructSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f980 	bl	80037ac <_ZNKSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 80034ac:	4603      	mov	r3, r0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f960 	bl	8003774 <_ZNSt6vectorI10DataStructSaIS0_EE11_S_max_sizeERKS1_>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <_ZNSt16allocator_traitsISaI10DataStructEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80034c8:	2200      	movs	r2, #0
 80034ca:	6839      	ldr	r1, [r7, #0]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f978 	bl	80037c2 <_ZN9__gnu_cxx13new_allocatorI10DataStructE8allocateEjPKv>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZSt32__make_move_if_noexcept_iteratorI10DataStructSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f8c0 	bl	8003670 <_ZNSt13move_iteratorIP10DataStructEC1ES1_>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f819 	bl	800353a <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 8003508:	4603      	mov	r3, r0
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d201      	bcs.n	800352c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	e000      	b.n	800352e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800352c:	687b      	ldr	r3, [r7, #4]
    }
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003542:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
    { return __it; }
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	dd05      	ble.n	8003590 <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	461a      	mov	r2, r3
 8003588:	68f9      	ldr	r1, [r7, #12]
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f009 f8fa 	bl	800c784 <memmove>
      return __result + __count;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4413      	add	r3, r2
    }
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f928 	bl	8003804 <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10DataStructEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	109b      	asrs	r3, r3, #2
 80035d4:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10DataStructEEPT_PKS4_S7_S5_+0x50>)
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10DataStructEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	461a      	mov	r2, r3
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f009 f8c7 	bl	800c784 <memmove>
	  return __result + _Num;
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	461a      	mov	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4413      	add	r3, r2
	}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	cccccccd 	.word	0xcccccccd

08003614 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800362a:	b5b0      	push	{r4, r5, r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f8fc 	bl	8003834 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800363c:	4604      	mov	r4, r0
 800363e:	68b8      	ldr	r0, [r7, #8]
 8003640:	f000 f8f8 	bl	8003834 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003644:	4605      	mov	r5, r0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff82 	bl	8003552 <_ZSt12__niter_baseIPcET_S1_>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	4629      	mov	r1, r5
 8003654:	4620      	mov	r0, r4
 8003656:	f000 f8fb 	bl	8003850 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 800365a:	4602      	mov	r2, r0
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f907 	bl	8003874 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8003666:	4603      	mov	r3, r0
    }
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bdb0      	pop	{r4, r5, r7, pc}

08003670 <_ZNSt13move_iteratorIP10DataStructEC1ES1_>:
      move_iterator(iterator_type __i)
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_ZSt18uninitialized_copyISt13move_iteratorIP10DataStructES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f8f2 	bl	800388c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP10DataStructES4_EET0_T_S7_S6_>
 80036a8:	4603      	mov	r3, r0
    }
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>:
    __niter_base(_Iterator __it)
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <_ZSt22__copy_move_backward_aILb1EP10DataStructS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
				       _Category>::__copy_move_b(__first,
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f8e5 	bl	80038ac <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI10DataStructEEPT_PKS4_S7_S5_>
 80036e2:	4603      	mov	r3, r0
    }
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <_ZSt12__niter_wrapIP10DataStructET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
    { return __res; }
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <_ZSt13__copy_move_aILb0EP10DataStructS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8003710:	2301      	movs	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f8f7 	bl	800390c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI10DataStructEEPT_PKS4_S7_S5_>
 800371e:	4603      	mov	r3, r0
    }
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <_ZN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEEpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
      { _M_current += __n; return *this; }
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	18ca      	adds	r2, r1, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS4_SaIS4_EEEES5_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f8fb 	bl	8003960 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_ET0_T_S9_S8_>
 800376a:	4603      	mov	r3, r0
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <_ZNSt6vectorI10DataStructSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <_ZNSt6vectorI10DataStructSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800377e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f905 	bl	8003990 <_ZNSt16allocator_traitsISaI10DataStructEE8max_sizeERKS1_>
 8003786:	4603      	mov	r3, r0
 8003788:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800378a:	f107 0208 	add.w	r2, r7, #8
 800378e:	f107 030c 	add.w	r3, r7, #12
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff febc 	bl	8003512 <_ZSt3minIjERKT_S2_S2_>
 800379a:	4603      	mov	r3, r0
 800379c:	681b      	ldr	r3, [r3, #0]
      }
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	06666666 	.word	0x06666666

080037ac <_ZNKSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <_ZN9__gnu_cxx13new_allocatorI10DataStructE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f8ea 	bl	80039a8 <_ZNK9__gnu_cxx13new_allocatorI10DataStructE8max_sizeEv>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4293      	cmp	r3, r2
 80037da:	bf8c      	ite	hi
 80037dc:	2301      	movhi	r3, #1
 80037de:	2300      	movls	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <_ZN9__gnu_cxx13new_allocatorI10DataStructE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80037e6:	f007 ff07 	bl	800b5f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f007 feeb 	bl	800b5d0 <_Znwj>
 80037fa:	4603      	mov	r3, r0
      }
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f8d7 	bl	80039c4 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003816:	4604      	mov	r4, r0
 8003818:	68b8      	ldr	r0, [r7, #8]
 800381a:	f000 f8d3 	bl	80039c4 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800381e:	4603      	mov	r3, r0
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4619      	mov	r1, r3
 8003824:	4620      	mov	r0, r4
 8003826:	f000 f8de 	bl	80039e6 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>
 800382a:	4603      	mov	r3, r0
    }
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bd90      	pop	{r4, r7, pc}

08003834 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f8f4 	bl	8003a2c <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 8003844:	4603      	mov	r3, r0
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800385c:	2301      	movs	r3, #1
 800385e:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f8ec 	bl	8003a42 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800386a:	4603      	mov	r3, r0
    }
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP10DataStructES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f8ea 	bl	8003a76 <_ZSt4copyISt13move_iteratorIP10DataStructES2_ET0_T_S5_S4_>
 80038a2:	4603      	mov	r3, r0
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI10DataStructEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	109b      	asrs	r3, r3, #2
 80038c0:	4a11      	ldr	r2, [pc, #68]	; (8003908 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI10DataStructEEPT_PKS4_S7_S5_+0x5c>)
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d010      	beq.n	80038f0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI10DataStructEEPT_PKS4_S7_S5_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	425b      	negs	r3, r3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	18d0      	adds	r0, r2, r3
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	461a      	mov	r2, r3
 80038ea:	68f9      	ldr	r1, [r7, #12]
 80038ec:	f008 ff4a 	bl	800c784 <memmove>
	  return __result - _Num;
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	425b      	negs	r3, r3
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4413      	add	r3, r2
	}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	cccccccd 	.word	0xcccccccd

0800390c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI10DataStructEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	109b      	asrs	r3, r3, #2
 8003920:	4a0e      	ldr	r2, [pc, #56]	; (800395c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI10DataStructEEPT_PKS4_S7_S5_+0x50>)
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI10DataStructEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	461a      	mov	r2, r3
 800393a:	68f9      	ldr	r1, [r7, #12]
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f008 ff21 	bl	800c784 <memmove>
	  return __result + _Num;
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	461a      	mov	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4413      	add	r3, r2
	}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	cccccccd 	.word	0xcccccccd

08003960 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff fabf 	bl	8002ef0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003972:	4604      	mov	r4, r0
 8003974:	68b8      	ldr	r0, [r7, #8]
 8003976:	f7ff fabb 	bl	8002ef0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEEET_S8_>
 800397a:	4603      	mov	r3, r0
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4619      	mov	r1, r3
 8003980:	4620      	mov	r0, r4
 8003982:	f000 f890 	bl	8003aa6 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_ET1_T0_S9_S8_>
 8003986:	4603      	mov	r3, r0
    }
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}

08003990 <_ZNSt16allocator_traitsISaI10DataStructEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f805 	bl	80039a8 <_ZNK9__gnu_cxx13new_allocatorI10DataStructE8max_sizeEv>
 800399e:	4603      	mov	r3, r0
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <_ZNK9__gnu_cxx13new_allocatorI10DataStructE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <_ZNK9__gnu_cxx13new_allocatorI10DataStructE8max_sizeEv+0x18>)
      }
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	06666666 	.word	0x06666666

080039c4 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f88c 	bl	8003aec <_ZNKSt13move_iteratorIPcE4baseEv>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f894 	bl	8003b04 <_ZSt12__miter_baseIPcET_S1_>
 80039dc:	4603      	mov	r3, r0
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80039e6:	b5b0      	push	{r4, r5, r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7ff fdad 	bl	8003552 <_ZSt12__niter_baseIPcET_S1_>
 80039f8:	4604      	mov	r4, r0
 80039fa:	68b8      	ldr	r0, [r7, #8]
 80039fc:	f7ff fda9 	bl	8003552 <_ZSt12__niter_baseIPcET_S1_>
 8003a00:	4605      	mov	r5, r0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fda4 	bl	8003552 <_ZSt12__niter_baseIPcET_S1_>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4629      	mov	r1, r5
 8003a10:	4620      	mov	r0, r4
 8003a12:	f000 f882 	bl	8003b1a <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>
 8003a16:	4602      	mov	r2, r0
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff29 	bl	8003874 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8003a22:	4603      	mov	r3, r0
    }
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bdb0      	pop	{r4, r5, r7, pc}

08003a2c <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68f9      	ldr	r1, [r7, #12]
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f008 fe8e 	bl	800c784 <memmove>
	  return __result + _Num;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4413      	add	r3, r2
	}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <_ZSt4copyISt13move_iteratorIP10DataStructES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8003a76:	b590      	push	{r4, r7, lr}
 8003a78:	b085      	sub	sp, #20
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f85b 	bl	8003b3e <_ZSt12__miter_baseIP10DataStructEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	68b8      	ldr	r0, [r7, #8]
 8003a8c:	f000 f857 	bl	8003b3e <_ZSt12__miter_baseIP10DataStructEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003a90:	4603      	mov	r3, r0
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4619      	mov	r1, r3
 8003a96:	4620      	mov	r0, r4
 8003a98:	f000 f862 	bl	8003b60 <_ZSt14__copy_move_a2ILb1EP10DataStructS1_ET1_T0_S3_S2_>
 8003a9c:	4603      	mov	r3, r0
    }
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd90      	pop	{r4, r7, pc}

08003aa6 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS2_SaIS2_EEEES3_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003aa6:	b5b0      	push	{r4, r5, r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff fbfb 	bl	80032ae <_ZSt12__niter_baseIP10DataStructSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	68b8      	ldr	r0, [r7, #8]
 8003abc:	f7ff fbf7 	bl	80032ae <_ZSt12__niter_baseIP10DataStructSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fdf4 	bl	80036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	4629      	mov	r1, r5
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7ff fe17 	bl	8003704 <_ZSt13__copy_move_aILb0EP10DataStructS1_ET1_T0_S3_S2_>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fe05 	bl	80036ec <_ZSt12__niter_wrapIP10DataStructET_RKS2_S2_>
 8003ae2:	4603      	mov	r3, r0
    }
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bdb0      	pop	{r4, r5, r7, pc}

08003aec <_ZNKSt13move_iteratorIPcE4baseEv>:
      base() const
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <_ZSt12__miter_baseIPcET_S1_>:
    __miter_base(_Iterator __it)
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f839 	bl	8003ba6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 8003b34:	4603      	mov	r3, r0
    }
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <_ZSt12__miter_baseIP10DataStructEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f846 	bl	8003bda <_ZNKSt13move_iteratorIP10DataStructE4baseEv>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fc34 	bl	80033be <_ZSt12__miter_baseIP10DataStructET_S2_>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_ZSt14__copy_move_a2ILb1EP10DataStructS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003b60:	b5b0      	push	{r4, r5, r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7ff fda0 	bl	80036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>
 8003b72:	4604      	mov	r4, r0
 8003b74:	68b8      	ldr	r0, [r7, #8]
 8003b76:	f7ff fd9c 	bl	80036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fd97 	bl	80036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f7ff fb9d 	bl	80032ca <_ZSt13__copy_move_aILb1EP10DataStructS1_ET1_T0_S3_S2_>
 8003b90:	4602      	mov	r2, r0
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fda8 	bl	80036ec <_ZSt12__niter_wrapIP10DataStructET_RKS2_S2_>
 8003b9c:	4603      	mov	r3, r0
    }
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bdb0      	pop	{r4, r5, r7, pc}

08003ba6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f008 fddc 	bl	800c784 <memmove>
	  return __result + _Num;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
	}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_ZNKSt13move_iteratorIP10DataStructE4baseEv>:
      base() const
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d10a      	bne.n	8003c1a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d105      	bne.n	8003c1a <_Z41__static_initialization_and_destruction_0ii+0x26>
std::vector<char> data;
 8003c0e:	480c      	ldr	r0, [pc, #48]	; (8003c40 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003c10:	f7fd fa5b 	bl	80010ca <_ZNSt6vectorIcSaIcEEC1Ev>
std::vector<DataStruct> parsedData;
 8003c14:	480b      	ldr	r0, [pc, #44]	; (8003c44 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003c16:	f7fd fa7e 	bl	8001116 <_ZNSt6vectorI10DataStructSaIS0_EEC1Ev>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d105      	bne.n	8003c36 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8003c2a:	4806      	ldr	r0, [pc, #24]	; (8003c44 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003c2c:	f7fe fa69 	bl	8002102 <_ZNSt6vectorI10DataStructSaIS0_EED1Ev>
std::vector<char> data;
 8003c30:	4803      	ldr	r0, [pc, #12]	; (8003c40 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003c32:	f7fe fa4b 	bl	80020cc <_ZNSt6vectorIcSaIcEED1Ev>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000047c 	.word	0x2000047c
 8003c44:	20000488 	.word	0x20000488

08003c48 <_GLOBAL__sub_I_hadc1>:
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7ff ffcf 	bl	8003bf4 <_Z41__static_initialization_and_destruction_0ii>
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <_GLOBAL__sub_D_hadc1>:
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c60:	2000      	movs	r0, #0
 8003c62:	f7ff ffc7 	bl	8003bf4 <_Z41__static_initialization_and_destruction_0ii>
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_Z14stepDirectMovem>:
		uint32_t delayTime = (double)( MIN_DELAY / SPEED ) + (double)( ( (MAX_DELAY - MIN_DELAY ) * remainStep) / (ACC_DEC_RANGE * SPEED));
		return delayTime;
	}
}

void stepDirectMove(uint32_t step) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	uint32_t movingStep = step;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	617b      	str	r3, [r7, #20]
	// Set direction
	HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, GPIO_PIN_RESET);
 8003c74:	2200      	movs	r2, #0
 8003c76:	2101      	movs	r1, #1
 8003c78:	4829      	ldr	r0, [pc, #164]	; (8003d20 <_Z14stepDirectMovem+0xb8>)
 8003c7a:	f001 fec1 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_RESET);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2104      	movs	r1, #4
 8003c82:	4827      	ldr	r0, [pc, #156]	; (8003d20 <_Z14stepDirectMovem+0xb8>)
 8003c84:	f001 febc 	bl	8005a00 <HAL_GPIO_WritePin>

	double delaytime  = (double)( 1 / SPEED ) ;
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <_Z14stepDirectMovem+0xbc>)
 8003c8e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while(step--) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1e5a      	subs	r2, r3, #1
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d024      	beq.n	8003cf0 <_Z14stepDirectMovem+0x88>
		HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_SET);
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	2102      	movs	r1, #2
 8003caa:	481d      	ldr	r0, [pc, #116]	; (8003d20 <_Z14stepDirectMovem+0xb8>)
 8003cac:	f001 fea8 	bl	8005a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_SET);
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2108      	movs	r1, #8
 8003cb4:	481a      	ldr	r0, [pc, #104]	; (8003d20 <_Z14stepDirectMovem+0xb8>)
 8003cb6:	f001 fea3 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay( delaytime );
 8003cba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cbe:	f7fc ff23 	bl	8000b08 <__aeabi_d2uiz>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f004 ffa8 	bl	8008c1a <osDelay>
		HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4814      	ldr	r0, [pc, #80]	; (8003d20 <_Z14stepDirectMovem+0xb8>)
 8003cd0:	f001 fe96 	bl	8005a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2108      	movs	r1, #8
 8003cd8:	4811      	ldr	r0, [pc, #68]	; (8003d20 <_Z14stepDirectMovem+0xb8>)
 8003cda:	f001 fe91 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay( delaytime );
 8003cde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ce2:	f7fc ff11 	bl	8000b08 <__aeabi_d2uiz>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f004 ff96 	bl	8008c1a <osDelay>
	while(step--) {
 8003cee:	e7d0      	b.n	8003c92 <_Z14stepDirectMovem+0x2a>
//		osDelay( accelerateDelayCalculation(step, movingStep) );
	}

	// Reset
	HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, GPIO_PIN_RESET);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	480a      	ldr	r0, [pc, #40]	; (8003d20 <_Z14stepDirectMovem+0xb8>)
 8003cf6:	f001 fe83 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_RESET);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2104      	movs	r1, #4
 8003cfe:	4808      	ldr	r0, [pc, #32]	; (8003d20 <_Z14stepDirectMovem+0xb8>)
 8003d00:	f001 fe7e 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
 8003d04:	2200      	movs	r2, #0
 8003d06:	2102      	movs	r1, #2
 8003d08:	4805      	ldr	r0, [pc, #20]	; (8003d20 <_Z14stepDirectMovem+0xb8>)
 8003d0a:	f001 fe79 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2108      	movs	r1, #8
 8003d12:	4803      	ldr	r0, [pc, #12]	; (8003d20 <_Z14stepDirectMovem+0xb8>)
 8003d14:	f001 fe74 	bl	8005a00 <HAL_GPIO_WritePin>
}
 8003d18:	bf00      	nop
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40020800 	.word	0x40020800
 8003d24:	40040000 	.word	0x40040000

08003d28 <_Z8turnLeftv>:
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
}

void turnLeft() {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
	uint32_t step = TURN_90_STEP;
 8003d2e:	2362      	movs	r3, #98	; 0x62
 8003d30:	60fb      	str	r3, [r7, #12]
	// Set direction
	HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, GPIO_PIN_RESET);
 8003d32:	2200      	movs	r2, #0
 8003d34:	2101      	movs	r1, #1
 8003d36:	482a      	ldr	r0, [pc, #168]	; (8003de0 <_Z8turnLeftv+0xb8>)
 8003d38:	f001 fe62 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_SET);
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	2104      	movs	r1, #4
 8003d40:	4827      	ldr	r0, [pc, #156]	; (8003de0 <_Z8turnLeftv+0xb8>)
 8003d42:	f001 fe5d 	bl	8005a00 <HAL_GPIO_WritePin>

	double delaytime  = (double)( 1 / SPEED ) ;
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <_Z8turnLeftv+0xbc>)
 8003d4c:	e9c7 2300 	strd	r2, r3, [r7]

	while(step--) {
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e5a      	subs	r2, r3, #1
 8003d54:	60fa      	str	r2, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d024      	beq.n	8003dae <_Z8turnLeftv+0x86>
		HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_SET);
 8003d64:	2201      	movs	r2, #1
 8003d66:	2102      	movs	r1, #2
 8003d68:	481d      	ldr	r0, [pc, #116]	; (8003de0 <_Z8turnLeftv+0xb8>)
 8003d6a:	f001 fe49 	bl	8005a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_SET);
 8003d6e:	2201      	movs	r2, #1
 8003d70:	2108      	movs	r1, #8
 8003d72:	481b      	ldr	r0, [pc, #108]	; (8003de0 <_Z8turnLeftv+0xb8>)
 8003d74:	f001 fe44 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay( delaytime );
 8003d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d7c:	f7fc fec4 	bl	8000b08 <__aeabi_d2uiz>
 8003d80:	4603      	mov	r3, r0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f004 ff49 	bl	8008c1a <osDelay>
		HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4814      	ldr	r0, [pc, #80]	; (8003de0 <_Z8turnLeftv+0xb8>)
 8003d8e:	f001 fe37 	bl	8005a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2108      	movs	r1, #8
 8003d96:	4812      	ldr	r0, [pc, #72]	; (8003de0 <_Z8turnLeftv+0xb8>)
 8003d98:	f001 fe32 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay( delaytime );
 8003d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003da0:	f7fc feb2 	bl	8000b08 <__aeabi_d2uiz>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f004 ff37 	bl	8008c1a <osDelay>
	while(step--) {
 8003dac:	e7d0      	b.n	8003d50 <_Z8turnLeftv+0x28>
//		osDelay( accelerateDelayCalculation(step, TURN_90_STEP) );
	}

	// Reset
	HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, GPIO_PIN_RESET);
 8003dae:	2200      	movs	r2, #0
 8003db0:	2101      	movs	r1, #1
 8003db2:	480b      	ldr	r0, [pc, #44]	; (8003de0 <_Z8turnLeftv+0xb8>)
 8003db4:	f001 fe24 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_RESET);
 8003db8:	2200      	movs	r2, #0
 8003dba:	2104      	movs	r1, #4
 8003dbc:	4808      	ldr	r0, [pc, #32]	; (8003de0 <_Z8turnLeftv+0xb8>)
 8003dbe:	f001 fe1f 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	4806      	ldr	r0, [pc, #24]	; (8003de0 <_Z8turnLeftv+0xb8>)
 8003dc8:	f001 fe1a 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2108      	movs	r1, #8
 8003dd0:	4803      	ldr	r0, [pc, #12]	; (8003de0 <_Z8turnLeftv+0xb8>)
 8003dd2:	f001 fe15 	bl	8005a00 <HAL_GPIO_WritePin>
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40020800 	.word	0x40020800
 8003de4:	40040000 	.word	0x40040000

08003de8 <_Z9turnRightv>:

void turnRight() {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
	uint32_t step = TURN_90_STEP;
 8003dee:	2362      	movs	r3, #98	; 0x62
 8003df0:	60fb      	str	r3, [r7, #12]
	// Set direction
	HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, GPIO_PIN_SET);
 8003df2:	2201      	movs	r2, #1
 8003df4:	2101      	movs	r1, #1
 8003df6:	482a      	ldr	r0, [pc, #168]	; (8003ea0 <_Z9turnRightv+0xb8>)
 8003df8:	f001 fe02 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_RESET);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2104      	movs	r1, #4
 8003e00:	4827      	ldr	r0, [pc, #156]	; (8003ea0 <_Z9turnRightv+0xb8>)
 8003e02:	f001 fdfd 	bl	8005a00 <HAL_GPIO_WritePin>

	double delaytime  = (double)( 1 / SPEED ) ;
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <_Z9turnRightv+0xbc>)
 8003e0c:	e9c7 2300 	strd	r2, r3, [r7]

	while(step--) {
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1e5a      	subs	r2, r3, #1
 8003e14:	60fa      	str	r2, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf14      	ite	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	2300      	moveq	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d024      	beq.n	8003e6e <_Z9turnRightv+0x86>
		HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_SET);
 8003e24:	2201      	movs	r2, #1
 8003e26:	2102      	movs	r1, #2
 8003e28:	481d      	ldr	r0, [pc, #116]	; (8003ea0 <_Z9turnRightv+0xb8>)
 8003e2a:	f001 fde9 	bl	8005a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_SET);
 8003e2e:	2201      	movs	r2, #1
 8003e30:	2108      	movs	r1, #8
 8003e32:	481b      	ldr	r0, [pc, #108]	; (8003ea0 <_Z9turnRightv+0xb8>)
 8003e34:	f001 fde4 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay( delaytime );
 8003e38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e3c:	f7fc fe64 	bl	8000b08 <__aeabi_d2uiz>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f004 fee9 	bl	8008c1a <osDelay>
		HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	4814      	ldr	r0, [pc, #80]	; (8003ea0 <_Z9turnRightv+0xb8>)
 8003e4e:	f001 fdd7 	bl	8005a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
 8003e52:	2200      	movs	r2, #0
 8003e54:	2108      	movs	r1, #8
 8003e56:	4812      	ldr	r0, [pc, #72]	; (8003ea0 <_Z9turnRightv+0xb8>)
 8003e58:	f001 fdd2 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay( delaytime );
 8003e5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e60:	f7fc fe52 	bl	8000b08 <__aeabi_d2uiz>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f004 fed7 	bl	8008c1a <osDelay>
	while(step--) {
 8003e6c:	e7d0      	b.n	8003e10 <_Z9turnRightv+0x28>
//		osDelay( accelerateDelayCalculation(step, TURN_90_STEP) );
	}

	// Reset
	HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, GPIO_PIN_RESET);
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2101      	movs	r1, #1
 8003e72:	480b      	ldr	r0, [pc, #44]	; (8003ea0 <_Z9turnRightv+0xb8>)
 8003e74:	f001 fdc4 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_RESET);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2104      	movs	r1, #4
 8003e7c:	4808      	ldr	r0, [pc, #32]	; (8003ea0 <_Z9turnRightv+0xb8>)
 8003e7e:	f001 fdbf 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
 8003e82:	2200      	movs	r2, #0
 8003e84:	2102      	movs	r1, #2
 8003e86:	4806      	ldr	r0, [pc, #24]	; (8003ea0 <_Z9turnRightv+0xb8>)
 8003e88:	f001 fdba 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2108      	movs	r1, #8
 8003e90:	4803      	ldr	r0, [pc, #12]	; (8003ea0 <_Z9turnRightv+0xb8>)
 8003e92:	f001 fdb5 	bl	8005a00 <HAL_GPIO_WritePin>
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40020800 	.word	0x40020800
 8003ea4:	40040000 	.word	0x40040000

08003ea8 <_Z8turnBackv>:

void turnBack() {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
	uint32_t step = TURN_180_STEP;
 8003eae:	23c2      	movs	r3, #194	; 0xc2
 8003eb0:	60fb      	str	r3, [r7, #12]
	// Set direction
	HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, GPIO_PIN_SET);
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	482a      	ldr	r0, [pc, #168]	; (8003f60 <_Z8turnBackv+0xb8>)
 8003eb8:	f001 fda2 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_RESET);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2104      	movs	r1, #4
 8003ec0:	4827      	ldr	r0, [pc, #156]	; (8003f60 <_Z8turnBackv+0xb8>)
 8003ec2:	f001 fd9d 	bl	8005a00 <HAL_GPIO_WritePin>

	double delaytime  = (double)( 1 / SPEED ) ;
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <_Z8turnBackv+0xbc>)
 8003ecc:	e9c7 2300 	strd	r2, r3, [r7]

	while(step--) {
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	1e5a      	subs	r2, r3, #1
 8003ed4:	60fa      	str	r2, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bf14      	ite	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	2300      	moveq	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d024      	beq.n	8003f2e <_Z8turnBackv+0x86>
		HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_SET);
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	481d      	ldr	r0, [pc, #116]	; (8003f60 <_Z8turnBackv+0xb8>)
 8003eea:	f001 fd89 	bl	8005a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_SET);
 8003eee:	2201      	movs	r2, #1
 8003ef0:	2108      	movs	r1, #8
 8003ef2:	481b      	ldr	r0, [pc, #108]	; (8003f60 <_Z8turnBackv+0xb8>)
 8003ef4:	f001 fd84 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay( delaytime );
 8003ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003efc:	f7fc fe04 	bl	8000b08 <__aeabi_d2uiz>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f004 fe89 	bl	8008c1a <osDelay>
		HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4814      	ldr	r0, [pc, #80]	; (8003f60 <_Z8turnBackv+0xb8>)
 8003f0e:	f001 fd77 	bl	8005a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
 8003f12:	2200      	movs	r2, #0
 8003f14:	2108      	movs	r1, #8
 8003f16:	4812      	ldr	r0, [pc, #72]	; (8003f60 <_Z8turnBackv+0xb8>)
 8003f18:	f001 fd72 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay( delaytime );
 8003f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f20:	f7fc fdf2 	bl	8000b08 <__aeabi_d2uiz>
 8003f24:	4603      	mov	r3, r0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f004 fe77 	bl	8008c1a <osDelay>
	while(step--) {
 8003f2c:	e7d0      	b.n	8003ed0 <_Z8turnBackv+0x28>
//		osDelay( accelerateDelayCalculation(step, TURN_180_STEP) );
	}

	// Reset
	HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, GPIO_PIN_RESET);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2101      	movs	r1, #1
 8003f32:	480b      	ldr	r0, [pc, #44]	; (8003f60 <_Z8turnBackv+0xb8>)
 8003f34:	f001 fd64 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_RESET);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2104      	movs	r1, #4
 8003f3c:	4808      	ldr	r0, [pc, #32]	; (8003f60 <_Z8turnBackv+0xb8>)
 8003f3e:	f001 fd5f 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
 8003f42:	2200      	movs	r2, #0
 8003f44:	2102      	movs	r1, #2
 8003f46:	4806      	ldr	r0, [pc, #24]	; (8003f60 <_Z8turnBackv+0xb8>)
 8003f48:	f001 fd5a 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2108      	movs	r1, #8
 8003f50:	4803      	ldr	r0, [pc, #12]	; (8003f60 <_Z8turnBackv+0xb8>)
 8003f52:	f001 fd55 	bl	8005a00 <HAL_GPIO_WritePin>
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40020800 	.word	0x40020800
 8003f64:	40040000 	.word	0x40040000

08003f68 <_Z8moveBackv>:

void moveBack() {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
	uint32_t step = DIRECT_MOVE_STEP;
 8003f6e:	2364      	movs	r3, #100	; 0x64
 8003f70:	60fb      	str	r3, [r7, #12]
	// Set direction
	HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, GPIO_PIN_RESET);
 8003f72:	2200      	movs	r2, #0
 8003f74:	2101      	movs	r1, #1
 8003f76:	482a      	ldr	r0, [pc, #168]	; (8004020 <_Z8moveBackv+0xb8>)
 8003f78:	f001 fd42 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_RESET);
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2104      	movs	r1, #4
 8003f80:	4827      	ldr	r0, [pc, #156]	; (8004020 <_Z8moveBackv+0xb8>)
 8003f82:	f001 fd3d 	bl	8005a00 <HAL_GPIO_WritePin>

	double delaytime  = (double)( 1 / SPEED ) ;
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	4b26      	ldr	r3, [pc, #152]	; (8004024 <_Z8moveBackv+0xbc>)
 8003f8c:	e9c7 2300 	strd	r2, r3, [r7]

	while(step--) {
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	60fa      	str	r2, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d024      	beq.n	8003fee <_Z8moveBackv+0x86>
		HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_SET);
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	481d      	ldr	r0, [pc, #116]	; (8004020 <_Z8moveBackv+0xb8>)
 8003faa:	f001 fd29 	bl	8005a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_SET);
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2108      	movs	r1, #8
 8003fb2:	481b      	ldr	r0, [pc, #108]	; (8004020 <_Z8moveBackv+0xb8>)
 8003fb4:	f001 fd24 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay( delaytime );
 8003fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fbc:	f7fc fda4 	bl	8000b08 <__aeabi_d2uiz>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f004 fe29 	bl	8008c1a <osDelay>
		HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2102      	movs	r1, #2
 8003fcc:	4814      	ldr	r0, [pc, #80]	; (8004020 <_Z8moveBackv+0xb8>)
 8003fce:	f001 fd17 	bl	8005a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2108      	movs	r1, #8
 8003fd6:	4812      	ldr	r0, [pc, #72]	; (8004020 <_Z8moveBackv+0xb8>)
 8003fd8:	f001 fd12 	bl	8005a00 <HAL_GPIO_WritePin>
		osDelay( delaytime );
 8003fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fe0:	f7fc fd92 	bl	8000b08 <__aeabi_d2uiz>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f004 fe17 	bl	8008c1a <osDelay>
	while(step--) {
 8003fec:	e7d0      	b.n	8003f90 <_Z8moveBackv+0x28>
//		osDelay( accelerateDelayCalculation(step, DIRECT_MOVE_STEP) );
	}

	// Reset
	HAL_GPIO_WritePin(motor_left_dir_GPIO_Port, motor_left_dir_Pin, GPIO_PIN_RESET);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	480b      	ldr	r0, [pc, #44]	; (8004020 <_Z8moveBackv+0xb8>)
 8003ff4:	f001 fd04 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_dir_GPIO_Port, motor_right_dir_Pin, GPIO_PIN_RESET);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2104      	movs	r1, #4
 8003ffc:	4808      	ldr	r0, [pc, #32]	; (8004020 <_Z8moveBackv+0xb8>)
 8003ffe:	f001 fcff 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_left_step_GPIO_Port, motor_left_step_Pin, GPIO_PIN_RESET);
 8004002:	2200      	movs	r2, #0
 8004004:	2102      	movs	r1, #2
 8004006:	4806      	ldr	r0, [pc, #24]	; (8004020 <_Z8moveBackv+0xb8>)
 8004008:	f001 fcfa 	bl	8005a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor_right_step_GPIO_Port, motor_right_step_Pin, GPIO_PIN_RESET);
 800400c:	2200      	movs	r2, #0
 800400e:	2108      	movs	r1, #8
 8004010:	4803      	ldr	r0, [pc, #12]	; (8004020 <_Z8moveBackv+0xb8>)
 8004012:	f001 fcf5 	bl	8005a00 <HAL_GPIO_WritePin>
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40020800 	.word	0x40020800
 8004024:	40040000 	.word	0x40040000

08004028 <_Z9parseDataSt6vectorIcSaIcEE>:
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b08d      	sub	sp, #52	; 0x34
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd f86f 	bl	8001116 <_ZNSt6vectorI10DataStructSaIS0_EEC1Ev>
 8004038:	f107 031c 	add.w	r3, r7, #28
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe f807 	bl	8002052 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8004044:	f107 031c 	add.w	r3, r7, #28
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fe32 	bl	8004cb2 <_Z14checkDataFrameSt6vectorIcSaIcEE>
 800404e:	4603      	mov	r3, r0
 8004050:	f083 0301 	eor.w	r3, r3, #1
 8004054:	b2dc      	uxtb	r4, r3
 8004056:	f107 031c 	add.w	r3, r7, #28
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe f836 	bl	80020cc <_ZNSt6vectorIcSaIcEED1Ev>
 8004060:	2c00      	cmp	r4, #0
 8004062:	d16b      	bne.n	800413c <_Z9parseDataSt6vectorIcSaIcEE+0x114>
 8004064:	2310      	movs	r3, #16
 8004066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004068:	6838      	ldr	r0, [r7, #0]
 800406a:	f7fd ffe3 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800406e:	4603      	mov	r3, r0
 8004070:	3b0e      	subs	r3, #14
 8004072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004074:	429a      	cmp	r2, r3
 8004076:	bf34      	ite	cc
 8004078:	2301      	movcc	r3, #1
 800407a:	2300      	movcs	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d05e      	beq.n	8004140 <_Z9parseDataSt6vectorIcSaIcEE+0x118>
 8004082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004084:	6838      	ldr	r0, [r7, #0]
 8004086:	f000 f860 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 800408a:	4604      	mov	r4, r0
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	3301      	adds	r3, #1
 8004090:	4619      	mov	r1, r3
 8004092:	6838      	ldr	r0, [r7, #0]
 8004094:	f000 f859 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 8004098:	4603      	mov	r3, r0
 800409a:	4619      	mov	r1, r3
 800409c:	4620      	mov	r0, r4
 800409e:	f7fc fecf 	bl	8000e40 <_Z7hex2decPcS_>
 80040a2:	4603      	mov	r3, r0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	2300      	movs	r3, #0
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	2b07      	cmp	r3, #7
 80040ae:	dc13      	bgt.n	80040d8 <_Z9parseDataSt6vectorIcSaIcEE+0xb0>
 80040b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	4413      	add	r3, r2
 80040b6:	3302      	adds	r3, #2
 80040b8:	4619      	mov	r1, r3
 80040ba:	6838      	ldr	r0, [r7, #0]
 80040bc:	f000 f845 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 80040c0:	4603      	mov	r3, r0
 80040c2:	7819      	ldrb	r1, [r3, #0]
 80040c4:	f107 020c 	add.w	r2, r7, #12
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	4413      	add	r3, r2
 80040cc:	460a      	mov	r2, r1
 80040ce:	701a      	strb	r2, [r3, #0]
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	3301      	adds	r3, #1
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d6:	e7e8      	b.n	80040aa <_Z9parseDataSt6vectorIcSaIcEE+0x82>
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	330a      	adds	r3, #10
 80040dc:	4619      	mov	r1, r3
 80040de:	6838      	ldr	r0, [r7, #0]
 80040e0:	f000 f833 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 80040e4:	4604      	mov	r4, r0
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	330b      	adds	r3, #11
 80040ea:	4619      	mov	r1, r3
 80040ec:	6838      	ldr	r0, [r7, #0]
 80040ee:	f000 f82c 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4619      	mov	r1, r3
 80040f6:	4620      	mov	r0, r4
 80040f8:	f7fc fea2 	bl	8000e40 <_Z7hex2decPcS_>
 80040fc:	4603      	mov	r3, r0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004102:	330c      	adds	r3, #12
 8004104:	4619      	mov	r1, r3
 8004106:	6838      	ldr	r0, [r7, #0]
 8004108:	f000 f81f 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 800410c:	4604      	mov	r4, r0
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	330d      	adds	r3, #13
 8004112:	4619      	mov	r1, r3
 8004114:	6838      	ldr	r0, [r7, #0]
 8004116:	f000 f818 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 800411a:	4603      	mov	r3, r0
 800411c:	4619      	mov	r1, r3
 800411e:	4620      	mov	r0, r4
 8004120:	f7fc fe8e 	bl	8000e40 <_Z7hex2decPcS_>
 8004124:	4603      	mov	r3, r0
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	f107 0308 	add.w	r3, r7, #8
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f81d 	bl	800416e <_ZNSt6vectorI10DataStructSaIS0_EE9push_backERKS0_>
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	330e      	adds	r3, #14
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413a:	e795      	b.n	8004068 <_Z9parseDataSt6vectorIcSaIcEE+0x40>
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <_Z9parseDataSt6vectorIcSaIcEE+0x11a>
 8004140:	bf00      	nop
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	3734      	adds	r7, #52	; 0x34
 8004146:	46bd      	mov	sp, r7
 8004148:	bd90      	pop	{r4, r7, pc}

0800414a <_ZNSt6vectorIcSaIcEE2atEj>:
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
 8004154:	6839      	ldr	r1, [r7, #0]
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f830 	bl	80041bc <_ZNKSt6vectorIcSaIcEE14_M_range_checkEj>
 800415c:	6839      	ldr	r1, [r7, #0]
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f84c 	bl	80041fc <_ZNSt6vectorIcSaIcEEixEj>
 8004164:	4603      	mov	r3, r0
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <_ZNSt6vectorI10DataStructSaIS0_EE9push_backERKS0_>:
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d00d      	beq.n	80041a0 <_ZNSt6vectorI10DataStructSaIS0_EE9push_backERKS0_+0x32>
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	4619      	mov	r1, r3
 800418e:	f000 f844 	bl	800421a <_ZNSt16allocator_traitsISaI10DataStructEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f103 0214 	add.w	r2, r3, #20
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e008      	b.n	80041b2 <_ZNSt6vectorI10DataStructSaIS0_EE9push_backERKS0_+0x44>
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fd ffd7 	bl	8002154 <_ZNSt6vectorI10DataStructSaIS0_EE3endEv>
 80041a6:	4603      	mov	r3, r0
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f85d 	bl	800426c <_ZNSt6vectorI10DataStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <_ZNKSt6vectorIcSaIcEE14_M_range_checkEj>:
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd ff34 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80041cc:	4602      	mov	r2, r0
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	bf2c      	ite	cs
 80041d4:	2301      	movcs	r3, #1
 80041d6:	2300      	movcc	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <_ZNKSt6vectorIcSaIcEE14_M_range_checkEj+0x34>
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fd ff28 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	6839      	ldr	r1, [r7, #0]
 80041ea:	4803      	ldr	r0, [pc, #12]	; (80041f8 <_ZNKSt6vectorIcSaIcEE14_M_range_checkEj+0x3c>)
 80041ec:	f007 fa0d 	bl	800b60a <_ZSt24__throw_out_of_range_fmtPKcz>
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	0800cad4 	.word	0x0800cad4

080041fc <_ZNSt6vectorIcSaIcEEixEj>:
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	4413      	add	r3, r2
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <_ZNSt16allocator_traitsISaI10DataStructEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8e8 	bl	80043fc <_ZSt7forwardIRK10DataStructEOT_RNSt16remove_referenceIS3_E4typeE>
 800422c:	4603      	mov	r3, r0
 800422e:	461a      	mov	r2, r3
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f8ed 	bl	8004412 <_ZN9__gnu_cxx13new_allocatorI10DataStructE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZNSt6vectorI10DataStructSaIS0_EE15_S_use_relocateEv>:
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f805 	bl	8004256 <_ZNSt6vectorI10DataStructSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800424c:	4603      	mov	r3, r0
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <_ZNSt6vectorI10DataStructSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	7138      	strb	r0, [r7, #4]
 800425e:	2301      	movs	r3, #1
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_ZNSt6vectorI10DataStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
 800426c:	b5b0      	push	{r4, r5, r7, lr}
 800426e:	b08c      	sub	sp, #48	; 0x30
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	4a5e      	ldr	r2, [pc, #376]	; (80043f4 <_ZNSt6vectorI10DataStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 800427a:	2101      	movs	r1, #1
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7fe ff2e 	bl	80030de <_ZNKSt6vectorI10DataStructSaIS0_EE12_M_check_lenEjPKc>
 8004282:	62b8      	str	r0, [r7, #40]	; 0x28
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7fd fe6d 	bl	8001f70 <_ZNSt6vectorI10DataStructSaIS0_EE5beginEv>
 8004296:	4603      	mov	r3, r0
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	f107 0214 	add.w	r2, r7, #20
 800429e:	f107 0308 	add.w	r3, r7, #8
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fe93 	bl	8002fd0 <_ZN9__gnu_cxxmiIP10DataStructSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80042aa:	4603      	mov	r3, r0
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe ff5a 	bl	800316c <_ZNSt12_Vector_baseI10DataStructSaIS0_EE11_M_allocateEj>
 80042b8:	61b8      	str	r0, [r7, #24]
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042be:	68fc      	ldr	r4, [r7, #12]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	461a      	mov	r2, r3
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	189d      	adds	r5, r3, r2
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f893 	bl	80043fc <_ZSt7forwardIRK10DataStructEOT_RNSt16remove_referenceIS3_E4typeE>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	4629      	mov	r1, r5
 80042dc:	4620      	mov	r0, r4
 80042de:	f7ff ff9c 	bl	800421a <_ZNSt16allocator_traitsISaI10DataStructEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
 80042e2:	2300      	movs	r3, #0
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e6:	f7ff ffab 	bl	8004240 <_ZNSt6vectorI10DataStructSaIS0_EE15_S_use_relocateEv>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d027      	beq.n	8004340 <_ZNSt6vectorI10DataStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
 80042f0:	f107 0308 	add.w	r3, r7, #8
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fe f8dd 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 80042fa:	4603      	mov	r3, r0
 80042fc:	681c      	ldr	r4, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fa0e 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8004306:	4603      	mov	r3, r0
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4621      	mov	r1, r4
 800430c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800430e:	f000 f899 	bl	8004444 <_ZNSt6vectorI10DataStructSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8004312:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	3314      	adds	r3, #20
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431a:	f107 0308 	add.w	r3, r7, #8
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe f8c8 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8004324:	4603      	mov	r3, r0
 8004326:	681c      	ldr	r4, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe f9f9 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8004330:	4603      	mov	r3, r0
 8004332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004334:	6a39      	ldr	r1, [r7, #32]
 8004336:	4620      	mov	r0, r4
 8004338:	f000 f884 	bl	8004444 <_ZNSt6vectorI10DataStructSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800433c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800433e:	e026      	b.n	800438e <_ZNSt6vectorI10DataStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
 8004340:	f107 0308 	add.w	r3, r7, #8
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe f8b5 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 800434a:	4603      	mov	r3, r0
 800434c:	681c      	ldr	r4, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe f9e6 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8004356:	4603      	mov	r3, r0
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4621      	mov	r1, r4
 800435c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800435e:	f7fe ff19 	bl	8003194 <_ZSt34__uninitialized_move_if_noexcept_aIP10DataStructS1_SaIS0_EET0_T_S4_S3_RT1_>
 8004362:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	3314      	adds	r3, #20
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436a:	f107 0308 	add.w	r3, r7, #8
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe f8a0 	bl	80024b4 <_ZNK9__gnu_cxx17__normal_iteratorIP10DataStructSt6vectorIS1_SaIS1_EEE4baseEv>
 8004374:	4603      	mov	r3, r0
 8004376:	681c      	ldr	r4, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe f9d1 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 8004380:	4603      	mov	r3, r0
 8004382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004384:	6a39      	ldr	r1, [r7, #32]
 8004386:	4620      	mov	r0, r4
 8004388:	f7fe ff04 	bl	8003194 <_ZSt34__uninitialized_move_if_noexcept_aIP10DataStructS1_SaIS0_EET0_T_S4_S3_RT1_>
 800438c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800438e:	f7ff ff57 	bl	8004240 <_ZNSt6vectorI10DataStructSaIS0_EE15_S_use_relocateEv>
 8004392:	4603      	mov	r3, r0
 8004394:	f083 0301 	eor.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <_ZNSt6vectorI10DataStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe f9be 	bl	8002722 <_ZNSt12_Vector_baseI10DataStructSaIS0_EE19_M_get_Tp_allocatorEv>
 80043a6:	4603      	mov	r3, r0
 80043a8:	461a      	mov	r2, r3
 80043aa:	6a39      	ldr	r1, [r7, #32]
 80043ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ae:	f7fe f9c3 	bl	8002738 <_ZSt8_DestroyIP10DataStructS0_EvT_S2_RSaIT0_E>
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	109b      	asrs	r3, r3, #2
 80043be:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <_ZNSt6vectorI10DataStructSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 80043c0:	fb02 f303 	mul.w	r3, r2, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043c8:	f7fd ff5f 	bl	800228a <_ZNSt12_Vector_baseI10DataStructSaIS0_EE13_M_deallocateEPS0_j>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	461a      	mov	r2, r3
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	441a      	add	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	bf00      	nop
 80043ee:	3730      	adds	r7, #48	; 0x30
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bdb0      	pop	{r4, r5, r7, pc}
 80043f4:	0800cb20 	.word	0x0800cb20
 80043f8:	cccccccd 	.word	0xcccccccd

080043fc <_ZSt7forwardIRK10DataStructEOT_RNSt16remove_referenceIS3_E4typeE>:
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <_ZN9__gnu_cxx13new_allocatorI10DataStructE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
 8004412:	b5b0      	push	{r4, r5, r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ffec 	bl	80043fc <_ZSt7forwardIRK10DataStructEOT_RNSt16remove_referenceIS3_E4typeE>
 8004424:	4605      	mov	r5, r0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4619      	mov	r1, r3
 800442a:	2014      	movs	r0, #20
 800442c:	f7fc fe28 	bl	8001080 <_ZnwjPv>
 8004430:	4603      	mov	r3, r0
 8004432:	461c      	mov	r4, r3
 8004434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	6023      	str	r3, [r4, #0]
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bdb0      	pop	{r4, r5, r7, pc}

08004444 <_ZNSt6vectorI10DataStructSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
 8004444:	b590      	push	{r4, r7, lr}
 8004446:	b089      	sub	sp, #36	; 0x24
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	f88d 4000 	strb.w	r4, [sp]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f805 	bl	800446c <_ZNSt6vectorI10DataStructSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8004462:	4603      	mov	r3, r0
 8004464:	4618      	mov	r0, r3
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	bd90      	pop	{r4, r7, pc}

0800446c <_ZNSt6vectorI10DataStructSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f805 	bl	8004490 <_ZSt12__relocate_aIP10DataStructS1_SaIS0_EET0_T_S4_S3_RT1_>
 8004486:	4603      	mov	r3, r0
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <_ZSt12__relocate_aIP10DataStructS1_SaIS0_EET0_T_S4_S3_RT1_>:
 8004490:	b5b0      	push	{r4, r5, r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff f907 	bl	80036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>
 80044a4:	4604      	mov	r4, r0
 80044a6:	68b8      	ldr	r0, [r7, #8]
 80044a8:	f7ff f903 	bl	80036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>
 80044ac:	4605      	mov	r5, r0
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff f8ff 	bl	80036b2 <_ZSt12__niter_baseIP10DataStructET_S2_>
 80044b4:	4602      	mov	r2, r0
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	4629      	mov	r1, r5
 80044ba:	4620      	mov	r0, r4
 80044bc:	f000 f806 	bl	80044cc <_ZSt14__relocate_a_1I10DataStructS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080044cc <_ZSt14__relocate_a_1I10DataStructS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	109b      	asrs	r3, r3, #2
 80044e2:	4a0e      	ldr	r2, [pc, #56]	; (800451c <_ZSt14__relocate_a_1I10DataStructS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x50>)
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	dd09      	ble.n	8004504 <_ZSt14__relocate_a_1I10DataStructS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x38>
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	461a      	mov	r2, r3
 80044fc:	68f9      	ldr	r1, [r7, #12]
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f008 f940 	bl	800c784 <memmove>
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	461a      	mov	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	cccccccd 	.word	0xcccccccd

08004520 <HAL_MspInit>:
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_MspInit+0x54>)
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	4a11      	ldr	r2, [pc, #68]	; (8004574 <HAL_MspInit+0x54>)
 8004530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004534:	6453      	str	r3, [r2, #68]	; 0x44
 8004536:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <HAL_MspInit+0x54>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2300      	movs	r3, #0
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_MspInit+0x54>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <HAL_MspInit+0x54>)
 800454c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004550:	6413      	str	r3, [r2, #64]	; 0x40
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <HAL_MspInit+0x54>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	210f      	movs	r1, #15
 8004562:	f06f 0001 	mvn.w	r0, #1
 8004566:	f000 ffd6 	bl	8005516 <HAL_NVIC_SetPriority>
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800

08004578 <HAL_ADC_MspInit>:
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <HAL_ADC_MspInit+0x7c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d127      	bne.n	80045ea <HAL_ADC_MspInit+0x72>
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <HAL_ADC_MspInit+0x80>)
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <HAL_ADC_MspInit+0x80>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a8:	6453      	str	r3, [r2, #68]	; 0x44
 80045aa:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <HAL_ADC_MspInit+0x80>)
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <HAL_ADC_MspInit+0x80>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <HAL_ADC_MspInit+0x80>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6313      	str	r3, [r2, #48]	; 0x30
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <HAL_ADC_MspInit+0x80>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2302      	movs	r3, #2
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	2303      	movs	r3, #3
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	f107 0314 	add.w	r3, r7, #20
 80045e2:	4619      	mov	r1, r3
 80045e4:	4805      	ldr	r0, [pc, #20]	; (80045fc <HAL_ADC_MspInit+0x84>)
 80045e6:	f001 f857 	bl	8005698 <HAL_GPIO_Init>
 80045ea:	bf00      	nop
 80045ec:	3728      	adds	r7, #40	; 0x28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40012000 	.word	0x40012000
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40020000 	.word	0x40020000

08004600 <HAL_I2C_MspInit>:
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	605a      	str	r2, [r3, #4]
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	60da      	str	r2, [r3, #12]
 8004616:	611a      	str	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a19      	ldr	r2, [pc, #100]	; (8004684 <HAL_I2C_MspInit+0x84>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d12b      	bne.n	800467a <HAL_I2C_MspInit+0x7a>
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	4b18      	ldr	r3, [pc, #96]	; (8004688 <HAL_I2C_MspInit+0x88>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	4a17      	ldr	r2, [pc, #92]	; (8004688 <HAL_I2C_MspInit+0x88>)
 800462c:	f043 0302 	orr.w	r3, r3, #2
 8004630:	6313      	str	r3, [r2, #48]	; 0x30
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <HAL_I2C_MspInit+0x88>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	23c0      	movs	r3, #192	; 0xc0
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	2312      	movs	r3, #18
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	2301      	movs	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	2303      	movs	r3, #3
 800464c:	623b      	str	r3, [r7, #32]
 800464e:	2304      	movs	r3, #4
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
 8004652:	f107 0314 	add.w	r3, r7, #20
 8004656:	4619      	mov	r1, r3
 8004658:	480c      	ldr	r0, [pc, #48]	; (800468c <HAL_I2C_MspInit+0x8c>)
 800465a:	f001 f81d 	bl	8005698 <HAL_GPIO_Init>
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_I2C_MspInit+0x88>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	4a08      	ldr	r2, [pc, #32]	; (8004688 <HAL_I2C_MspInit+0x88>)
 8004668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800466c:	6413      	str	r3, [r2, #64]	; 0x40
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_I2C_MspInit+0x88>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	bf00      	nop
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40005400 	.word	0x40005400
 8004688:	40023800 	.word	0x40023800
 800468c:	40020400 	.word	0x40020400

08004690 <HAL_TIM_Base_MspInit>:
 8004690:	b580      	push	{r7, lr}
 8004692:	b090      	sub	sp, #64	; 0x40
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
 80046a8:	f107 031c 	add.w	r3, r7, #28
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	60da      	str	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a39      	ldr	r2, [pc, #228]	; (80047a0 <HAL_TIM_Base_MspInit+0x110>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10e      	bne.n	80046de <HAL_TIM_Base_MspInit+0x4e>
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	4b37      	ldr	r3, [pc, #220]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	4a36      	ldr	r2, [pc, #216]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 80046ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ce:	6453      	str	r3, [r2, #68]	; 0x44
 80046d0:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	e05c      	b.n	8004798 <HAL_TIM_Base_MspInit+0x108>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a31      	ldr	r2, [pc, #196]	; (80047a8 <HAL_TIM_Base_MspInit+0x118>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d144      	bne.n	8004772 <HAL_TIM_Base_MspInit+0xe2>
 80046e8:	2302      	movs	r3, #2
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f2:	f107 031c 	add.w	r3, r7, #28
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 fff2 	bl	80066e0 <HAL_RCCEx_PeriphCLKConfig>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_TIM_Base_MspInit+0x76>
 8004702:	f7fd fb91 	bl	8001e28 <Error_Handler>
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	4a25      	ldr	r2, [pc, #148]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 8004710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004714:	6453      	str	r3, [r2, #68]	; 0x44
 8004716:	4b23      	ldr	r3, [pc, #140]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 800472c:	f043 0302 	orr.w	r3, r3, #2
 8004730:	6313      	str	r3, [r2, #48]	; 0x30
 8004732:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004744:	2302      	movs	r3, #2
 8004746:	633b      	str	r3, [r7, #48]	; 0x30
 8004748:	2302      	movs	r3, #2
 800474a:	637b      	str	r3, [r7, #52]	; 0x34
 800474c:	2302      	movs	r3, #2
 800474e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004750:	2303      	movs	r3, #3
 8004752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004758:	4619      	mov	r1, r3
 800475a:	4814      	ldr	r0, [pc, #80]	; (80047ac <HAL_TIM_Base_MspInit+0x11c>)
 800475c:	f000 ff9c 	bl	8005698 <HAL_GPIO_Init>
 8004760:	2200      	movs	r2, #0
 8004762:	2105      	movs	r1, #5
 8004764:	201a      	movs	r0, #26
 8004766:	f000 fed6 	bl	8005516 <HAL_NVIC_SetPriority>
 800476a:	201a      	movs	r0, #26
 800476c:	f000 feef 	bl	800554e <HAL_NVIC_EnableIRQ>
 8004770:	e012      	b.n	8004798 <HAL_TIM_Base_MspInit+0x108>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a0e      	ldr	r2, [pc, #56]	; (80047b0 <HAL_TIM_Base_MspInit+0x120>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10d      	bne.n	8004798 <HAL_TIM_Base_MspInit+0x108>
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 8004786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800478a:	6413      	str	r3, [r2, #64]	; 0x40
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_TIM_Base_MspInit+0x114>)
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	bf00      	nop
 800479a:	3740      	adds	r7, #64	; 0x40
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40014800 	.word	0x40014800
 80047ac:	40020400 	.word	0x40020400
 80047b0:	40001800 	.word	0x40001800

080047b4 <HAL_TIM_MspPostInit>:
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	611a      	str	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a25      	ldr	r2, [pc, #148]	; (8004868 <HAL_TIM_MspPostInit+0xb4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d11f      	bne.n	8004816 <HAL_TIM_MspPostInit+0x62>
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	4b24      	ldr	r3, [pc, #144]	; (800486c <HAL_TIM_MspPostInit+0xb8>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	4a23      	ldr	r2, [pc, #140]	; (800486c <HAL_TIM_MspPostInit+0xb8>)
 80047e0:	f043 0302 	orr.w	r3, r3, #2
 80047e4:	6313      	str	r3, [r2, #48]	; 0x30
 80047e6:	4b21      	ldr	r3, [pc, #132]	; (800486c <HAL_TIM_MspPostInit+0xb8>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	2302      	movs	r3, #2
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	2302      	movs	r3, #2
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	2302      	movs	r3, #2
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	2303      	movs	r3, #3
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
 8004808:	f107 0314 	add.w	r3, r7, #20
 800480c:	4619      	mov	r1, r3
 800480e:	4818      	ldr	r0, [pc, #96]	; (8004870 <HAL_TIM_MspPostInit+0xbc>)
 8004810:	f000 ff42 	bl	8005698 <HAL_GPIO_Init>
 8004814:	e023      	b.n	800485e <HAL_TIM_MspPostInit+0xaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a16      	ldr	r2, [pc, #88]	; (8004874 <HAL_TIM_MspPostInit+0xc0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d11e      	bne.n	800485e <HAL_TIM_MspPostInit+0xaa>
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_TIM_MspPostInit+0xb8>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	4a10      	ldr	r2, [pc, #64]	; (800486c <HAL_TIM_MspPostInit+0xb8>)
 800482a:	f043 0302 	orr.w	r3, r3, #2
 800482e:	6313      	str	r3, [r2, #48]	; 0x30
 8004830:	4b0e      	ldr	r3, [pc, #56]	; (800486c <HAL_TIM_MspPostInit+0xb8>)
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	2302      	movs	r3, #2
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	2302      	movs	r3, #2
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	2301      	movs	r3, #1
 800484c:	623b      	str	r3, [r7, #32]
 800484e:	2309      	movs	r3, #9
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
 8004852:	f107 0314 	add.w	r3, r7, #20
 8004856:	4619      	mov	r1, r3
 8004858:	4805      	ldr	r0, [pc, #20]	; (8004870 <HAL_TIM_MspPostInit+0xbc>)
 800485a:	f000 ff1d 	bl	8005698 <HAL_GPIO_Init>
 800485e:	bf00      	nop
 8004860:	3728      	adds	r7, #40	; 0x28
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40014400 	.word	0x40014400
 800486c:	40023800 	.word	0x40023800
 8004870:	40020400 	.word	0x40020400
 8004874:	40001800 	.word	0x40001800

08004878 <HAL_UART_MspInit>:
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	60da      	str	r2, [r3, #12]
 800488e:	611a      	str	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1d      	ldr	r2, [pc, #116]	; (800490c <HAL_UART_MspInit+0x94>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d134      	bne.n	8004904 <HAL_UART_MspInit+0x8c>
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <HAL_UART_MspInit+0x98>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <HAL_UART_MspInit+0x98>)
 80048a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048a8:	6413      	str	r3, [r2, #64]	; 0x40
 80048aa:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_UART_MspInit+0x98>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <HAL_UART_MspInit+0x98>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	4a14      	ldr	r2, [pc, #80]	; (8004910 <HAL_UART_MspInit+0x98>)
 80048c0:	f043 0304 	orr.w	r3, r3, #4
 80048c4:	6313      	str	r3, [r2, #48]	; 0x30
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <HAL_UART_MspInit+0x98>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	2302      	movs	r3, #2
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	2303      	movs	r3, #3
 80048e2:	623b      	str	r3, [r7, #32]
 80048e4:	2308      	movs	r3, #8
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	4619      	mov	r1, r3
 80048ee:	4809      	ldr	r0, [pc, #36]	; (8004914 <HAL_UART_MspInit+0x9c>)
 80048f0:	f000 fed2 	bl	8005698 <HAL_GPIO_Init>
 80048f4:	2200      	movs	r2, #0
 80048f6:	2105      	movs	r1, #5
 80048f8:	2034      	movs	r0, #52	; 0x34
 80048fa:	f000 fe0c 	bl	8005516 <HAL_NVIC_SetPriority>
 80048fe:	2034      	movs	r0, #52	; 0x34
 8004900:	f000 fe25 	bl	800554e <HAL_NVIC_EnableIRQ>
 8004904:	bf00      	nop
 8004906:	3728      	adds	r7, #40	; 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40004c00 	.word	0x40004c00
 8004910:	40023800 	.word	0x40023800
 8004914:	40020800 	.word	0x40020800

08004918 <HAL_InitTick>:
 8004918:	b580      	push	{r7, lr}
 800491a:	b08c      	sub	sp, #48	; 0x30
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	2300      	movs	r3, #0
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004924:	2300      	movs	r3, #0
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
 8004928:	2200      	movs	r2, #0
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	202d      	movs	r0, #45	; 0x2d
 800492e:	f000 fdf2 	bl	8005516 <HAL_NVIC_SetPriority>
 8004932:	202d      	movs	r0, #45	; 0x2d
 8004934:	f000 fe0b 	bl	800554e <HAL_NVIC_EnableIRQ>
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <HAL_InitTick+0xa4>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <HAL_InitTick+0xa4>)
 8004942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004946:	6413      	str	r3, [r2, #64]	; 0x40
 8004948:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <HAL_InitTick+0xa4>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f107 0210 	add.w	r2, r7, #16
 8004958:	f107 0314 	add.w	r3, r7, #20
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f001 fe8c 	bl	800667c <HAL_RCC_GetClockConfig>
 8004964:	f001 fe62 	bl	800662c <HAL_RCC_GetPCLK1Freq>
 8004968:	4603      	mov	r3, r0
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	4a13      	ldr	r2, [pc, #76]	; (80049c0 <HAL_InitTick+0xa8>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	0c9b      	lsrs	r3, r3, #18
 8004978:	3b01      	subs	r3, #1
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28
 800497c:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_InitTick+0xac>)
 800497e:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <HAL_InitTick+0xb0>)
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <HAL_InitTick+0xac>)
 8004984:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	4a0e      	ldr	r2, [pc, #56]	; (80049c4 <HAL_InitTick+0xac>)
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	6053      	str	r3, [r2, #4]
 8004990:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <HAL_InitTick+0xac>)
 8004992:	2200      	movs	r2, #0
 8004994:	611a      	str	r2, [r3, #16]
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_InitTick+0xac>)
 8004998:	2200      	movs	r2, #0
 800499a:	609a      	str	r2, [r3, #8]
 800499c:	4809      	ldr	r0, [pc, #36]	; (80049c4 <HAL_InitTick+0xac>)
 800499e:	f001 ff81 	bl	80068a4 <HAL_TIM_Base_Init>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <HAL_InitTick+0x9a>
 80049a8:	4806      	ldr	r0, [pc, #24]	; (80049c4 <HAL_InitTick+0xac>)
 80049aa:	f001 ffcb 	bl	8006944 <HAL_TIM_Base_Start_IT>
 80049ae:	4603      	mov	r3, r0
 80049b0:	e000      	b.n	80049b4 <HAL_InitTick+0x9c>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4618      	mov	r0, r3
 80049b6:	3730      	adds	r7, #48	; 0x30
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	431bde83 	.word	0x431bde83
 80049c4:	20004258 	.word	0x20004258
 80049c8:	40002000 	.word	0x40002000

080049cc <NMI_Handler>:
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049d4:	4803      	ldr	r0, [pc, #12]	; (80049e4 <NMI_Handler+0x18>)
 80049d6:	f001 f82c 	bl	8005a32 <HAL_GPIO_TogglePin>
 80049da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049de:	f000 fa45 	bl	8004e6c <HAL_Delay>
 80049e2:	e7f5      	b.n	80049d0 <NMI_Handler+0x4>
 80049e4:	40020800 	.word	0x40020800

080049e8 <HardFault_Handler>:
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80049f0:	4803      	ldr	r0, [pc, #12]	; (8004a00 <HardFault_Handler+0x18>)
 80049f2:	f001 f81e 	bl	8005a32 <HAL_GPIO_TogglePin>
 80049f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049fa:	f000 fa37 	bl	8004e6c <HAL_Delay>
 80049fe:	e7f5      	b.n	80049ec <HardFault_Handler+0x4>
 8004a00:	40020800 	.word	0x40020800

08004a04 <MemManage_Handler>:
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a0c:	4803      	ldr	r0, [pc, #12]	; (8004a1c <MemManage_Handler+0x18>)
 8004a0e:	f001 f810 	bl	8005a32 <HAL_GPIO_TogglePin>
 8004a12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a16:	f000 fa29 	bl	8004e6c <HAL_Delay>
 8004a1a:	e7f5      	b.n	8004a08 <MemManage_Handler+0x4>
 8004a1c:	40020800 	.word	0x40020800

08004a20 <BusFault_Handler>:
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a28:	4803      	ldr	r0, [pc, #12]	; (8004a38 <BusFault_Handler+0x18>)
 8004a2a:	f001 f802 	bl	8005a32 <HAL_GPIO_TogglePin>
 8004a2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a32:	f000 fa1b 	bl	8004e6c <HAL_Delay>
 8004a36:	e7f5      	b.n	8004a24 <BusFault_Handler+0x4>
 8004a38:	40020800 	.word	0x40020800

08004a3c <UsageFault_Handler>:
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a44:	4803      	ldr	r0, [pc, #12]	; (8004a54 <UsageFault_Handler+0x18>)
 8004a46:	f000 fff4 	bl	8005a32 <HAL_GPIO_TogglePin>
 8004a4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a4e:	f000 fa0d 	bl	8004e6c <HAL_Delay>
 8004a52:	e7f5      	b.n	8004a40 <UsageFault_Handler+0x4>
 8004a54:	40020800 	.word	0x40020800

08004a58 <DebugMon_Handler>:
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	bf00      	nop
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <TIM1_TRG_COM_TIM11_IRQHandler>:
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	4802      	ldr	r0, [pc, #8]	; (8004a78 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004a6e:	f002 f9b3 	bl	8006dd8 <HAL_TIM_IRQHandler>
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200003dc 	.word	0x200003dc

08004a7c <TIM8_TRG_COM_TIM14_IRQHandler>:
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004a82:	f002 f9a9 	bl	8006dd8 <HAL_TIM_IRQHandler>
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20004258 	.word	0x20004258

08004a90 <UART4_IRQHandler>:
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <UART4_IRQHandler+0x10>)
 8004a96:	f003 f9f9 	bl	8007e8c <HAL_UART_IRQHandler>
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000424 	.word	0x20000424

08004aa4 <_getpid>:
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <_kill>:
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
 8004abe:	f007 fe19 	bl	800c6f4 <__errno>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2216      	movs	r2, #22
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <_exit>:
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ffe7 	bl	8004ab4 <_kill>
 8004ae6:	e7fe      	b.n	8004ae6 <_exit+0x12>

08004ae8 <_sbrk>:
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <_sbrk+0x5c>)
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <_sbrk+0x60>)
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <_sbrk+0x64>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <_sbrk+0x22>
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <_sbrk+0x64>)
 8004b06:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <_sbrk+0x68>)
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <_sbrk+0x64>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d207      	bcs.n	8004b28 <_sbrk+0x40>
 8004b18:	f007 fdec 	bl	800c6f4 <__errno>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	220c      	movs	r2, #12
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b26:	e009      	b.n	8004b3c <_sbrk+0x54>
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <_sbrk+0x64>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <_sbrk+0x64>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4413      	add	r3, r2
 8004b36:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <_sbrk+0x64>)
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20020000 	.word	0x20020000
 8004b48:	00000400 	.word	0x00000400
 8004b4c:	200004f4 	.word	0x200004f4
 8004b50:	200042b8 	.word	0x200042b8

08004b54 <SystemInit>:
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <SystemInit+0x20>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	4a05      	ldr	r2, [pc, #20]	; (8004b74 <SystemInit+0x20>)
 8004b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <_Z15checkEmptyFrameSt6vectorIcSaIcEE>:
#include "math.h"
#include "converter.h"

extern const char* AGV_ID;

bool checkEmptyFrame(std::vector<char> parsedData) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	if(parsedData.size() == 0) return false;
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fd fa57 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <_Z15checkEmptyFrameSt6vectorIcSaIcEE+0x22>
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <_Z15checkEmptyFrameSt6vectorIcSaIcEE+0x24>
	else return true;
 8004b9a:	2301      	movs	r3, #1
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <_Z14checkFrameHeadSt6vectorIcSaIcEE>:
bool checkFrameHead(std::vector<char> parsedData) {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	// Frame Head is always "BA"
	bool checkingResult = false;
 8004bac:	2300      	movs	r3, #0
 8004bae:	73fb      	strb	r3, [r7, #15]

	if(parsedData.at(0) == 'B') checkingResult = true;
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fac9 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b42      	cmp	r3, #66	; 0x42
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <_Z14checkFrameHeadSt6vectorIcSaIcEE+0x2a>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
	if(parsedData.at(1) == 'A') checkingResult = true;
 8004bce:	2101      	movs	r1, #1
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff faba 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b41      	cmp	r3, #65	; 0x41
 8004bdc:	bf0c      	ite	eq
 8004bde:	2301      	moveq	r3, #1
 8004be0:	2300      	movne	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <_Z14checkFrameHeadSt6vectorIcSaIcEE+0x48>
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]

	return checkingResult;
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <_Z10checkAgvIdSt6vectorIcSaIcEE>:

bool checkAgvId(std::vector<char> parsedData) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	bool checkingResult = false;
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
	if(parsedData.at(2) == AGV_ID[0] && parsedData.at(3) == AGV_ID[1]) checkingResult = true;
 8004c04:	2102      	movs	r1, #2
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fa9f 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	781a      	ldrb	r2, [r3, #0]
 8004c10:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <_Z10checkAgvIdSt6vectorIcSaIcEE+0x54>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d10d      	bne.n	8004c36 <_Z10checkAgvIdSt6vectorIcSaIcEE+0x3e>
 8004c1a:	2103      	movs	r1, #3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fa94 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 8004c22:	4603      	mov	r3, r0
 8004c24:	781a      	ldrb	r2, [r3, #0]
 8004c26:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <_Z10checkAgvIdSt6vectorIcSaIcEE+0x54>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d101      	bne.n	8004c36 <_Z10checkAgvIdSt6vectorIcSaIcEE+0x3e>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <_Z10checkAgvIdSt6vectorIcSaIcEE+0x40>
 8004c36:	2300      	movs	r3, #0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <_Z10checkAgvIdSt6vectorIcSaIcEE+0x48>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
	return checkingResult;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000000 	.word	0x20000000

08004c50 <_Z16checkFrameLengthSt6vectorIcSaIcEE>:

bool checkFrameLength(std::vector<char> parsedData) {
 8004c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
//	int frameLenght = hex2dec(&parsedData.at(4), &parsedData.at(5));
	int frameLenght = twoHex2dec(&parsedData.at(4), &parsedData.at(5), &parsedData.at(6), &parsedData.at(7));
 8004c58:	2104      	movs	r1, #4
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fa75 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 8004c60:	4604      	mov	r4, r0
 8004c62:	2105      	movs	r1, #5
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff fa70 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	2106      	movs	r1, #6
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fa6b 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 8004c74:	4606      	mov	r6, r0
 8004c76:	2107      	movs	r1, #7
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fa66 	bl	800414a <_ZNSt6vectorIcSaIcEE2atEj>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4632      	mov	r2, r6
 8004c82:	4629      	mov	r1, r5
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7fc f8f7 	bl	8000e78 <_Z10twoHex2decPcS_S_S_>
 8004c8a:	6138      	str	r0, [r7, #16]
	int actualFrameLength = parsedData.size() / 2;
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fd f9d1 	bl	8002034 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8004c92:	4603      	mov	r3, r0
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
	bool checkingResult = false;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	75fb      	strb	r3, [r7, #23]
	if(frameLenght == actualFrameLength) checkingResult = true;
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d101      	bne.n	8004ca8 <_Z16checkFrameLengthSt6vectorIcSaIcEE+0x58>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75fb      	strb	r3, [r7, #23]
	return checkingResult;
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cb2 <_Z14checkDataFrameSt6vectorIcSaIcEE>:

bool checkDataFrame(std::vector<char> parsedData) {
 8004cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb6:	b08e      	sub	sp, #56	; 0x38
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	if(!checkEmptyFrame(parsedData)) return false;
 8004cbc:	f107 0308 	add.w	r3, r7, #8
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fd f9c5 	bl	8002052 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8004cc8:	f107 0308 	add.w	r3, r7, #8
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ff53 	bl	8004b78 <_Z15checkEmptyFrameSt6vectorIcSaIcEE>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f083 0301 	eor.w	r3, r3, #1
 8004cd8:	b2dc      	uxtb	r4, r3
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fd f9f4 	bl	80020cc <_ZNSt6vectorIcSaIcEED1Ev>
 8004ce4:	2c00      	cmp	r4, #0
 8004ce6:	d001      	beq.n	8004cec <_Z14checkDataFrameSt6vectorIcSaIcEE+0x3a>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e04d      	b.n	8004d88 <_Z14checkDataFrameSt6vectorIcSaIcEE+0xd6>
	if((checkFrameHead(parsedData) && checkFrameLength(parsedData)) && checkAgvId(parsedData)) return true;
 8004cec:	2500      	movs	r5, #0
 8004cee:	2600      	movs	r6, #0
 8004cf0:	f107 0314 	add.w	r3, r7, #20
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fd f9ab 	bl	8002052 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8004cfc:	f04f 0801 	mov.w	r8, #1
 8004d00:	f107 0314 	add.w	r3, r7, #20
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff4d 	bl	8004ba4 <_Z14checkFrameHeadSt6vectorIcSaIcEE>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01f      	beq.n	8004d50 <_Z14checkDataFrameSt6vectorIcSaIcEE+0x9e>
 8004d10:	f107 0320 	add.w	r3, r7, #32
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fd f99b 	bl	8002052 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8004d1c:	2501      	movs	r5, #1
 8004d1e:	f107 0320 	add.w	r3, r7, #32
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff ff94 	bl	8004c50 <_Z16checkFrameLengthSt6vectorIcSaIcEE>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <_Z14checkDataFrameSt6vectorIcSaIcEE+0x9e>
 8004d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fd f98c 	bl	8002052 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8004d3a:	2601      	movs	r6, #1
 8004d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff59 	bl	8004bf8 <_Z10checkAgvIdSt6vectorIcSaIcEE>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <_Z14checkDataFrameSt6vectorIcSaIcEE+0x9e>
 8004d4c:	2401      	movs	r4, #1
 8004d4e:	e000      	b.n	8004d52 <_Z14checkDataFrameSt6vectorIcSaIcEE+0xa0>
 8004d50:	2400      	movs	r4, #0
 8004d52:	2e00      	cmp	r6, #0
 8004d54:	d004      	beq.n	8004d60 <_Z14checkDataFrameSt6vectorIcSaIcEE+0xae>
 8004d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fd f9b6 	bl	80020cc <_ZNSt6vectorIcSaIcEED1Ev>
 8004d60:	2d00      	cmp	r5, #0
 8004d62:	d004      	beq.n	8004d6e <_Z14checkDataFrameSt6vectorIcSaIcEE+0xbc>
 8004d64:	f107 0320 	add.w	r3, r7, #32
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fd f9af 	bl	80020cc <_ZNSt6vectorIcSaIcEED1Ev>
 8004d6e:	f1b8 0f00 	cmp.w	r8, #0
 8004d72:	d004      	beq.n	8004d7e <_Z14checkDataFrameSt6vectorIcSaIcEE+0xcc>
 8004d74:	f107 0314 	add.w	r3, r7, #20
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fd f9a7 	bl	80020cc <_ZNSt6vectorIcSaIcEED1Ev>
 8004d7e:	2c00      	cmp	r4, #0
 8004d80:	d001      	beq.n	8004d86 <_Z14checkDataFrameSt6vectorIcSaIcEE+0xd4>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <_Z14checkDataFrameSt6vectorIcSaIcEE+0xd6>
	else return false;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3738      	adds	r7, #56	; 0x38
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004d94 <Reset_Handler>:
 8004d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dcc <LoopFillZerobss+0x12>
 8004d98:	480d      	ldr	r0, [pc, #52]	; (8004dd0 <LoopFillZerobss+0x16>)
 8004d9a:	490e      	ldr	r1, [pc, #56]	; (8004dd4 <LoopFillZerobss+0x1a>)
 8004d9c:	4a0e      	ldr	r2, [pc, #56]	; (8004dd8 <LoopFillZerobss+0x1e>)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e002      	b.n	8004da8 <LoopCopyDataInit>

08004da2 <CopyDataInit>:
 8004da2:	58d4      	ldr	r4, [r2, r3]
 8004da4:	50c4      	str	r4, [r0, r3]
 8004da6:	3304      	adds	r3, #4

08004da8 <LoopCopyDataInit>:
 8004da8:	18c4      	adds	r4, r0, r3
 8004daa:	428c      	cmp	r4, r1
 8004dac:	d3f9      	bcc.n	8004da2 <CopyDataInit>
 8004dae:	4a0b      	ldr	r2, [pc, #44]	; (8004ddc <LoopFillZerobss+0x22>)
 8004db0:	4c0b      	ldr	r4, [pc, #44]	; (8004de0 <LoopFillZerobss+0x26>)
 8004db2:	2300      	movs	r3, #0
 8004db4:	e001      	b.n	8004dba <LoopFillZerobss>

08004db6 <FillZerobss>:
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	3204      	adds	r2, #4

08004dba <LoopFillZerobss>:
 8004dba:	42a2      	cmp	r2, r4
 8004dbc:	d3fb      	bcc.n	8004db6 <FillZerobss>
 8004dbe:	f7ff fec9 	bl	8004b54 <SystemInit>
 8004dc2:	f007 fc9d 	bl	800c700 <__libc_init_array>
 8004dc6:	f7fc fa7d 	bl	80012c4 <main>
 8004dca:	4770      	bx	lr
 8004dcc:	20020000 	.word	0x20020000
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	2000007c 	.word	0x2000007c
 8004dd8:	0800cc30 	.word	0x0800cc30
 8004ddc:	2000007c 	.word	0x2000007c
 8004de0:	200042b4 	.word	0x200042b4

08004de4 <ADC_IRQHandler>:
 8004de4:	e7fe      	b.n	8004de4 <ADC_IRQHandler>
	...

08004de8 <HAL_Init>:
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <HAL_Init+0x40>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <HAL_Init+0x40>)
 8004df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_Init+0x40>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a0a      	ldr	r2, [pc, #40]	; (8004e28 <HAL_Init+0x40>)
 8004dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_Init+0x40>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a07      	ldr	r2, [pc, #28]	; (8004e28 <HAL_Init+0x40>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	2003      	movs	r0, #3
 8004e12:	f000 fb75 	bl	8005500 <HAL_NVIC_SetPriorityGrouping>
 8004e16:	200f      	movs	r0, #15
 8004e18:	f7ff fd7e 	bl	8004918 <HAL_InitTick>
 8004e1c:	f7ff fb80 	bl	8004520 <HAL_MspInit>
 8004e20:	2300      	movs	r3, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023c00 	.word	0x40023c00

08004e2c <HAL_IncTick>:
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_IncTick+0x20>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <HAL_IncTick+0x24>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <HAL_IncTick+0x24>)
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	2000000c 	.word	0x2000000c
 8004e50:	200042a0 	.word	0x200042a0

08004e54 <HAL_GetTick>:
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <HAL_GetTick+0x14>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	200042a0 	.word	0x200042a0

08004e6c <HAL_Delay>:
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	f7ff ffee 	bl	8004e54 <HAL_GetTick>
 8004e78:	60b8      	str	r0, [r7, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e84:	d005      	beq.n	8004e92 <HAL_Delay+0x26>
 8004e86:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <HAL_Delay+0x44>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	bf00      	nop
 8004e94:	f7ff ffde 	bl	8004e54 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d8f7      	bhi.n	8004e94 <HAL_Delay+0x28>
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	2000000c 	.word	0x2000000c

08004eb4 <HAL_ADC_Init>:
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73fb      	strb	r3, [r7, #15]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_ADC_Init+0x16>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e033      	b.n	8004f32 <HAL_ADC_Init+0x7e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_ADC_Init+0x32>
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fb50 	bl	8004578 <HAL_ADC_MspInit>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d118      	bne.n	8004f24 <HAL_ADC_Init+0x70>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004efa:	f023 0302 	bic.w	r3, r3, #2
 8004efe:	f043 0202 	orr.w	r2, r3, #2
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f93a 	bl	8005180 <ADC_Init>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	f043 0201 	orr.w	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40
 8004f22:	e001      	b.n	8004f28 <HAL_ADC_Init+0x74>
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_ADC_ConfigChannel>:
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
 8004f46:	2300      	movs	r3, #0
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x1c>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e105      	b.n	8005164 <HAL_ADC_ConfigChannel+0x228>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b09      	cmp	r3, #9
 8004f66:	d925      	bls.n	8004fb4 <HAL_ADC_ConfigChannel+0x78>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68d9      	ldr	r1, [r3, #12]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3b1e      	subs	r3, #30
 8004f7e:	2207      	movs	r2, #7
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43da      	mvns	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	60da      	str	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68d9      	ldr	r1, [r3, #12]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	4403      	add	r3, r0
 8004fa6:	3b1e      	subs	r3, #30
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	e022      	b.n	8004ffa <HAL_ADC_ConfigChannel+0xbe>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6919      	ldr	r1, [r3, #16]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	2207      	movs	r2, #7
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43da      	mvns	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	400a      	ands	r2, r1
 8004fd6:	611a      	str	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6919      	ldr	r1, [r3, #16]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	4618      	mov	r0, r3
 8004fea:	4603      	mov	r3, r0
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4403      	add	r3, r0
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	611a      	str	r2, [r3, #16]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b06      	cmp	r3, #6
 8005000:	d824      	bhi.n	800504c <HAL_ADC_ConfigChannel+0x110>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	3b05      	subs	r3, #5
 8005014:	221f      	movs	r2, #31
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43da      	mvns	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	400a      	ands	r2, r1
 8005022:	635a      	str	r2, [r3, #52]	; 0x34
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	4618      	mov	r0, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	3b05      	subs	r3, #5
 800503e:	fa00 f203 	lsl.w	r2, r0, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	635a      	str	r2, [r3, #52]	; 0x34
 800504a:	e04c      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x1aa>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b0c      	cmp	r3, #12
 8005052:	d824      	bhi.n	800509e <HAL_ADC_ConfigChannel+0x162>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	3b23      	subs	r3, #35	; 0x23
 8005066:	221f      	movs	r2, #31
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	43da      	mvns	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	400a      	ands	r2, r1
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	4618      	mov	r0, r3
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	3b23      	subs	r3, #35	; 0x23
 8005090:	fa00 f203 	lsl.w	r2, r0, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
 800509c:	e023      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x1aa>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	3b41      	subs	r3, #65	; 0x41
 80050b0:	221f      	movs	r2, #31
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43da      	mvns	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	400a      	ands	r2, r1
 80050be:	62da      	str	r2, [r3, #44]	; 0x2c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	4618      	mov	r0, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	3b41      	subs	r3, #65	; 0x41
 80050da:	fa00 f203 	lsl.w	r2, r0, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80050e6:	4b22      	ldr	r3, [pc, #136]	; (8005170 <HAL_ADC_ConfigChannel+0x234>)
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a21      	ldr	r2, [pc, #132]	; (8005174 <HAL_ADC_ConfigChannel+0x238>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d109      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x1cc>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b12      	cmp	r3, #18
 80050fa:	d105      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x1cc>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	605a      	str	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a19      	ldr	r2, [pc, #100]	; (8005174 <HAL_ADC_ConfigChannel+0x238>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d123      	bne.n	800515a <HAL_ADC_ConfigChannel+0x21e>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b10      	cmp	r3, #16
 8005118:	d003      	beq.n	8005122 <HAL_ADC_ConfigChannel+0x1e6>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b11      	cmp	r3, #17
 8005120:	d11b      	bne.n	800515a <HAL_ADC_ConfigChannel+0x21e>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b10      	cmp	r3, #16
 8005134:	d111      	bne.n	800515a <HAL_ADC_ConfigChannel+0x21e>
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <HAL_ADC_ConfigChannel+0x23c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a10      	ldr	r2, [pc, #64]	; (800517c <HAL_ADC_ConfigChannel+0x240>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	0c9a      	lsrs	r2, r3, #18
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	e002      	b.n	8005154 <HAL_ADC_ConfigChannel+0x218>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	3b01      	subs	r3, #1
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f9      	bne.n	800514e <HAL_ADC_ConfigChannel+0x212>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005162:	2300      	movs	r3, #0
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40012300 	.word	0x40012300
 8005174:	40012000 	.word	0x40012000
 8005178:	20000004 	.word	0x20000004
 800517c:	431bde83 	.word	0x431bde83

08005180 <ADC_Init>:
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	4b79      	ldr	r3, [pc, #484]	; (8005370 <ADC_Init+0x1f0>)
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	605a      	str	r2, [r3, #4]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	021a      	lsls	r2, r3, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051fa:	609a      	str	r2, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6899      	ldr	r1, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	609a      	str	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	4a58      	ldr	r2, [pc, #352]	; (8005374 <ADC_Init+0x1f4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d022      	beq.n	800525e <ADC_Init+0xde>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6899      	ldr	r1, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005248:	609a      	str	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6899      	ldr	r1, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
 800525c:	e00f      	b.n	800527e <ADC_Init+0xfe>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800526c:	609a      	str	r2, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800527c:	609a      	str	r2, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0202 	bic.w	r2, r2, #2
 800528c:	609a      	str	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6899      	ldr	r1, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7e1b      	ldrb	r3, [r3, #24]
 8005298:	005a      	lsls	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <ADC_Init+0x164>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ba:	605a      	str	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80052ca:	605a      	str	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6859      	ldr	r1, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	3b01      	subs	r3, #1
 80052d8:	035a      	lsls	r2, r3, #13
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
 80052e2:	e007      	b.n	80052f4 <ADC_Init+0x174>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052f2:	605a      	str	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005302:	62da      	str	r2, [r3, #44]	; 0x2c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	3b01      	subs	r3, #1
 8005310:	051a      	lsls	r2, r3, #20
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	62da      	str	r2, [r3, #44]	; 0x2c
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005328:	609a      	str	r2, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6899      	ldr	r1, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005336:	025a      	lsls	r2, r3, #9
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6899      	ldr	r1, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	029a      	lsls	r2, r3, #10
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	40012300 	.word	0x40012300
 8005374:	0f000001 	.word	0x0f000001

08005378 <__NVIC_SetPriorityGrouping>:
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005394:	4013      	ands	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	021a      	lsls	r2, r3, #8
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
 80053a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	4a04      	ldr	r2, [pc, #16]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	60d3      	str	r3, [r2, #12]
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <__NVIC_GetPriorityGrouping>:
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <__NVIC_GetPriorityGrouping+0x18>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <__NVIC_EnableIRQ>:
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db0b      	blt.n	8005406 <__NVIC_EnableIRQ+0x2a>
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4907      	ldr	r1, [pc, #28]	; (8005414 <__NVIC_EnableIRQ+0x38>)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2001      	movs	r0, #1
 80053fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e100 	.word	0xe000e100

08005418 <__NVIC_SetPriority>:
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	71fb      	strb	r3, [r7, #7]
 8005424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db0a      	blt.n	8005442 <__NVIC_SetPriority+0x2a>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	b2da      	uxtb	r2, r3
 8005430:	490c      	ldr	r1, [pc, #48]	; (8005464 <__NVIC_SetPriority+0x4c>)
 8005432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005436:	0112      	lsls	r2, r2, #4
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	440b      	add	r3, r1
 800543c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005440:	e00a      	b.n	8005458 <__NVIC_SetPriority+0x40>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4908      	ldr	r1, [pc, #32]	; (8005468 <__NVIC_SetPriority+0x50>)
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	3b04      	subs	r3, #4
 8005450:	0112      	lsls	r2, r2, #4
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	440b      	add	r3, r1
 8005456:	761a      	strb	r2, [r3, #24]
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000e100 	.word	0xe000e100
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <NVIC_EncodePriority>:
 800546c:	b480      	push	{r7}
 800546e:	b089      	sub	sp, #36	; 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f1c3 0307 	rsb	r3, r3, #7
 8005486:	2b04      	cmp	r3, #4
 8005488:	bf28      	it	cs
 800548a:	2304      	movcs	r3, #4
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3304      	adds	r3, #4
 8005492:	2b06      	cmp	r3, #6
 8005494:	d902      	bls.n	800549c <NVIC_EncodePriority+0x30>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3b03      	subs	r3, #3
 800549a:	e000      	b.n	800549e <NVIC_EncodePriority+0x32>
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43da      	mvns	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	401a      	ands	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	409a      	lsls	r2, r3
 80054b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	43d9      	mvns	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	400b      	ands	r3, r1
 80054c4:	4313      	orrs	r3, r2
 80054c6:	4618      	mov	r0, r3
 80054c8:	3724      	adds	r7, #36	; 0x24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <__NVIC_SystemReset>:
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	bf00      	nop
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <__NVIC_SystemReset+0x24>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054e6:	4904      	ldr	r1, [pc, #16]	; (80054f8 <__NVIC_SystemReset+0x24>)
 80054e8:	4b04      	ldr	r3, [pc, #16]	; (80054fc <__NVIC_SystemReset+0x28>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60cb      	str	r3, [r1, #12]
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	e7fd      	b.n	80054f4 <__NVIC_SystemReset+0x20>
 80054f8:	e000ed00 	.word	0xe000ed00
 80054fc:	05fa0004 	.word	0x05fa0004

08005500 <HAL_NVIC_SetPriorityGrouping>:
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ff35 	bl	8005378 <__NVIC_SetPriorityGrouping>
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_NVIC_SetPriority>:
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af00      	add	r7, sp, #0
 800551c:	4603      	mov	r3, r0
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	73fb      	strb	r3, [r7, #15]
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	f7ff ff4a 	bl	80053c0 <__NVIC_GetPriorityGrouping>
 800552c:	6178      	str	r0, [r7, #20]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	6978      	ldr	r0, [r7, #20]
 8005534:	f7ff ff9a 	bl	800546c <NVIC_EncodePriority>
 8005538:	4602      	mov	r2, r0
 800553a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800553e:	4611      	mov	r1, r2
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff ff69 	bl	8005418 <__NVIC_SetPriority>
 8005546:	bf00      	nop
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_NVIC_EnableIRQ>:
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	4603      	mov	r3, r0
 8005556:	71fb      	strb	r3, [r7, #7]
 8005558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff ff3d 	bl	80053dc <__NVIC_EnableIRQ>
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_NVIC_SystemReset>:
 800556a:	b580      	push	{r7, lr}
 800556c:	af00      	add	r7, sp, #0
 800556e:	f7ff ffb1 	bl	80054d4 <__NVIC_SystemReset>

08005572 <HAL_DMA_Abort>:
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	f7ff fc68 	bl	8004e54 <HAL_GetTick>
 8005584:	60b8      	str	r0, [r7, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d008      	beq.n	80055a4 <HAL_DMA_Abort+0x32>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2280      	movs	r2, #128	; 0x80
 8005596:	655a      	str	r2, [r3, #84]	; 0x54
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80055a0:	2301      	movs	r3, #1
 80055a2:	e052      	b.n	800564a <HAL_DMA_Abort+0xd8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0216 	bic.w	r2, r2, #22
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c2:	615a      	str	r2, [r3, #20]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d103      	bne.n	80055d4 <HAL_DMA_Abort+0x62>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <HAL_DMA_Abort+0x72>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0208 	bic.w	r2, r2, #8
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0201 	bic.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e013      	b.n	800561e <HAL_DMA_Abort+0xac>
 80055f6:	f7ff fc2d 	bl	8004e54 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b05      	cmp	r3, #5
 8005602:	d90c      	bls.n	800561e <HAL_DMA_Abort+0xac>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	655a      	str	r2, [r3, #84]	; 0x54
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2203      	movs	r2, #3
 800560e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800561a:	2303      	movs	r3, #3
 800561c:	e015      	b.n	800564a <HAL_DMA_Abort+0xd8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e4      	bne.n	80055f6 <HAL_DMA_Abort+0x84>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005630:	223f      	movs	r2, #63	; 0x3f
 8005632:	409a      	lsls	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005648:	2300      	movs	r3, #0
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_DMA_Abort_IT>:
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d004      	beq.n	8005670 <HAL_DMA_Abort_IT+0x1e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2280      	movs	r2, #128	; 0x80
 800566a:	655a      	str	r2, [r3, #84]	; 0x54
 800566c:	2301      	movs	r3, #1
 800566e:	e00c      	b.n	800568a <HAL_DMA_Abort_IT+0x38>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2205      	movs	r2, #5
 8005674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	2300      	movs	r3, #0
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <HAL_GPIO_Init>:
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	; 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	2300      	movs	r3, #0
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	2300      	movs	r3, #0
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	e16b      	b.n	800598c <HAL_GPIO_Init+0x2f4>
 80056b4:	2201      	movs	r2, #1
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4013      	ands	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	f040 815a 	bne.w	8005986 <HAL_GPIO_Init+0x2ee>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d005      	beq.n	80056ea <HAL_GPIO_Init+0x52>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d130      	bne.n	800574c <HAL_GPIO_Init+0xb4>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	2203      	movs	r2, #3
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43db      	mvns	r3, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4013      	ands	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4313      	orrs	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	609a      	str	r2, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	2201      	movs	r2, #1
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43db      	mvns	r3, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	f003 0201 	and.w	r2, r3, #1
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4313      	orrs	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	605a      	str	r2, [r3, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 0303 	and.w	r3, r3, #3
 8005754:	2b03      	cmp	r3, #3
 8005756:	d017      	beq.n	8005788 <HAL_GPIO_Init+0xf0>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	2203      	movs	r2, #3
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4013      	ands	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4313      	orrs	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	60da      	str	r2, [r3, #12]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d123      	bne.n	80057dc <HAL_GPIO_Init+0x144>
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	08da      	lsrs	r2, r3, #3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3208      	adds	r2, #8
 800579c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	220f      	movs	r2, #15
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	43db      	mvns	r3, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4013      	ands	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	08da      	lsrs	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3208      	adds	r2, #8
 80057d6:	69b9      	ldr	r1, [r7, #24]
 80057d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	2203      	movs	r2, #3
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f003 0203 	and.w	r2, r3, #3
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4313      	orrs	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80b4 	beq.w	8005986 <HAL_GPIO_Init+0x2ee>
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	4b60      	ldr	r3, [pc, #384]	; (80059a4 <HAL_GPIO_Init+0x30c>)
 8005824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005826:	4a5f      	ldr	r2, [pc, #380]	; (80059a4 <HAL_GPIO_Init+0x30c>)
 8005828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800582c:	6453      	str	r3, [r2, #68]	; 0x44
 800582e:	4b5d      	ldr	r3, [pc, #372]	; (80059a4 <HAL_GPIO_Init+0x30c>)
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4a5b      	ldr	r2, [pc, #364]	; (80059a8 <HAL_GPIO_Init+0x310>)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	3302      	adds	r3, #2
 8005842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	220f      	movs	r2, #15
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4013      	ands	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a52      	ldr	r2, [pc, #328]	; (80059ac <HAL_GPIO_Init+0x314>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d02b      	beq.n	80058be <HAL_GPIO_Init+0x226>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a51      	ldr	r2, [pc, #324]	; (80059b0 <HAL_GPIO_Init+0x318>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d025      	beq.n	80058ba <HAL_GPIO_Init+0x222>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a50      	ldr	r2, [pc, #320]	; (80059b4 <HAL_GPIO_Init+0x31c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d01f      	beq.n	80058b6 <HAL_GPIO_Init+0x21e>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a4f      	ldr	r2, [pc, #316]	; (80059b8 <HAL_GPIO_Init+0x320>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d019      	beq.n	80058b2 <HAL_GPIO_Init+0x21a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a4e      	ldr	r2, [pc, #312]	; (80059bc <HAL_GPIO_Init+0x324>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <HAL_GPIO_Init+0x216>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a4d      	ldr	r2, [pc, #308]	; (80059c0 <HAL_GPIO_Init+0x328>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00d      	beq.n	80058aa <HAL_GPIO_Init+0x212>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a4c      	ldr	r2, [pc, #304]	; (80059c4 <HAL_GPIO_Init+0x32c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <HAL_GPIO_Init+0x20e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a4b      	ldr	r2, [pc, #300]	; (80059c8 <HAL_GPIO_Init+0x330>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d101      	bne.n	80058a2 <HAL_GPIO_Init+0x20a>
 800589e:	2307      	movs	r3, #7
 80058a0:	e00e      	b.n	80058c0 <HAL_GPIO_Init+0x228>
 80058a2:	2308      	movs	r3, #8
 80058a4:	e00c      	b.n	80058c0 <HAL_GPIO_Init+0x228>
 80058a6:	2306      	movs	r3, #6
 80058a8:	e00a      	b.n	80058c0 <HAL_GPIO_Init+0x228>
 80058aa:	2305      	movs	r3, #5
 80058ac:	e008      	b.n	80058c0 <HAL_GPIO_Init+0x228>
 80058ae:	2304      	movs	r3, #4
 80058b0:	e006      	b.n	80058c0 <HAL_GPIO_Init+0x228>
 80058b2:	2303      	movs	r3, #3
 80058b4:	e004      	b.n	80058c0 <HAL_GPIO_Init+0x228>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e002      	b.n	80058c0 <HAL_GPIO_Init+0x228>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <HAL_GPIO_Init+0x228>
 80058be:	2300      	movs	r3, #0
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	f002 0203 	and.w	r2, r2, #3
 80058c6:	0092      	lsls	r2, r2, #2
 80058c8:	4093      	lsls	r3, r2
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	4935      	ldr	r1, [pc, #212]	; (80059a8 <HAL_GPIO_Init+0x310>)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	089b      	lsrs	r3, r3, #2
 80058d6:	3302      	adds	r3, #2
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80058de:	4b3b      	ldr	r3, [pc, #236]	; (80059cc <HAL_GPIO_Init+0x334>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	43db      	mvns	r3, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4013      	ands	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_GPIO_Init+0x26a>
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	4a32      	ldr	r2, [pc, #200]	; (80059cc <HAL_GPIO_Init+0x334>)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	4b30      	ldr	r3, [pc, #192]	; (80059cc <HAL_GPIO_Init+0x334>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	43db      	mvns	r3, r3
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4013      	ands	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <HAL_GPIO_Init+0x294>
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
 800592c:	4a27      	ldr	r2, [pc, #156]	; (80059cc <HAL_GPIO_Init+0x334>)
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	6053      	str	r3, [r2, #4]
 8005932:	4b26      	ldr	r3, [pc, #152]	; (80059cc <HAL_GPIO_Init+0x334>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	43db      	mvns	r3, r3
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	4013      	ands	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_GPIO_Init+0x2be>
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	4a1d      	ldr	r2, [pc, #116]	; (80059cc <HAL_GPIO_Init+0x334>)
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	6093      	str	r3, [r2, #8]
 800595c:	4b1b      	ldr	r3, [pc, #108]	; (80059cc <HAL_GPIO_Init+0x334>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	43db      	mvns	r3, r3
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	4013      	ands	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_GPIO_Init+0x2e8>
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	4a12      	ldr	r2, [pc, #72]	; (80059cc <HAL_GPIO_Init+0x334>)
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	60d3      	str	r3, [r2, #12]
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	3301      	adds	r3, #1
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	2b0f      	cmp	r3, #15
 8005990:	f67f ae90 	bls.w	80056b4 <HAL_GPIO_Init+0x1c>
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	3724      	adds	r7, #36	; 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40023800 	.word	0x40023800
 80059a8:	40013800 	.word	0x40013800
 80059ac:	40020000 	.word	0x40020000
 80059b0:	40020400 	.word	0x40020400
 80059b4:	40020800 	.word	0x40020800
 80059b8:	40020c00 	.word	0x40020c00
 80059bc:	40021000 	.word	0x40021000
 80059c0:	40021400 	.word	0x40021400
 80059c4:	40021800 	.word	0x40021800
 80059c8:	40021c00 	.word	0x40021c00
 80059cc:	40013c00 	.word	0x40013c00

080059d0 <HAL_GPIO_ReadPin>:
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	807b      	strh	r3, [r7, #2]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	887b      	ldrh	r3, [r7, #2]
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_GPIO_ReadPin+0x1e>
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
 80059ec:	e001      	b.n	80059f2 <HAL_GPIO_ReadPin+0x22>
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_GPIO_WritePin>:
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	807b      	strh	r3, [r7, #2]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	707b      	strb	r3, [r7, #1]
 8005a10:	787b      	ldrb	r3, [r7, #1]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_WritePin+0x1e>
 8005a16:	887a      	ldrh	r2, [r7, #2]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	619a      	str	r2, [r3, #24]
 8005a1c:	e003      	b.n	8005a26 <HAL_GPIO_WritePin+0x26>
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	041a      	lsls	r2, r3, #16
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	619a      	str	r2, [r3, #24]
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HAL_GPIO_TogglePin>:
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	807b      	strh	r3, [r7, #2]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	887a      	ldrh	r2, [r7, #2]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	041a      	lsls	r2, r3, #16
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	43d9      	mvns	r1, r3
 8005a50:	887b      	ldrh	r3, [r7, #2]
 8005a52:	400b      	ands	r3, r1
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	619a      	str	r2, [r3, #24]
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <HAL_I2C_Init>:
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_I2C_Init+0x12>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e12b      	b.n	8005cd2 <HAL_I2C_Init+0x26a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_I2C_Init+0x2c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fe fdb6 	bl	8004600 <HAL_I2C_MspInit>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2224      	movs	r2, #36	; 0x24
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f000 fdae 	bl	800662c <HAL_RCC_GetPCLK1Freq>
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	4a81      	ldr	r2, [pc, #516]	; (8005cdc <HAL_I2C_Init+0x274>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d807      	bhi.n	8005aec <HAL_I2C_Init+0x84>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a80      	ldr	r2, [pc, #512]	; (8005ce0 <HAL_I2C_Init+0x278>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	bf94      	ite	ls
 8005ae4:	2301      	movls	r3, #1
 8005ae6:	2300      	movhi	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	e006      	b.n	8005afa <HAL_I2C_Init+0x92>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a7d      	ldr	r2, [pc, #500]	; (8005ce4 <HAL_I2C_Init+0x27c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	bf94      	ite	ls
 8005af4:	2301      	movls	r3, #1
 8005af6:	2300      	movhi	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_I2C_Init+0x9a>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e0e7      	b.n	8005cd2 <HAL_I2C_Init+0x26a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a78      	ldr	r2, [pc, #480]	; (8005ce8 <HAL_I2C_Init+0x280>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	0c9b      	lsrs	r3, r3, #18
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4a6a      	ldr	r2, [pc, #424]	; (8005cdc <HAL_I2C_Init+0x274>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d802      	bhi.n	8005b3c <HAL_I2C_Init+0xd4>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	e009      	b.n	8005b50 <HAL_I2C_Init+0xe8>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
 8005b46:	4a69      	ldr	r2, [pc, #420]	; (8005cec <HAL_I2C_Init+0x284>)
 8005b48:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4c:	099b      	lsrs	r3, r3, #6
 8005b4e:	3301      	adds	r3, #1
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	430b      	orrs	r3, r1
 8005b56:	6213      	str	r3, [r2, #32]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	495c      	ldr	r1, [pc, #368]	; (8005cdc <HAL_I2C_Init+0x274>)
 8005b6c:	428b      	cmp	r3, r1
 8005b6e:	d819      	bhi.n	8005ba4 <HAL_I2C_Init+0x13c>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	1e59      	subs	r1, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b7e:	1c59      	adds	r1, r3, #1
 8005b80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b84:	400b      	ands	r3, r1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <HAL_I2C_Init+0x138>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1e59      	subs	r1, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9e:	e051      	b.n	8005c44 <HAL_I2C_Init+0x1dc>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	e04f      	b.n	8005c44 <HAL_I2C_Init+0x1dc>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d111      	bne.n	8005bd0 <HAL_I2C_Init+0x168>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	1e58      	subs	r0, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6859      	ldr	r1, [r3, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	440b      	add	r3, r1
 8005bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	e012      	b.n	8005bf6 <HAL_I2C_Init+0x18e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	1e58      	subs	r0, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6859      	ldr	r1, [r3, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	0099      	lsls	r1, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005be6:	3301      	adds	r3, #1
 8005be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bf0c      	ite	eq
 8005bf0:	2301      	moveq	r3, #1
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_I2C_Init+0x196>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e022      	b.n	8005c44 <HAL_I2C_Init+0x1dc>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10e      	bne.n	8005c24 <HAL_I2C_Init+0x1bc>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1e58      	subs	r0, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6859      	ldr	r1, [r3, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	440b      	add	r3, r1
 8005c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c22:	e00f      	b.n	8005c44 <HAL_I2C_Init+0x1dc>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1e58      	subs	r0, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6859      	ldr	r1, [r3, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	0099      	lsls	r1, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	6809      	ldr	r1, [r1, #0]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61cb      	str	r3, [r1, #28]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69da      	ldr	r2, [r3, #28]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6911      	ldr	r1, [r2, #16]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	68d2      	ldr	r2, [r2, #12]
 8005c7e:	4311      	orrs	r1, r2
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	430b      	orrs	r3, r1
 8005c86:	6093      	str	r3, [r2, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	60da      	str	r2, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	000186a0 	.word	0x000186a0
 8005ce0:	001e847f 	.word	0x001e847f
 8005ce4:	003d08ff 	.word	0x003d08ff
 8005ce8:	431bde83 	.word	0x431bde83
 8005cec:	10624dd3 	.word	0x10624dd3

08005cf0 <HAL_IWDG_Init>:
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_IWDG_Init+0x12>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e034      	b.n	8005d6c <HAL_IWDG_Init+0x7c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f245 5255 	movw	r2, #21845	; 0x5555
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6852      	ldr	r2, [r2, #4]
 8005d1e:	605a      	str	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6892      	ldr	r2, [r2, #8]
 8005d28:	609a      	str	r2, [r3, #8]
 8005d2a:	f7ff f893 	bl	8004e54 <HAL_GetTick>
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	e00f      	b.n	8005d52 <HAL_IWDG_Init+0x62>
 8005d32:	f7ff f88f 	bl	8004e54 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b31      	cmp	r3, #49	; 0x31
 8005d3e:	d908      	bls.n	8005d52 <HAL_IWDG_Init+0x62>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_IWDG_Init+0x62>
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e00c      	b.n	8005d6c <HAL_IWDG_Init+0x7c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e8      	bne.n	8005d32 <HAL_IWDG_Init+0x42>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_IWDG_Refresh>:
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	2300      	movs	r3, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_RCC_OscConfig>:
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_RCC_OscConfig+0x12>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e264      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d075      	beq.n	8005e9e <HAL_RCC_OscConfig+0x10a>
 8005db2:	4ba3      	ldr	r3, [pc, #652]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 030c 	and.w	r3, r3, #12
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d00c      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x44>
 8005dbe:	4ba0      	ldr	r3, [pc, #640]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d112      	bne.n	8005df0 <HAL_RCC_OscConfig+0x5c>
 8005dca:	4b9d      	ldr	r3, [pc, #628]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dd6:	d10b      	bne.n	8005df0 <HAL_RCC_OscConfig+0x5c>
 8005dd8:	4b99      	ldr	r3, [pc, #612]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d05b      	beq.n	8005e9c <HAL_RCC_OscConfig+0x108>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d157      	bne.n	8005e9c <HAL_RCC_OscConfig+0x108>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e23f      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df8:	d106      	bne.n	8005e08 <HAL_RCC_OscConfig+0x74>
 8005dfa:	4b91      	ldr	r3, [pc, #580]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a90      	ldr	r2, [pc, #576]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	e01d      	b.n	8005e44 <HAL_RCC_OscConfig+0xb0>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e10:	d10c      	bne.n	8005e2c <HAL_RCC_OscConfig+0x98>
 8005e12:	4b8b      	ldr	r3, [pc, #556]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a8a      	ldr	r2, [pc, #552]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	4b88      	ldr	r3, [pc, #544]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a87      	ldr	r2, [pc, #540]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e00b      	b.n	8005e44 <HAL_RCC_OscConfig+0xb0>
 8005e2c:	4b84      	ldr	r3, [pc, #528]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a83      	ldr	r2, [pc, #524]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	4b81      	ldr	r3, [pc, #516]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a80      	ldr	r2, [pc, #512]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d013      	beq.n	8005e74 <HAL_RCC_OscConfig+0xe0>
 8005e4c:	f7ff f802 	bl	8004e54 <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0xd2>
 8005e54:	f7fe fffe 	bl	8004e54 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	; 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0xd2>
 8005e62:	2303      	movs	r3, #3
 8005e64:	e204      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8005e66:	4b76      	ldr	r3, [pc, #472]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCC_OscConfig+0xc0>
 8005e72:	e014      	b.n	8005e9e <HAL_RCC_OscConfig+0x10a>
 8005e74:	f7fe ffee 	bl	8004e54 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0xfa>
 8005e7c:	f7fe ffea 	bl	8004e54 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b64      	cmp	r3, #100	; 0x64
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0xfa>
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e1f0      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8005e8e:	4b6c      	ldr	r3, [pc, #432]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0xe8>
 8005e9a:	e000      	b.n	8005e9e <HAL_RCC_OscConfig+0x10a>
 8005e9c:	bf00      	nop
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d063      	beq.n	8005f72 <HAL_RCC_OscConfig+0x1de>
 8005eaa:	4b65      	ldr	r3, [pc, #404]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 030c 	and.w	r3, r3, #12
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <HAL_RCC_OscConfig+0x13a>
 8005eb6:	4b62      	ldr	r3, [pc, #392]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	2b08      	cmp	r3, #8
 8005ec0:	d11c      	bne.n	8005efc <HAL_RCC_OscConfig+0x168>
 8005ec2:	4b5f      	ldr	r3, [pc, #380]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d116      	bne.n	8005efc <HAL_RCC_OscConfig+0x168>
 8005ece:	4b5c      	ldr	r3, [pc, #368]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x152>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d001      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x152>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e1c4      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8005ee6:	4b56      	ldr	r3, [pc, #344]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4952      	ldr	r1, [pc, #328]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	600b      	str	r3, [r1, #0]
 8005efa:	e03a      	b.n	8005f72 <HAL_RCC_OscConfig+0x1de>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d020      	beq.n	8005f46 <HAL_RCC_OscConfig+0x1b2>
 8005f04:	4b4f      	ldr	r3, [pc, #316]	; (8006044 <HAL_RCC_OscConfig+0x2b0>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	f7fe ffa3 	bl	8004e54 <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x190>
 8005f12:	f7fe ff9f 	bl	8004e54 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x190>
 8005f20:	2303      	movs	r3, #3
 8005f22:	e1a5      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8005f24:	4b46      	ldr	r3, [pc, #280]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f0      	beq.n	8005f12 <HAL_RCC_OscConfig+0x17e>
 8005f30:	4b43      	ldr	r3, [pc, #268]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4940      	ldr	r1, [pc, #256]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	600b      	str	r3, [r1, #0]
 8005f44:	e015      	b.n	8005f72 <HAL_RCC_OscConfig+0x1de>
 8005f46:	4b3f      	ldr	r3, [pc, #252]	; (8006044 <HAL_RCC_OscConfig+0x2b0>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	f7fe ff82 	bl	8004e54 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x1d2>
 8005f54:	f7fe ff7e 	bl	8004e54 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x1d2>
 8005f62:	2303      	movs	r3, #3
 8005f64:	e184      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8005f66:	4b36      	ldr	r3, [pc, #216]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1f0      	bne.n	8005f54 <HAL_RCC_OscConfig+0x1c0>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d030      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x24c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d016      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x220>
 8005f86:	4b30      	ldr	r3, [pc, #192]	; (8006048 <HAL_RCC_OscConfig+0x2b4>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	f7fe ff62 	bl	8004e54 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x212>
 8005f94:	f7fe ff5e 	bl	8004e54 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x212>
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e164      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8005fa6:	4b26      	ldr	r3, [pc, #152]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f0      	beq.n	8005f94 <HAL_RCC_OscConfig+0x200>
 8005fb2:	e015      	b.n	8005fe0 <HAL_RCC_OscConfig+0x24c>
 8005fb4:	4b24      	ldr	r3, [pc, #144]	; (8006048 <HAL_RCC_OscConfig+0x2b4>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	f7fe ff4b 	bl	8004e54 <HAL_GetTick>
 8005fbe:	6138      	str	r0, [r7, #16]
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x240>
 8005fc2:	f7fe ff47 	bl	8004e54 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x240>
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e14d      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f0      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x22e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80a0 	beq.w	800612e <HAL_RCC_OscConfig+0x39a>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	75fb      	strb	r3, [r7, #23]
 8005ff2:	4b13      	ldr	r3, [pc, #76]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10f      	bne.n	800601e <HAL_RCC_OscConfig+0x28a>
 8005ffe:	2300      	movs	r3, #0
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	4a0e      	ldr	r2, [pc, #56]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8006008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800600c:	6413      	str	r3, [r2, #64]	; 0x40
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <HAL_RCC_OscConfig+0x2ac>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006016:	60bb      	str	r3, [r7, #8]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2301      	movs	r3, #1
 800601c:	75fb      	strb	r3, [r7, #23]
 800601e:	4b0b      	ldr	r3, [pc, #44]	; (800604c <HAL_RCC_OscConfig+0x2b8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006026:	2b00      	cmp	r3, #0
 8006028:	d121      	bne.n	800606e <HAL_RCC_OscConfig+0x2da>
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <HAL_RCC_OscConfig+0x2b8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a07      	ldr	r2, [pc, #28]	; (800604c <HAL_RCC_OscConfig+0x2b8>)
 8006030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	f7fe ff0d 	bl	8004e54 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]
 800603c:	e011      	b.n	8006062 <HAL_RCC_OscConfig+0x2ce>
 800603e:	bf00      	nop
 8006040:	40023800 	.word	0x40023800
 8006044:	42470000 	.word	0x42470000
 8006048:	42470e80 	.word	0x42470e80
 800604c:	40007000 	.word	0x40007000
 8006050:	f7fe ff00 	bl	8004e54 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x2ce>
 800605e:	2303      	movs	r3, #3
 8006060:	e106      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8006062:	4b85      	ldr	r3, [pc, #532]	; (8006278 <HAL_RCC_OscConfig+0x4e4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f0      	beq.n	8006050 <HAL_RCC_OscConfig+0x2bc>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d106      	bne.n	8006084 <HAL_RCC_OscConfig+0x2f0>
 8006076:	4b81      	ldr	r3, [pc, #516]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607a:	4a80      	ldr	r2, [pc, #512]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	6713      	str	r3, [r2, #112]	; 0x70
 8006082:	e01c      	b.n	80060be <HAL_RCC_OscConfig+0x32a>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b05      	cmp	r3, #5
 800608a:	d10c      	bne.n	80060a6 <HAL_RCC_OscConfig+0x312>
 800608c:	4b7b      	ldr	r3, [pc, #492]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	4a7a      	ldr	r2, [pc, #488]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006092:	f043 0304 	orr.w	r3, r3, #4
 8006096:	6713      	str	r3, [r2, #112]	; 0x70
 8006098:	4b78      	ldr	r3, [pc, #480]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609c:	4a77      	ldr	r2, [pc, #476]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	6713      	str	r3, [r2, #112]	; 0x70
 80060a4:	e00b      	b.n	80060be <HAL_RCC_OscConfig+0x32a>
 80060a6:	4b75      	ldr	r3, [pc, #468]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	4a74      	ldr	r2, [pc, #464]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	6713      	str	r3, [r2, #112]	; 0x70
 80060b2:	4b72      	ldr	r3, [pc, #456]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	4a71      	ldr	r2, [pc, #452]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060b8:	f023 0304 	bic.w	r3, r3, #4
 80060bc:	6713      	str	r3, [r2, #112]	; 0x70
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d015      	beq.n	80060f2 <HAL_RCC_OscConfig+0x35e>
 80060c6:	f7fe fec5 	bl	8004e54 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]
 80060cc:	e00a      	b.n	80060e4 <HAL_RCC_OscConfig+0x350>
 80060ce:	f7fe fec1 	bl	8004e54 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060dc:	4293      	cmp	r3, r2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x350>
 80060e0:	2303      	movs	r3, #3
 80060e2:	e0c5      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 80060e4:	4b65      	ldr	r3, [pc, #404]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80060e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0ee      	beq.n	80060ce <HAL_RCC_OscConfig+0x33a>
 80060f0:	e014      	b.n	800611c <HAL_RCC_OscConfig+0x388>
 80060f2:	f7fe feaf 	bl	8004e54 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]
 80060f8:	e00a      	b.n	8006110 <HAL_RCC_OscConfig+0x37c>
 80060fa:	f7fe feab 	bl	8004e54 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f241 3288 	movw	r2, #5000	; 0x1388
 8006108:	4293      	cmp	r3, r2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x37c>
 800610c:	2303      	movs	r3, #3
 800610e:	e0af      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 8006110:	4b5a      	ldr	r3, [pc, #360]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1ee      	bne.n	80060fa <HAL_RCC_OscConfig+0x366>
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d105      	bne.n	800612e <HAL_RCC_OscConfig+0x39a>
 8006122:	4b56      	ldr	r3, [pc, #344]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	4a55      	ldr	r2, [pc, #340]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 8006128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612c:	6413      	str	r3, [r2, #64]	; 0x40
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 809b 	beq.w	800626e <HAL_RCC_OscConfig+0x4da>
 8006138:	4b50      	ldr	r3, [pc, #320]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 030c 	and.w	r3, r3, #12
 8006140:	2b08      	cmp	r3, #8
 8006142:	d05c      	beq.n	80061fe <HAL_RCC_OscConfig+0x46a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d141      	bne.n	80061d0 <HAL_RCC_OscConfig+0x43c>
 800614c:	4b4c      	ldr	r3, [pc, #304]	; (8006280 <HAL_RCC_OscConfig+0x4ec>)
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	f7fe fe7f 	bl	8004e54 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x3d8>
 800615a:	f7fe fe7b 	bl	8004e54 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x3d8>
 8006168:	2303      	movs	r3, #3
 800616a:	e081      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 800616c:	4b43      	ldr	r3, [pc, #268]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1f0      	bne.n	800615a <HAL_RCC_OscConfig+0x3c6>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	019b      	lsls	r3, r3, #6
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	085b      	lsrs	r3, r3, #1
 8006190:	3b01      	subs	r3, #1
 8006192:	041b      	lsls	r3, r3, #16
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	061b      	lsls	r3, r3, #24
 800619c:	4937      	ldr	r1, [pc, #220]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	604b      	str	r3, [r1, #4]
 80061a2:	4b37      	ldr	r3, [pc, #220]	; (8006280 <HAL_RCC_OscConfig+0x4ec>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	f7fe fe54 	bl	8004e54 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x42e>
 80061b0:	f7fe fe50 	bl	8004e54 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x42e>
 80061be:	2303      	movs	r3, #3
 80061c0:	e056      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 80061c2:	4b2e      	ldr	r3, [pc, #184]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f0      	beq.n	80061b0 <HAL_RCC_OscConfig+0x41c>
 80061ce:	e04e      	b.n	800626e <HAL_RCC_OscConfig+0x4da>
 80061d0:	4b2b      	ldr	r3, [pc, #172]	; (8006280 <HAL_RCC_OscConfig+0x4ec>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	f7fe fe3d 	bl	8004e54 <HAL_GetTick>
 80061da:	6138      	str	r0, [r7, #16]
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x45c>
 80061de:	f7fe fe39 	bl	8004e54 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x45c>
 80061ec:	2303      	movs	r3, #3
 80061ee:	e03f      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 80061f0:	4b22      	ldr	r3, [pc, #136]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1f0      	bne.n	80061de <HAL_RCC_OscConfig+0x44a>
 80061fc:	e037      	b.n	800626e <HAL_RCC_OscConfig+0x4da>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_RCC_OscConfig+0x476>
 8006206:	2301      	movs	r3, #1
 8006208:	e032      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 800620a:	4b1c      	ldr	r3, [pc, #112]	; (800627c <HAL_RCC_OscConfig+0x4e8>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d028      	beq.n	800626a <HAL_RCC_OscConfig+0x4d6>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	429a      	cmp	r2, r3
 8006224:	d121      	bne.n	800626a <HAL_RCC_OscConfig+0x4d6>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	429a      	cmp	r2, r3
 8006232:	d11a      	bne.n	800626a <HAL_RCC_OscConfig+0x4d6>
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800623a:	4013      	ands	r3, r2
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006240:	0192      	lsls	r2, r2, #6
 8006242:	4293      	cmp	r3, r2
 8006244:	d111      	bne.n	800626a <HAL_RCC_OscConfig+0x4d6>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	3b01      	subs	r3, #1
 8006254:	041b      	lsls	r3, r3, #16
 8006256:	429a      	cmp	r2, r3
 8006258:	d107      	bne.n	800626a <HAL_RCC_OscConfig+0x4d6>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	061b      	lsls	r3, r3, #24
 8006266:	429a      	cmp	r2, r3
 8006268:	d001      	beq.n	800626e <HAL_RCC_OscConfig+0x4da>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <HAL_RCC_OscConfig+0x4dc>
 800626e:	2300      	movs	r3, #0
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	40007000 	.word	0x40007000
 800627c:	40023800 	.word	0x40023800
 8006280:	42470060 	.word	0x42470060

08006284 <HAL_RCC_ClockConfig>:
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_RCC_ClockConfig+0x14>
 8006294:	2301      	movs	r3, #1
 8006296:	e0cc      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
 8006298:	4b68      	ldr	r3, [pc, #416]	; (800643c <HAL_RCC_ClockConfig+0x1b8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d90c      	bls.n	80062c0 <HAL_RCC_ClockConfig+0x3c>
 80062a6:	4b65      	ldr	r3, [pc, #404]	; (800643c <HAL_RCC_ClockConfig+0x1b8>)
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	4b63      	ldr	r3, [pc, #396]	; (800643c <HAL_RCC_ClockConfig+0x1b8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d001      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x3c>
 80062bc:	2301      	movs	r3, #1
 80062be:	e0b8      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d020      	beq.n	800630e <HAL_RCC_ClockConfig+0x8a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_RCC_ClockConfig+0x60>
 80062d8:	4b59      	ldr	r3, [pc, #356]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	4a58      	ldr	r2, [pc, #352]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062e2:	6093      	str	r3, [r2, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_ClockConfig+0x78>
 80062f0:	4b53      	ldr	r3, [pc, #332]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	4a52      	ldr	r2, [pc, #328]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062fa:	6093      	str	r3, [r2, #8]
 80062fc:	4b50      	ldr	r3, [pc, #320]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	494d      	ldr	r1, [pc, #308]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d044      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x120>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d107      	bne.n	8006332 <HAL_RCC_ClockConfig+0xae>
 8006322:	4b47      	ldr	r3, [pc, #284]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d119      	bne.n	8006362 <HAL_RCC_ClockConfig+0xde>
 800632e:	2301      	movs	r3, #1
 8006330:	e07f      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d003      	beq.n	8006342 <HAL_RCC_ClockConfig+0xbe>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d107      	bne.n	8006352 <HAL_RCC_ClockConfig+0xce>
 8006342:	4b3f      	ldr	r3, [pc, #252]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <HAL_RCC_ClockConfig+0xde>
 800634e:	2301      	movs	r3, #1
 8006350:	e06f      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
 8006352:	4b3b      	ldr	r3, [pc, #236]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_ClockConfig+0xde>
 800635e:	2301      	movs	r3, #1
 8006360:	e067      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
 8006362:	4b37      	ldr	r3, [pc, #220]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f023 0203 	bic.w	r2, r3, #3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	4934      	ldr	r1, [pc, #208]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	4313      	orrs	r3, r2
 8006372:	608b      	str	r3, [r1, #8]
 8006374:	f7fe fd6e 	bl	8004e54 <HAL_GetTick>
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	e00a      	b.n	8006392 <HAL_RCC_ClockConfig+0x10e>
 800637c:	f7fe fd6a 	bl	8004e54 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	f241 3288 	movw	r2, #5000	; 0x1388
 800638a:	4293      	cmp	r3, r2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_ClockConfig+0x10e>
 800638e:	2303      	movs	r3, #3
 8006390:	e04f      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
 8006392:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 020c 	and.w	r2, r3, #12
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d1eb      	bne.n	800637c <HAL_RCC_ClockConfig+0xf8>
 80063a4:	4b25      	ldr	r3, [pc, #148]	; (800643c <HAL_RCC_ClockConfig+0x1b8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d20c      	bcs.n	80063cc <HAL_RCC_ClockConfig+0x148>
 80063b2:	4b22      	ldr	r3, [pc, #136]	; (800643c <HAL_RCC_ClockConfig+0x1b8>)
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	4b20      	ldr	r3, [pc, #128]	; (800643c <HAL_RCC_ClockConfig+0x1b8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_ClockConfig+0x148>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e032      	b.n	8006432 <HAL_RCC_ClockConfig+0x1ae>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <HAL_RCC_ClockConfig+0x166>
 80063d8:	4b19      	ldr	r3, [pc, #100]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4916      	ldr	r1, [pc, #88]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	608b      	str	r3, [r1, #8]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_RCC_ClockConfig+0x186>
 80063f6:	4b12      	ldr	r3, [pc, #72]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	490e      	ldr	r1, [pc, #56]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	4313      	orrs	r3, r2
 8006408:	608b      	str	r3, [r1, #8]
 800640a:	f000 f821 	bl	8006450 <HAL_RCC_GetSysClockFreq>
 800640e:	4602      	mov	r2, r0
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	490a      	ldr	r1, [pc, #40]	; (8006444 <HAL_RCC_ClockConfig+0x1c0>)
 800641c:	5ccb      	ldrb	r3, [r1, r3]
 800641e:	fa22 f303 	lsr.w	r3, r2, r3
 8006422:	4a09      	ldr	r2, [pc, #36]	; (8006448 <HAL_RCC_ClockConfig+0x1c4>)
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	4b09      	ldr	r3, [pc, #36]	; (800644c <HAL_RCC_ClockConfig+0x1c8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe fa74 	bl	8004918 <HAL_InitTick>
 8006430:	2300      	movs	r3, #0
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40023c00 	.word	0x40023c00
 8006440:	40023800 	.word	0x40023800
 8006444:	0800cb48 	.word	0x0800cb48
 8006448:	20000004 	.word	0x20000004
 800644c:	20000008 	.word	0x20000008

08006450 <HAL_RCC_GetSysClockFreq>:
 8006450:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	2300      	movs	r3, #0
 800645a:	607b      	str	r3, [r7, #4]
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	2300      	movs	r3, #0
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	60bb      	str	r3, [r7, #8]
 8006468:	4b67      	ldr	r3, [pc, #412]	; (8006608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 030c 	and.w	r3, r3, #12
 8006470:	2b08      	cmp	r3, #8
 8006472:	d00d      	beq.n	8006490 <HAL_RCC_GetSysClockFreq+0x40>
 8006474:	2b08      	cmp	r3, #8
 8006476:	f200 80bd 	bhi.w	80065f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_RCC_GetSysClockFreq+0x34>
 800647e:	2b04      	cmp	r3, #4
 8006480:	d003      	beq.n	800648a <HAL_RCC_GetSysClockFreq+0x3a>
 8006482:	e0b7      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006484:	4b61      	ldr	r3, [pc, #388]	; (800660c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006486:	60bb      	str	r3, [r7, #8]
 8006488:	e0b7      	b.n	80065fa <HAL_RCC_GetSysClockFreq+0x1aa>
 800648a:	4b61      	ldr	r3, [pc, #388]	; (8006610 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800648c:	60bb      	str	r3, [r7, #8]
 800648e:	e0b4      	b.n	80065fa <HAL_RCC_GetSysClockFreq+0x1aa>
 8006490:	4b5d      	ldr	r3, [pc, #372]	; (8006608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006498:	607b      	str	r3, [r7, #4]
 800649a:	4b5b      	ldr	r3, [pc, #364]	; (8006608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d04d      	beq.n	8006542 <HAL_RCC_GetSysClockFreq+0xf2>
 80064a6:	4b58      	ldr	r3, [pc, #352]	; (8006608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	099b      	lsrs	r3, r3, #6
 80064ac:	461a      	mov	r2, r3
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064b6:	f04f 0100 	mov.w	r1, #0
 80064ba:	ea02 0800 	and.w	r8, r2, r0
 80064be:	ea03 0901 	and.w	r9, r3, r1
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	014b      	lsls	r3, r1, #5
 80064d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064d4:	0142      	lsls	r2, r0, #5
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	ebb0 0008 	subs.w	r0, r0, r8
 80064de:	eb61 0109 	sbc.w	r1, r1, r9
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	018b      	lsls	r3, r1, #6
 80064ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064f0:	0182      	lsls	r2, r0, #6
 80064f2:	1a12      	subs	r2, r2, r0
 80064f4:	eb63 0301 	sbc.w	r3, r3, r1
 80064f8:	f04f 0000 	mov.w	r0, #0
 80064fc:	f04f 0100 	mov.w	r1, #0
 8006500:	00d9      	lsls	r1, r3, #3
 8006502:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006506:	00d0      	lsls	r0, r2, #3
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	eb12 0208 	adds.w	r2, r2, r8
 8006510:	eb43 0309 	adc.w	r3, r3, r9
 8006514:	f04f 0000 	mov.w	r0, #0
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	0259      	lsls	r1, r3, #9
 800651e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006522:	0250      	lsls	r0, r2, #9
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4610      	mov	r0, r2
 800652a:	4619      	mov	r1, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	461a      	mov	r2, r3
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	f7fa fb08 	bl	8000b48 <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4613      	mov	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	e04a      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x188>
 8006542:	4b31      	ldr	r3, [pc, #196]	; (8006608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	461a      	mov	r2, r3
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006552:	f04f 0100 	mov.w	r1, #0
 8006556:	ea02 0400 	and.w	r4, r2, r0
 800655a:	ea03 0501 	and.w	r5, r3, r1
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	f04f 0300 	mov.w	r3, #0
 800656a:	014b      	lsls	r3, r1, #5
 800656c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006570:	0142      	lsls	r2, r0, #5
 8006572:	4610      	mov	r0, r2
 8006574:	4619      	mov	r1, r3
 8006576:	1b00      	subs	r0, r0, r4
 8006578:	eb61 0105 	sbc.w	r1, r1, r5
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	018b      	lsls	r3, r1, #6
 8006586:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800658a:	0182      	lsls	r2, r0, #6
 800658c:	1a12      	subs	r2, r2, r0
 800658e:	eb63 0301 	sbc.w	r3, r3, r1
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f04f 0100 	mov.w	r1, #0
 800659a:	00d9      	lsls	r1, r3, #3
 800659c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065a0:	00d0      	lsls	r0, r2, #3
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	1912      	adds	r2, r2, r4
 80065a8:	eb45 0303 	adc.w	r3, r5, r3
 80065ac:	f04f 0000 	mov.w	r0, #0
 80065b0:	f04f 0100 	mov.w	r1, #0
 80065b4:	0299      	lsls	r1, r3, #10
 80065b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065ba:	0290      	lsls	r0, r2, #10
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4610      	mov	r0, r2
 80065c2:	4619      	mov	r1, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	f7fa fabc 	bl	8000b48 <__aeabi_uldivmod>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4613      	mov	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	3301      	adds	r3, #1
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	e002      	b.n	80065fa <HAL_RCC_GetSysClockFreq+0x1aa>
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80065f6:	60bb      	str	r3, [r7, #8]
 80065f8:	bf00      	nop
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006606:	bf00      	nop
 8006608:	40023800 	.word	0x40023800
 800660c:	00f42400 	.word	0x00f42400
 8006610:	007a1200 	.word	0x007a1200

08006614 <HAL_RCC_GetHCLKFreq>:
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
 8006618:	4b03      	ldr	r3, [pc, #12]	; (8006628 <HAL_RCC_GetHCLKFreq+0x14>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000004 	.word	0x20000004

0800662c <HAL_RCC_GetPCLK1Freq>:
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
 8006630:	f7ff fff0 	bl	8006614 <HAL_RCC_GetHCLKFreq>
 8006634:	4602      	mov	r2, r0
 8006636:	4b05      	ldr	r3, [pc, #20]	; (800664c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	0a9b      	lsrs	r3, r3, #10
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	4903      	ldr	r1, [pc, #12]	; (8006650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006642:	5ccb      	ldrb	r3, [r1, r3]
 8006644:	fa22 f303 	lsr.w	r3, r2, r3
 8006648:	4618      	mov	r0, r3
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40023800 	.word	0x40023800
 8006650:	0800cb58 	.word	0x0800cb58

08006654 <HAL_RCC_GetPCLK2Freq>:
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
 8006658:	f7ff ffdc 	bl	8006614 <HAL_RCC_GetHCLKFreq>
 800665c:	4602      	mov	r2, r0
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	0b5b      	lsrs	r3, r3, #13
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	4903      	ldr	r1, [pc, #12]	; (8006678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800666a:	5ccb      	ldrb	r3, [r1, r3]
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	4618      	mov	r0, r3
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40023800 	.word	0x40023800
 8006678:	0800cb58 	.word	0x0800cb58

0800667c <HAL_RCC_GetClockConfig>:
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	220f      	movs	r2, #15
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <HAL_RCC_GetClockConfig+0x5c>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 0203 	and.w	r2, r3, #3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	605a      	str	r2, [r3, #4]
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <HAL_RCC_GetClockConfig+0x5c>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	609a      	str	r2, [r3, #8]
 80066a4:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <HAL_RCC_GetClockConfig+0x5c>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60da      	str	r2, [r3, #12]
 80066b0:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <HAL_RCC_GetClockConfig+0x5c>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	08db      	lsrs	r3, r3, #3
 80066b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	611a      	str	r2, [r3, #16]
 80066be:	4b07      	ldr	r3, [pc, #28]	; (80066dc <HAL_RCC_GetClockConfig+0x60>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0207 	and.w	r2, r3, #7
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40023800 	.word	0x40023800
 80066dc:	40023c00 	.word	0x40023c00

080066e0 <HAL_RCCEx_PeriphCLKConfig>:
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	2300      	movs	r3, #0
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	2300      	movs	r3, #0
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d035      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8006708:	4b62      	ldr	r3, [pc, #392]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	f7fe fba1 	bl	8004e54 <HAL_GetTick>
 8006712:	6178      	str	r0, [r7, #20]
 8006714:	e008      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8006716:	f7fe fb9d 	bl	8004e54 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8006724:	2303      	movs	r3, #3
 8006726:	e0b0      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006728:	4b5b      	ldr	r3, [pc, #364]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f0      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	019a      	lsls	r2, r3, #6
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	071b      	lsls	r3, r3, #28
 8006740:	4955      	ldr	r1, [pc, #340]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8006748:	4b52      	ldr	r3, [pc, #328]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	f7fe fb81 	bl	8004e54 <HAL_GetTick>
 8006752:	6178      	str	r0, [r7, #20]
 8006754:	e008      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006756:	f7fe fb7d 	bl	8004e54 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006764:	2303      	movs	r3, #3
 8006766:	e090      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006768:	4b4b      	ldr	r3, [pc, #300]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0f0      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8083 	beq.w	8006888 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	4b44      	ldr	r3, [pc, #272]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	4a43      	ldr	r2, [pc, #268]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006790:	6413      	str	r3, [r2, #64]	; 0x40
 8006792:	4b41      	ldr	r3, [pc, #260]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4b3f      	ldr	r3, [pc, #252]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a3e      	ldr	r2, [pc, #248]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	f7fe fb53 	bl	8004e54 <HAL_GetTick>
 80067ae:	6178      	str	r0, [r7, #20]
 80067b0:	e008      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80067b2:	f7fe fb4f 	bl	8004e54 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80067c0:	2303      	movs	r3, #3
 80067c2:	e062      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80067c4:	4b35      	ldr	r3, [pc, #212]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f0      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80067d0:	4b31      	ldr	r3, [pc, #196]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d02f      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d028      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80067ee:	4b2a      	ldr	r3, [pc, #168]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	4b29      	ldr	r3, [pc, #164]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	4b28      	ldr	r3, [pc, #160]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	4a24      	ldr	r2, [pc, #144]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6713      	str	r3, [r2, #112]	; 0x70
 800680a:	4b23      	ldr	r3, [pc, #140]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d114      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006816:	f7fe fb1d 	bl	8004e54 <HAL_GetTick>
 800681a:	6178      	str	r0, [r7, #20]
 800681c:	e00a      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800681e:	f7fe fb19 	bl	8004e54 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	f241 3288 	movw	r2, #5000	; 0x1388
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006830:	2303      	movs	r3, #3
 8006832:	e02a      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006834:	4b18      	ldr	r3, [pc, #96]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0ee      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684c:	d10d      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800684e:	4b12      	ldr	r3, [pc, #72]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800685e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006862:	490d      	ldr	r1, [pc, #52]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006864:	4313      	orrs	r3, r2
 8006866:	608b      	str	r3, [r1, #8]
 8006868:	e005      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	4a0a      	ldr	r2, [pc, #40]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006870:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006874:	6093      	str	r3, [r2, #8]
 8006876:	4b08      	ldr	r3, [pc, #32]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006878:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006882:	4905      	ldr	r1, [pc, #20]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006884:	4313      	orrs	r3, r2
 8006886:	670b      	str	r3, [r1, #112]	; 0x70
 8006888:	2300      	movs	r3, #0
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	42470068 	.word	0x42470068
 8006898:	40023800 	.word	0x40023800
 800689c:	40007000 	.word	0x40007000
 80068a0:	42470e40 	.word	0x42470e40

080068a4 <HAL_TIM_Base_Init>:
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_TIM_Base_Init+0x12>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e041      	b.n	800693a <HAL_TIM_Base_Init+0x96>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <HAL_TIM_Base_Init+0x2c>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fd fee0 	bl	8004690 <HAL_TIM_Base_MspInit>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3304      	adds	r3, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f000 fe08 	bl	80074f8 <TIM_Base_SetConfig>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006938:	2300      	movs	r3, #0
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <HAL_TIM_Base_Start_IT>:
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	d001      	beq.n	800695c <HAL_TIM_Base_Start_IT+0x18>
 8006958:	2301      	movs	r3, #1
 800695a:	e04e      	b.n	80069fa <HAL_TIM_Base_Start_IT+0xb6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	60da      	str	r2, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a23      	ldr	r2, [pc, #140]	; (8006a08 <HAL_TIM_Base_Start_IT+0xc4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d022      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x80>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006986:	d01d      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x80>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1f      	ldr	r2, [pc, #124]	; (8006a0c <HAL_TIM_Base_Start_IT+0xc8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d018      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x80>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <HAL_TIM_Base_Start_IT+0xcc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d013      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x80>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1c      	ldr	r2, [pc, #112]	; (8006a14 <HAL_TIM_Base_Start_IT+0xd0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00e      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x80>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1b      	ldr	r2, [pc, #108]	; (8006a18 <HAL_TIM_Base_Start_IT+0xd4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d009      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x80>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <HAL_TIM_Base_Start_IT+0xd8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <HAL_TIM_Base_Start_IT+0x80>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a18      	ldr	r2, [pc, #96]	; (8006a20 <HAL_TIM_Base_Start_IT+0xdc>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d111      	bne.n	80069e8 <HAL_TIM_Base_Start_IT+0xa4>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b06      	cmp	r3, #6
 80069d4:	d010      	beq.n	80069f8 <HAL_TIM_Base_Start_IT+0xb4>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0201 	orr.w	r2, r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	e007      	b.n	80069f8 <HAL_TIM_Base_Start_IT+0xb4>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	2300      	movs	r3, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40010400 	.word	0x40010400
 8006a1c:	40014000 	.word	0x40014000
 8006a20:	40001800 	.word	0x40001800

08006a24 <HAL_TIM_PWM_Init>:
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_TIM_PWM_Init+0x12>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e041      	b.n	8006aba <HAL_TIM_PWM_Init+0x96>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <HAL_TIM_PWM_Init+0x2c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f839 	bl	8006ac2 <HAL_TIM_PWM_MspInit>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f000 fd48 	bl	80074f8 <TIM_Base_SetConfig>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <HAL_TIM_PWM_MspInit>:
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <HAL_TIM_IC_Init>:
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_TIM_IC_Init+0x12>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e041      	b.n	8006b6c <HAL_TIM_IC_Init+0x96>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d106      	bne.n	8006b02 <HAL_TIM_IC_Init+0x2c>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f839 	bl	8006b74 <HAL_TIM_IC_MspInit>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f000 fcef 	bl	80074f8 <TIM_Base_SetConfig>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_TIM_IC_MspInit>:
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_TIM_IC_Start_IT>:
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <HAL_TIM_IC_Start_IT+0x1e>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	e013      	b.n	8006bce <HAL_TIM_IC_Start_IT+0x46>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d104      	bne.n	8006bb6 <HAL_TIM_IC_Start_IT+0x2e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	e00b      	b.n	8006bce <HAL_TIM_IC_Start_IT+0x46>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b08      	cmp	r3, #8
 8006bba:	d104      	bne.n	8006bc6 <HAL_TIM_IC_Start_IT+0x3e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	e003      	b.n	8006bce <HAL_TIM_IC_Start_IT+0x46>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	73bb      	strb	r3, [r7, #14]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d104      	bne.n	8006be0 <HAL_TIM_IC_Start_IT+0x58>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	e013      	b.n	8006c08 <HAL_TIM_IC_Start_IT+0x80>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d104      	bne.n	8006bf0 <HAL_TIM_IC_Start_IT+0x68>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	e00b      	b.n	8006c08 <HAL_TIM_IC_Start_IT+0x80>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	d104      	bne.n	8006c00 <HAL_TIM_IC_Start_IT+0x78>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	e003      	b.n	8006c08 <HAL_TIM_IC_Start_IT+0x80>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	737b      	strb	r3, [r7, #13]
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d102      	bne.n	8006c16 <HAL_TIM_IC_Start_IT+0x8e>
 8006c10:	7b7b      	ldrb	r3, [r7, #13]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d001      	beq.n	8006c1a <HAL_TIM_IC_Start_IT+0x92>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e0cc      	b.n	8006db4 <HAL_TIM_IC_Start_IT+0x22c>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <HAL_TIM_IC_Start_IT+0xa2>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c28:	e013      	b.n	8006c52 <HAL_TIM_IC_Start_IT+0xca>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d104      	bne.n	8006c3a <HAL_TIM_IC_Start_IT+0xb2>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c38:	e00b      	b.n	8006c52 <HAL_TIM_IC_Start_IT+0xca>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d104      	bne.n	8006c4a <HAL_TIM_IC_Start_IT+0xc2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c48:	e003      	b.n	8006c52 <HAL_TIM_IC_Start_IT+0xca>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <HAL_TIM_IC_Start_IT+0xda>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c60:	e013      	b.n	8006c8a <HAL_TIM_IC_Start_IT+0x102>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_IC_Start_IT+0xea>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c70:	e00b      	b.n	8006c8a <HAL_TIM_IC_Start_IT+0x102>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d104      	bne.n	8006c82 <HAL_TIM_IC_Start_IT+0xfa>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c80:	e003      	b.n	8006c8a <HAL_TIM_IC_Start_IT+0x102>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b0c      	cmp	r3, #12
 8006c8e:	d841      	bhi.n	8006d14 <HAL_TIM_IC_Start_IT+0x18c>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <HAL_TIM_IC_Start_IT+0x110>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006ccd 	.word	0x08006ccd
 8006c9c:	08006d15 	.word	0x08006d15
 8006ca0:	08006d15 	.word	0x08006d15
 8006ca4:	08006d15 	.word	0x08006d15
 8006ca8:	08006cdf 	.word	0x08006cdf
 8006cac:	08006d15 	.word	0x08006d15
 8006cb0:	08006d15 	.word	0x08006d15
 8006cb4:	08006d15 	.word	0x08006d15
 8006cb8:	08006cf1 	.word	0x08006cf1
 8006cbc:	08006d15 	.word	0x08006d15
 8006cc0:	08006d15 	.word	0x08006d15
 8006cc4:	08006d15 	.word	0x08006d15
 8006cc8:	08006d03 	.word	0x08006d03
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0202 	orr.w	r2, r2, #2
 8006cda:	60da      	str	r2, [r3, #12]
 8006cdc:	e01d      	b.n	8006d1a <HAL_TIM_IC_Start_IT+0x192>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0204 	orr.w	r2, r2, #4
 8006cec:	60da      	str	r2, [r3, #12]
 8006cee:	e014      	b.n	8006d1a <HAL_TIM_IC_Start_IT+0x192>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0208 	orr.w	r2, r2, #8
 8006cfe:	60da      	str	r2, [r3, #12]
 8006d00:	e00b      	b.n	8006d1a <HAL_TIM_IC_Start_IT+0x192>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0210 	orr.w	r2, r2, #16
 8006d10:	60da      	str	r2, [r3, #12]
 8006d12:	e002      	b.n	8006d1a <HAL_TIM_IC_Start_IT+0x192>
 8006d14:	2301      	movs	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
 8006d18:	bf00      	nop
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d148      	bne.n	8006db2 <HAL_TIM_IC_Start_IT+0x22a>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fff9 	bl	8007d20 <TIM_CCxChannelCmd>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a22      	ldr	r2, [pc, #136]	; (8006dbc <HAL_TIM_IC_Start_IT+0x234>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d022      	beq.n	8006d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d40:	d01d      	beq.n	8006d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1e      	ldr	r2, [pc, #120]	; (8006dc0 <HAL_TIM_IC_Start_IT+0x238>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d018      	beq.n	8006d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1c      	ldr	r2, [pc, #112]	; (8006dc4 <HAL_TIM_IC_Start_IT+0x23c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d013      	beq.n	8006d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1b      	ldr	r2, [pc, #108]	; (8006dc8 <HAL_TIM_IC_Start_IT+0x240>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00e      	beq.n	8006d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <HAL_TIM_IC_Start_IT+0x244>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d009      	beq.n	8006d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a18      	ldr	r2, [pc, #96]	; (8006dd0 <HAL_TIM_IC_Start_IT+0x248>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_TIM_IC_Start_IT+0x1f6>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a16      	ldr	r2, [pc, #88]	; (8006dd4 <HAL_TIM_IC_Start_IT+0x24c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d111      	bne.n	8006da2 <HAL_TIM_IC_Start_IT+0x21a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	60bb      	str	r3, [r7, #8]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b06      	cmp	r3, #6
 8006d8e:	d010      	beq.n	8006db2 <HAL_TIM_IC_Start_IT+0x22a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	e007      	b.n	8006db2 <HAL_TIM_IC_Start_IT+0x22a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 0201 	orr.w	r2, r2, #1
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40010000 	.word	0x40010000
 8006dc0:	40000400 	.word	0x40000400
 8006dc4:	40000800 	.word	0x40000800
 8006dc8:	40000c00 	.word	0x40000c00
 8006dcc:	40010400 	.word	0x40010400
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	40001800 	.word	0x40001800

08006dd8 <HAL_TIM_IRQHandler>:
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d122      	bne.n	8006e34 <HAL_TIM_IRQHandler+0x5c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d11b      	bne.n	8006e34 <HAL_TIM_IRQHandler+0x5c>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f06f 0202 	mvn.w	r2, #2
 8006e04:	611a      	str	r2, [r3, #16]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	771a      	strb	r2, [r3, #28]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_TIM_IRQHandler+0x4a>
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fa f9b4 	bl	8001188 <HAL_TIM_IC_CaptureCallback>
 8006e20:	e005      	b.n	8006e2e <HAL_TIM_IRQHandler+0x56>
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fb4a 	bl	80074bc <HAL_TIM_OC_DelayElapsedCallback>
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fb51 	bl	80074d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	771a      	strb	r2, [r3, #28]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d122      	bne.n	8006e88 <HAL_TIM_IRQHandler+0xb0>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d11b      	bne.n	8006e88 <HAL_TIM_IRQHandler+0xb0>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0204 	mvn.w	r2, #4
 8006e58:	611a      	str	r2, [r3, #16]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	771a      	strb	r2, [r3, #28]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_TIM_IRQHandler+0x9e>
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fa f98a 	bl	8001188 <HAL_TIM_IC_CaptureCallback>
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_IRQHandler+0xaa>
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fb20 	bl	80074bc <HAL_TIM_OC_DelayElapsedCallback>
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fb27 	bl	80074d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d122      	bne.n	8006edc <HAL_TIM_IRQHandler+0x104>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d11b      	bne.n	8006edc <HAL_TIM_IRQHandler+0x104>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0208 	mvn.w	r2, #8
 8006eac:	611a      	str	r2, [r3, #16]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	771a      	strb	r2, [r3, #28]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_TIM_IRQHandler+0xf2>
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fa f960 	bl	8001188 <HAL_TIM_IC_CaptureCallback>
 8006ec8:	e005      	b.n	8006ed6 <HAL_TIM_IRQHandler+0xfe>
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 faf6 	bl	80074bc <HAL_TIM_OC_DelayElapsedCallback>
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fafd 	bl	80074d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	771a      	strb	r2, [r3, #28]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f003 0310 	and.w	r3, r3, #16
 8006ee6:	2b10      	cmp	r3, #16
 8006ee8:	d122      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x158>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d11b      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x158>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0210 	mvn.w	r2, #16
 8006f00:	611a      	str	r2, [r3, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2208      	movs	r2, #8
 8006f06:	771a      	strb	r2, [r3, #28]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_TIM_IRQHandler+0x146>
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fa f936 	bl	8001188 <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e005      	b.n	8006f2a <HAL_TIM_IRQHandler+0x152>
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 facc 	bl	80074bc <HAL_TIM_OC_DelayElapsedCallback>
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fad3 	bl	80074d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	771a      	strb	r2, [r3, #28]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d10e      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x184>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d107      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x184>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0201 	mvn.w	r2, #1
 8006f54:	611a      	str	r2, [r3, #16]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fa ff54 	bl	8001e04 <HAL_TIM_PeriodElapsedCallback>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f66:	2b80      	cmp	r3, #128	; 0x80
 8006f68:	d10e      	bne.n	8006f88 <HAL_TIM_IRQHandler+0x1b0>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f74:	2b80      	cmp	r3, #128	; 0x80
 8006f76:	d107      	bne.n	8006f88 <HAL_TIM_IRQHandler+0x1b0>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f80:	611a      	str	r2, [r3, #16]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fefb 	bl	8007d7e <HAL_TIMEx_BreakCallback>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d10e      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x1dc>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa0:	2b40      	cmp	r3, #64	; 0x40
 8006fa2:	d107      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x1dc>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fac:	611a      	str	r2, [r3, #16]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa98 	bl	80074e4 <HAL_TIM_TriggerCallback>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d10e      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x208>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d107      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x208>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0220 	mvn.w	r2, #32
 8006fd8:	611a      	str	r2, [r3, #16]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fec5 	bl	8007d6a <HAL_TIMEx_CommutCallback>
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_TIM_IC_ConfigChannel>:
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	75fb      	strb	r3, [r7, #23]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007002:	2302      	movs	r3, #2
 8007004:	e088      	b.n	8007118 <HAL_TIM_IC_ConfigChannel+0x130>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d11b      	bne.n	800704c <HAL_TIM_IC_ConfigChannel+0x64>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	6819      	ldr	r1, [r3, #0]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f000 fcb8 	bl	8007998 <TIM_TI1_SetConfig>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 020c 	bic.w	r2, r2, #12
 8007036:	619a      	str	r2, [r3, #24]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6999      	ldr	r1, [r3, #24]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	619a      	str	r2, [r3, #24]
 800704a:	e060      	b.n	800710e <HAL_TIM_IC_ConfigChannel+0x126>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b04      	cmp	r3, #4
 8007050:	d11c      	bne.n	800708c <HAL_TIM_IC_ConfigChannel+0xa4>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	6819      	ldr	r1, [r3, #0]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f000 fd3c 	bl	8007ade <TIM_TI2_SetConfig>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007074:	619a      	str	r2, [r3, #24]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6999      	ldr	r1, [r3, #24]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	021a      	lsls	r2, r3, #8
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	619a      	str	r2, [r3, #24]
 800708a:	e040      	b.n	800710e <HAL_TIM_IC_ConfigChannel+0x126>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b08      	cmp	r3, #8
 8007090:	d11b      	bne.n	80070ca <HAL_TIM_IC_ConfigChannel+0xe2>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6819      	ldr	r1, [r3, #0]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f000 fd89 	bl	8007bb8 <TIM_TI3_SetConfig>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69da      	ldr	r2, [r3, #28]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 020c 	bic.w	r2, r2, #12
 80070b4:	61da      	str	r2, [r3, #28]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69d9      	ldr	r1, [r3, #28]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	61da      	str	r2, [r3, #28]
 80070c8:	e021      	b.n	800710e <HAL_TIM_IC_ConfigChannel+0x126>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b0c      	cmp	r3, #12
 80070ce:	d11c      	bne.n	800710a <HAL_TIM_IC_ConfigChannel+0x122>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6819      	ldr	r1, [r3, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f000 fda6 	bl	8007c30 <TIM_TI4_SetConfig>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69da      	ldr	r2, [r3, #28]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070f2:	61da      	str	r2, [r3, #28]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69d9      	ldr	r1, [r3, #28]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	021a      	lsls	r2, r3, #8
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	61da      	str	r2, [r3, #28]
 8007108:	e001      	b.n	800710e <HAL_TIM_IC_ConfigChannel+0x126>
 800710a:	2301      	movs	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_TIM_PWM_ConfigChannel>:
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	2300      	movs	r3, #0
 800712e:	75fb      	strb	r3, [r7, #23]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800713a:	2302      	movs	r3, #2
 800713c:	e0ae      	b.n	800729c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b0c      	cmp	r3, #12
 800714a:	f200 809f 	bhi.w	800728c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800714e:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	08007189 	.word	0x08007189
 8007158:	0800728d 	.word	0x0800728d
 800715c:	0800728d 	.word	0x0800728d
 8007160:	0800728d 	.word	0x0800728d
 8007164:	080071c9 	.word	0x080071c9
 8007168:	0800728d 	.word	0x0800728d
 800716c:	0800728d 	.word	0x0800728d
 8007170:	0800728d 	.word	0x0800728d
 8007174:	0800720b 	.word	0x0800720b
 8007178:	0800728d 	.word	0x0800728d
 800717c:	0800728d 	.word	0x0800728d
 8007180:	0800728d 	.word	0x0800728d
 8007184:	0800724b 	.word	0x0800724b
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fa52 	bl	8007638 <TIM_OC1_SetConfig>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699a      	ldr	r2, [r3, #24]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0208 	orr.w	r2, r2, #8
 80071a2:	619a      	str	r2, [r3, #24]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699a      	ldr	r2, [r3, #24]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0204 	bic.w	r2, r2, #4
 80071b2:	619a      	str	r2, [r3, #24]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6999      	ldr	r1, [r3, #24]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	691a      	ldr	r2, [r3, #16]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	619a      	str	r2, [r3, #24]
 80071c6:	e064      	b.n	8007292 <HAL_TIM_PWM_ConfigChannel+0x172>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 faa2 	bl	8007718 <TIM_OC2_SetConfig>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071e2:	619a      	str	r2, [r3, #24]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071f2:	619a      	str	r2, [r3, #24]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6999      	ldr	r1, [r3, #24]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	021a      	lsls	r2, r3, #8
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	619a      	str	r2, [r3, #24]
 8007208:	e043      	b.n	8007292 <HAL_TIM_PWM_ConfigChannel+0x172>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68b9      	ldr	r1, [r7, #8]
 8007210:	4618      	mov	r0, r3
 8007212:	f000 faf7 	bl	8007804 <TIM_OC3_SetConfig>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0208 	orr.w	r2, r2, #8
 8007224:	61da      	str	r2, [r3, #28]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69da      	ldr	r2, [r3, #28]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0204 	bic.w	r2, r2, #4
 8007234:	61da      	str	r2, [r3, #28]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69d9      	ldr	r1, [r3, #28]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	691a      	ldr	r2, [r3, #16]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	61da      	str	r2, [r3, #28]
 8007248:	e023      	b.n	8007292 <HAL_TIM_PWM_ConfigChannel+0x172>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fb4b 	bl	80078ec <TIM_OC4_SetConfig>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69da      	ldr	r2, [r3, #28]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007264:	61da      	str	r2, [r3, #28]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69da      	ldr	r2, [r3, #28]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007274:	61da      	str	r2, [r3, #28]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69d9      	ldr	r1, [r3, #28]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	021a      	lsls	r2, r3, #8
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	61da      	str	r2, [r3, #28]
 800728a:	e002      	b.n	8007292 <HAL_TIM_PWM_ConfigChannel+0x172>
 800728c:	2301      	movs	r3, #1
 800728e:	75fb      	strb	r3, [r7, #23]
 8007290:	bf00      	nop
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_TIM_ConfigClockSource>:
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_TIM_ConfigClockSource+0x1c>
 80072bc:	2302      	movs	r3, #2
 80072be:	e0b4      	b.n	800742a <HAL_TIM_ConfigClockSource+0x186>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	60bb      	str	r3, [r7, #8]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072de:	60bb      	str	r3, [r7, #8]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f8:	d03e      	beq.n	8007378 <HAL_TIM_ConfigClockSource+0xd4>
 80072fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fe:	f200 8087 	bhi.w	8007410 <HAL_TIM_ConfigClockSource+0x16c>
 8007302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007306:	f000 8086 	beq.w	8007416 <HAL_TIM_ConfigClockSource+0x172>
 800730a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730e:	d87f      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x16c>
 8007310:	2b70      	cmp	r3, #112	; 0x70
 8007312:	d01a      	beq.n	800734a <HAL_TIM_ConfigClockSource+0xa6>
 8007314:	2b70      	cmp	r3, #112	; 0x70
 8007316:	d87b      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x16c>
 8007318:	2b60      	cmp	r3, #96	; 0x60
 800731a:	d050      	beq.n	80073be <HAL_TIM_ConfigClockSource+0x11a>
 800731c:	2b60      	cmp	r3, #96	; 0x60
 800731e:	d877      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x16c>
 8007320:	2b50      	cmp	r3, #80	; 0x50
 8007322:	d03c      	beq.n	800739e <HAL_TIM_ConfigClockSource+0xfa>
 8007324:	2b50      	cmp	r3, #80	; 0x50
 8007326:	d873      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x16c>
 8007328:	2b40      	cmp	r3, #64	; 0x40
 800732a:	d058      	beq.n	80073de <HAL_TIM_ConfigClockSource+0x13a>
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	d86f      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x16c>
 8007330:	2b30      	cmp	r3, #48	; 0x30
 8007332:	d064      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x15a>
 8007334:	2b30      	cmp	r3, #48	; 0x30
 8007336:	d86b      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x16c>
 8007338:	2b20      	cmp	r3, #32
 800733a:	d060      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x15a>
 800733c:	2b20      	cmp	r3, #32
 800733e:	d867      	bhi.n	8007410 <HAL_TIM_ConfigClockSource+0x16c>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d05c      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x15a>
 8007344:	2b10      	cmp	r3, #16
 8007346:	d05a      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x15a>
 8007348:	e062      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x16c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6818      	ldr	r0, [r3, #0]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	6899      	ldr	r1, [r3, #8]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f000 fcc1 	bl	8007ce0 <TIM_ETR_SetConfig>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	609a      	str	r2, [r3, #8]
 8007376:	e04f      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x174>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6818      	ldr	r0, [r3, #0]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	6899      	ldr	r1, [r3, #8]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f000 fcaa 	bl	8007ce0 <TIM_ETR_SetConfig>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800739a:	609a      	str	r2, [r3, #8]
 800739c:	e03c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x174>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6859      	ldr	r1, [r3, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f000 fb68 	bl	8007a80 <TIM_TI1_ConfigInputStage>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2150      	movs	r1, #80	; 0x50
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fc77 	bl	8007caa <TIM_ITRx_SetConfig>
 80073bc:	e02c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x174>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	6859      	ldr	r1, [r3, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	461a      	mov	r2, r3
 80073cc:	f000 fbc4 	bl	8007b58 <TIM_TI2_ConfigInputStage>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2160      	movs	r1, #96	; 0x60
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fc67 	bl	8007caa <TIM_ITRx_SetConfig>
 80073dc:	e01c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x174>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	6859      	ldr	r1, [r3, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f000 fb48 	bl	8007a80 <TIM_TI1_ConfigInputStage>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2140      	movs	r1, #64	; 0x40
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fc57 	bl	8007caa <TIM_ITRx_SetConfig>
 80073fc:	e00c      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x174>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f000 fc4e 	bl	8007caa <TIM_ITRx_SetConfig>
 800740e:	e003      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x174>
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
 8007414:	e000      	b.n	8007418 <HAL_TIM_ConfigClockSource+0x174>
 8007416:	bf00      	nop
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <HAL_TIM_ReadCapturedValue>:
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b0c      	cmp	r3, #12
 8007446:	d831      	bhi.n	80074ac <HAL_TIM_ReadCapturedValue+0x78>
 8007448:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <HAL_TIM_ReadCapturedValue+0x1c>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	08007485 	.word	0x08007485
 8007454:	080074ad 	.word	0x080074ad
 8007458:	080074ad 	.word	0x080074ad
 800745c:	080074ad 	.word	0x080074ad
 8007460:	0800748f 	.word	0x0800748f
 8007464:	080074ad 	.word	0x080074ad
 8007468:	080074ad 	.word	0x080074ad
 800746c:	080074ad 	.word	0x080074ad
 8007470:	08007499 	.word	0x08007499
 8007474:	080074ad 	.word	0x080074ad
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074ad 	.word	0x080074ad
 8007480:	080074a3 	.word	0x080074a3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e00f      	b.n	80074ae <HAL_TIM_ReadCapturedValue+0x7a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e00a      	b.n	80074ae <HAL_TIM_ReadCapturedValue+0x7a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e005      	b.n	80074ae <HAL_TIM_ReadCapturedValue+0x7a>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	60fb      	str	r3, [r7, #12]
 80074aa:	e000      	b.n	80074ae <HAL_TIM_ReadCapturedValue+0x7a>
 80074ac:	bf00      	nop
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIM_OC_DelayElapsedCallback>:
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIM_TriggerCallback>:
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <TIM_Base_SetConfig>:
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a40      	ldr	r2, [pc, #256]	; (800760c <TIM_Base_SetConfig+0x114>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d013      	beq.n	8007538 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007516:	d00f      	beq.n	8007538 <TIM_Base_SetConfig+0x40>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a3d      	ldr	r2, [pc, #244]	; (8007610 <TIM_Base_SetConfig+0x118>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00b      	beq.n	8007538 <TIM_Base_SetConfig+0x40>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a3c      	ldr	r2, [pc, #240]	; (8007614 <TIM_Base_SetConfig+0x11c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d007      	beq.n	8007538 <TIM_Base_SetConfig+0x40>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a3b      	ldr	r2, [pc, #236]	; (8007618 <TIM_Base_SetConfig+0x120>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_Base_SetConfig+0x40>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a3a      	ldr	r2, [pc, #232]	; (800761c <TIM_Base_SetConfig+0x124>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d108      	bne.n	800754a <TIM_Base_SetConfig+0x52>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a2f      	ldr	r2, [pc, #188]	; (800760c <TIM_Base_SetConfig+0x114>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d02b      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007558:	d027      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a2c      	ldr	r2, [pc, #176]	; (8007610 <TIM_Base_SetConfig+0x118>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d023      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a2b      	ldr	r2, [pc, #172]	; (8007614 <TIM_Base_SetConfig+0x11c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d01f      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a2a      	ldr	r2, [pc, #168]	; (8007618 <TIM_Base_SetConfig+0x120>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d01b      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a29      	ldr	r2, [pc, #164]	; (800761c <TIM_Base_SetConfig+0x124>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d017      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a28      	ldr	r2, [pc, #160]	; (8007620 <TIM_Base_SetConfig+0x128>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d013      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a27      	ldr	r2, [pc, #156]	; (8007624 <TIM_Base_SetConfig+0x12c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00f      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a26      	ldr	r2, [pc, #152]	; (8007628 <TIM_Base_SetConfig+0x130>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00b      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a25      	ldr	r2, [pc, #148]	; (800762c <TIM_Base_SetConfig+0x134>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d007      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a24      	ldr	r2, [pc, #144]	; (8007630 <TIM_Base_SetConfig+0x138>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d003      	beq.n	80075aa <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a23      	ldr	r2, [pc, #140]	; (8007634 <TIM_Base_SetConfig+0x13c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d108      	bne.n	80075bc <TIM_Base_SetConfig+0xc4>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	629a      	str	r2, [r3, #40]	; 0x28
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a0a      	ldr	r2, [pc, #40]	; (800760c <TIM_Base_SetConfig+0x114>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d003      	beq.n	80075f0 <TIM_Base_SetConfig+0xf8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a0c      	ldr	r2, [pc, #48]	; (800761c <TIM_Base_SetConfig+0x124>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d103      	bne.n	80075f8 <TIM_Base_SetConfig+0x100>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	631a      	str	r2, [r3, #48]	; 0x30
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	615a      	str	r2, [r3, #20]
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	40010000 	.word	0x40010000
 8007610:	40000400 	.word	0x40000400
 8007614:	40000800 	.word	0x40000800
 8007618:	40000c00 	.word	0x40000c00
 800761c:	40010400 	.word	0x40010400
 8007620:	40014000 	.word	0x40014000
 8007624:	40014400 	.word	0x40014400
 8007628:	40014800 	.word	0x40014800
 800762c:	40001800 	.word	0x40001800
 8007630:	40001c00 	.word	0x40001c00
 8007634:	40002000 	.word	0x40002000

08007638 <TIM_OC1_SetConfig>:
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f023 0201 	bic.w	r2, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	613b      	str	r3, [r7, #16]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0303 	bic.w	r3, r3, #3
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f023 0302 	bic.w	r3, r3, #2
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a20      	ldr	r2, [pc, #128]	; (8007710 <TIM_OC1_SetConfig+0xd8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_OC1_SetConfig+0x64>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a1f      	ldr	r2, [pc, #124]	; (8007714 <TIM_OC1_SetConfig+0xdc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d10c      	bne.n	80076b6 <TIM_OC1_SetConfig+0x7e>
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f023 0308 	bic.w	r3, r3, #8
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f023 0304 	bic.w	r3, r3, #4
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a15      	ldr	r2, [pc, #84]	; (8007710 <TIM_OC1_SetConfig+0xd8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d003      	beq.n	80076c6 <TIM_OC1_SetConfig+0x8e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a14      	ldr	r2, [pc, #80]	; (8007714 <TIM_OC1_SetConfig+0xdc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d111      	bne.n	80076ea <TIM_OC1_SetConfig+0xb2>
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076d4:	613b      	str	r3, [r7, #16]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	613b      	str	r3, [r7, #16]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	605a      	str	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	619a      	str	r2, [r3, #24]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	635a      	str	r2, [r3, #52]	; 0x34
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	621a      	str	r2, [r3, #32]
 8007704:	bf00      	nop
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	40010000 	.word	0x40010000
 8007714:	40010400 	.word	0x40010400

08007718 <TIM_OC2_SetConfig>:
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f023 0210 	bic.w	r2, r3, #16
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	621a      	str	r2, [r3, #32]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	617b      	str	r3, [r7, #20]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f023 0320 	bic.w	r3, r3, #32
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a22      	ldr	r2, [pc, #136]	; (80077fc <TIM_OC2_SetConfig+0xe4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d003      	beq.n	8007780 <TIM_OC2_SetConfig+0x68>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a21      	ldr	r2, [pc, #132]	; (8007800 <TIM_OC2_SetConfig+0xe8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d10d      	bne.n	800779c <TIM_OC2_SetConfig+0x84>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a17      	ldr	r2, [pc, #92]	; (80077fc <TIM_OC2_SetConfig+0xe4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_OC2_SetConfig+0x94>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a16      	ldr	r2, [pc, #88]	; (8007800 <TIM_OC2_SetConfig+0xe8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d113      	bne.n	80077d4 <TIM_OC2_SetConfig+0xbc>
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	605a      	str	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	619a      	str	r2, [r3, #24]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	621a      	str	r2, [r3, #32]
 80077ee:	bf00      	nop
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40010000 	.word	0x40010000
 8007800:	40010400 	.word	0x40010400

08007804 <TIM_OC3_SetConfig>:
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	621a      	str	r2, [r3, #32]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a21      	ldr	r2, [pc, #132]	; (80078e4 <TIM_OC3_SetConfig+0xe0>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d003      	beq.n	800786a <TIM_OC3_SetConfig+0x66>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a20      	ldr	r2, [pc, #128]	; (80078e8 <TIM_OC3_SetConfig+0xe4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d10d      	bne.n	8007886 <TIM_OC3_SetConfig+0x82>
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a16      	ldr	r2, [pc, #88]	; (80078e4 <TIM_OC3_SetConfig+0xe0>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d003      	beq.n	8007896 <TIM_OC3_SetConfig+0x92>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <TIM_OC3_SetConfig+0xe4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d113      	bne.n	80078be <TIM_OC3_SetConfig+0xba>
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	605a      	str	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	61da      	str	r2, [r3, #28]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	621a      	str	r2, [r3, #32]
 80078d8:	bf00      	nop
 80078da:	371c      	adds	r7, #28
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40010400 	.word	0x40010400

080078ec <TIM_OC4_SetConfig>:
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	621a      	str	r2, [r3, #32]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	031b      	lsls	r3, r3, #12
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a12      	ldr	r2, [pc, #72]	; (8007990 <TIM_OC4_SetConfig+0xa4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d003      	beq.n	8007954 <TIM_OC4_SetConfig+0x68>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a11      	ldr	r2, [pc, #68]	; (8007994 <TIM_OC4_SetConfig+0xa8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d109      	bne.n	8007968 <TIM_OC4_SetConfig+0x7c>
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	019b      	lsls	r3, r3, #6
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	605a      	str	r2, [r3, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	61da      	str	r2, [r3, #28]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	641a      	str	r2, [r3, #64]	; 0x40
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	621a      	str	r2, [r3, #32]
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	40010000 	.word	0x40010000
 8007994:	40010400 	.word	0x40010400

08007998 <TIM_TI1_SetConfig>:
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f023 0201 	bic.w	r2, r3, #1
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	621a      	str	r2, [r3, #32]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	613b      	str	r3, [r7, #16]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4a28      	ldr	r2, [pc, #160]	; (8007a64 <TIM_TI1_SetConfig+0xcc>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d01b      	beq.n	80079fe <TIM_TI1_SetConfig+0x66>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079cc:	d017      	beq.n	80079fe <TIM_TI1_SetConfig+0x66>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4a25      	ldr	r2, [pc, #148]	; (8007a68 <TIM_TI1_SetConfig+0xd0>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d013      	beq.n	80079fe <TIM_TI1_SetConfig+0x66>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4a24      	ldr	r2, [pc, #144]	; (8007a6c <TIM_TI1_SetConfig+0xd4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d00f      	beq.n	80079fe <TIM_TI1_SetConfig+0x66>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4a23      	ldr	r2, [pc, #140]	; (8007a70 <TIM_TI1_SetConfig+0xd8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00b      	beq.n	80079fe <TIM_TI1_SetConfig+0x66>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4a22      	ldr	r2, [pc, #136]	; (8007a74 <TIM_TI1_SetConfig+0xdc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d007      	beq.n	80079fe <TIM_TI1_SetConfig+0x66>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4a21      	ldr	r2, [pc, #132]	; (8007a78 <TIM_TI1_SetConfig+0xe0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d003      	beq.n	80079fe <TIM_TI1_SetConfig+0x66>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4a20      	ldr	r2, [pc, #128]	; (8007a7c <TIM_TI1_SetConfig+0xe4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d101      	bne.n	8007a02 <TIM_TI1_SetConfig+0x6a>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <TIM_TI1_SetConfig+0x6c>
 8007a02:	2300      	movs	r3, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d008      	beq.n	8007a1a <TIM_TI1_SetConfig+0x82>
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e003      	b.n	8007a22 <TIM_TI1_SetConfig+0x8a>
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f043 0301 	orr.w	r3, r3, #1
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f023 030a 	bic.w	r3, r3, #10
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f003 030a 	and.w	r3, r3, #10
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	619a      	str	r2, [r3, #24]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	621a      	str	r2, [r3, #32]
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40000400 	.word	0x40000400
 8007a6c:	40000800 	.word	0x40000800
 8007a70:	40000c00 	.word	0x40000c00
 8007a74:	40010400 	.word	0x40010400
 8007a78:	40014000 	.word	0x40014000
 8007a7c:	40001800 	.word	0x40001800

08007a80 <TIM_TI1_ConfigInputStage>:
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f023 0201 	bic.w	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	621a      	str	r2, [r3, #32]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	613b      	str	r3, [r7, #16]
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f023 030a 	bic.w	r3, r3, #10
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	619a      	str	r2, [r3, #24]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	621a      	str	r2, [r3, #32]
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <TIM_TI2_SetConfig>:
 8007ade:	b480      	push	{r7}
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	f023 0210 	bic.w	r2, r3, #16
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	621a      	str	r2, [r3, #32]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	613b      	str	r3, [r7, #16]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	021b      	lsls	r3, r3, #8
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	031b      	lsls	r3, r3, #12
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	619a      	str	r2, [r3, #24]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	621a      	str	r2, [r3, #32]
 8007b4c:	bf00      	nop
 8007b4e:	371c      	adds	r7, #28
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <TIM_TI2_ConfigInputStage>:
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	f023 0210 	bic.w	r2, r3, #16
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	621a      	str	r2, [r3, #32]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	031b      	lsls	r3, r3, #12
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b94:	613b      	str	r3, [r7, #16]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	011b      	lsls	r3, r3, #4
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	619a      	str	r2, [r3, #24]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	621a      	str	r2, [r3, #32]
 8007bac:	bf00      	nop
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <TIM_TI3_SetConfig>:
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	621a      	str	r2, [r3, #32]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	613b      	str	r3, [r7, #16]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f023 0303 	bic.w	r3, r3, #3
 8007be4:	617b      	str	r3, [r7, #20]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	021b      	lsls	r3, r3, #8
 8007c0e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	613b      	str	r3, [r7, #16]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	61da      	str	r2, [r3, #28]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	621a      	str	r2, [r3, #32]
 8007c24:	bf00      	nop
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <TIM_TI4_SetConfig>:
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	621a      	str	r2, [r3, #32]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	031b      	lsls	r3, r3, #12
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c82:	613b      	str	r3, [r7, #16]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	031b      	lsls	r3, r3, #12
 8007c88:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	61da      	str	r2, [r3, #28]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	621a      	str	r2, [r3, #32]
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <TIM_ITRx_SetConfig>:
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	f043 0307 	orr.w	r3, r3, #7
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	609a      	str	r2, [r3, #8]
 8007cd4:	bf00      	nop
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <TIM_ETR_SetConfig>:
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	021a      	lsls	r2, r3, #8
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	609a      	str	r2, [r3, #8]
 8007d14:	bf00      	nop
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <TIM_CCxChannelCmd>:
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	2201      	movs	r2, #1
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a1a      	ldr	r2, [r3, #32]
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	401a      	ands	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	621a      	str	r2, [r3, #32]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a1a      	ldr	r2, [r3, #32]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 031f 	and.w	r3, r3, #31
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	fa01 f303 	lsl.w	r3, r1, r3
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	621a      	str	r2, [r3, #32]
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <HAL_TIMEx_CommutCallback>:
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <HAL_TIMEx_BreakCallback>:
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <HAL_UART_Init>:
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <HAL_UART_Init+0x12>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e03f      	b.n	8007e24 <HAL_UART_Init+0x92>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <HAL_UART_Init+0x2c>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7fc fd5d 	bl	8004878 <HAL_UART_MspInit>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2224      	movs	r2, #36	; 0x24
 8007dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dd4:	60da      	str	r2, [r3, #12]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fcda 	bl	8008790 <UART_SetConfig>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dea:	611a      	str	r2, [r3, #16]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695a      	ldr	r2, [r3, #20]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dfa:	615a      	str	r2, [r3, #20]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e0a:	60da      	str	r2, [r3, #12]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	641a      	str	r2, [r3, #64]	; 0x40
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e22:	2300      	movs	r3, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_UART_Receive_IT>:
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	80fb      	strh	r3, [r7, #6]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b20      	cmp	r3, #32
 8007e44:	d11d      	bne.n	8007e82 <HAL_UART_Receive_IT+0x56>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_UART_Receive_IT+0x26>
 8007e4c:	88fb      	ldrh	r3, [r7, #6]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_UART_Receive_IT+0x2a>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e016      	b.n	8007e84 <HAL_UART_Receive_IT+0x58>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <HAL_UART_Receive_IT+0x38>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e00f      	b.n	8007e84 <HAL_UART_Receive_IT+0x58>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	631a      	str	r2, [r3, #48]	; 0x30
 8007e72:	88fb      	ldrh	r3, [r7, #6]
 8007e74:	461a      	mov	r2, r3
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fab5 	bl	80083e8 <UART_Start_Receive_IT>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	e000      	b.n	8007e84 <HAL_UART_Receive_IT+0x58>
 8007e82:	2302      	movs	r3, #2
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_UART_IRQHandler>:
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b0ba      	sub	sp, #232	; 0xe8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10f      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x66>
 8007ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x66>
 8007ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x66>
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fb95 	bl	800861a <UART_Receive_IT>
 8007ef0:	e256      	b.n	80083a0 <HAL_UART_IRQHandler+0x514>
 8007ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 80de 	beq.w	80080b8 <HAL_UART_IRQHandler+0x22c>
 8007efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d106      	bne.n	8007f16 <HAL_UART_IRQHandler+0x8a>
 8007f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80d1 	beq.w	80080b8 <HAL_UART_IRQHandler+0x22c>
 8007f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <HAL_UART_IRQHandler+0xae>
 8007f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <HAL_UART_IRQHandler+0xae>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	f043 0201 	orr.w	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	641a      	str	r2, [r3, #64]	; 0x40
 8007f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <HAL_UART_IRQHandler+0xd2>
 8007f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <HAL_UART_IRQHandler+0xd2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f56:	f043 0202 	orr.w	r2, r3, #2
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	641a      	str	r2, [r3, #64]	; 0x40
 8007f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00b      	beq.n	8007f82 <HAL_UART_IRQHandler+0xf6>
 8007f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <HAL_UART_IRQHandler+0xf6>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	f043 0204 	orr.w	r2, r3, #4
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	641a      	str	r2, [r3, #64]	; 0x40
 8007f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f86:	f003 0308 	and.w	r3, r3, #8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d011      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x126>
 8007f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <HAL_UART_IRQHandler+0x11a>
 8007f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d005      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x126>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	f043 0208 	orr.w	r2, r3, #8
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 81ed 	beq.w	8008396 <HAL_UART_IRQHandler+0x50a>
 8007fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d008      	beq.n	8007fda <HAL_UART_IRQHandler+0x14e>
 8007fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fcc:	f003 0320 	and.w	r3, r3, #32
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <HAL_UART_IRQHandler+0x14e>
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fb20 	bl	800861a <UART_Receive_IT>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe4:	2b40      	cmp	r3, #64	; 0x40
 8007fe6:	bf0c      	ite	eq
 8007fe8:	2301      	moveq	r3, #1
 8007fea:	2300      	movne	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	f003 0308 	and.w	r3, r3, #8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d103      	bne.n	8008006 <HAL_UART_IRQHandler+0x17a>
 8007ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008002:	2b00      	cmp	r3, #0
 8008004:	d04f      	beq.n	80080a6 <HAL_UART_IRQHandler+0x21a>
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa28 	bl	800845c <UART_EndRxTransfer>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d141      	bne.n	800809e <HAL_UART_IRQHandler+0x212>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3314      	adds	r3, #20
 8008020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3314      	adds	r3, #20
 8008042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800804a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800804e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800805e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1d9      	bne.n	800801a <HAL_UART_IRQHandler+0x18e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	2b00      	cmp	r3, #0
 800806c:	d013      	beq.n	8008096 <HAL_UART_IRQHandler+0x20a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	4a7d      	ldr	r2, [pc, #500]	; (8008268 <HAL_UART_IRQHandler+0x3dc>)
 8008074:	651a      	str	r2, [r3, #80]	; 0x50
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	4618      	mov	r0, r3
 800807c:	f7fd fae9 	bl	8005652 <HAL_DMA_Abort_IT>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d016      	beq.n	80080b4 <HAL_UART_IRQHandler+0x228>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	e00e      	b.n	80080b4 <HAL_UART_IRQHandler+0x228>
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f990 	bl	80083bc <HAL_UART_ErrorCallback>
 800809c:	e00a      	b.n	80080b4 <HAL_UART_IRQHandler+0x228>
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f98c 	bl	80083bc <HAL_UART_ErrorCallback>
 80080a4:	e006      	b.n	80080b4 <HAL_UART_IRQHandler+0x228>
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f988 	bl	80083bc <HAL_UART_ErrorCallback>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	641a      	str	r2, [r3, #64]	; 0x40
 80080b2:	e170      	b.n	8008396 <HAL_UART_IRQHandler+0x50a>
 80080b4:	bf00      	nop
 80080b6:	e16e      	b.n	8008396 <HAL_UART_IRQHandler+0x50a>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080bc:	2b01      	cmp	r3, #1
 80080be:	f040 814a 	bne.w	8008356 <HAL_UART_IRQHandler+0x4ca>
 80080c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 8143 	beq.w	8008356 <HAL_UART_IRQHandler+0x4ca>
 80080d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 813c 	beq.w	8008356 <HAL_UART_IRQHandler+0x4ca>
 80080de:	2300      	movs	r3, #0
 80080e0:	60bb      	str	r3, [r7, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	60bb      	str	r3, [r7, #8]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fe:	2b40      	cmp	r3, #64	; 0x40
 8008100:	f040 80b4 	bne.w	800826c <HAL_UART_IRQHandler+0x3e0>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8008110:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 8140 	beq.w	800839a <HAL_UART_IRQHandler+0x50e>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800811e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008122:	429a      	cmp	r2, r3
 8008124:	f080 8139 	bcs.w	800839a <HAL_UART_IRQHandler+0x50e>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800812e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800813a:	f000 8088 	beq.w	800824e <HAL_UART_IRQHandler+0x3c2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	330c      	adds	r3, #12
 8008144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800815c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	330c      	adds	r3, #12
 8008166:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800816a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800816e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008172:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008176:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1d9      	bne.n	800813e <HAL_UART_IRQHandler+0x2b2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3314      	adds	r3, #20
 8008190:	677b      	str	r3, [r7, #116]	; 0x74
 8008192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	673b      	str	r3, [r7, #112]	; 0x70
 800819a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800819c:	f023 0301 	bic.w	r3, r3, #1
 80081a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3314      	adds	r3, #20
 80081aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	67bb      	str	r3, [r7, #120]	; 0x78
 80081c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e1      	bne.n	800818a <HAL_UART_IRQHandler+0x2fe>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3314      	adds	r3, #20
 80081cc:	663b      	str	r3, [r7, #96]	; 0x60
 80081ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3314      	adds	r3, #20
 80081e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80081ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	667b      	str	r3, [r7, #100]	; 0x64
 80081f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e3      	bne.n	80081c6 <HAL_UART_IRQHandler+0x33a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	631a      	str	r2, [r3, #48]	; 0x30
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	330c      	adds	r3, #12
 8008212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	64bb      	str	r3, [r7, #72]	; 0x48
 800821c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800821e:	f023 0310 	bic.w	r3, r3, #16
 8008222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	330c      	adds	r3, #12
 800822c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008230:	65ba      	str	r2, [r7, #88]	; 0x58
 8008232:	657b      	str	r3, [r7, #84]	; 0x54
 8008234:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008236:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	653b      	str	r3, [r7, #80]	; 0x50
 800823e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e3      	bne.n	800820c <HAL_UART_IRQHandler+0x380>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	4618      	mov	r0, r3
 800824a:	f7fd f992 	bl	8005572 <HAL_DMA_Abort>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008256:	b29b      	uxth	r3, r3
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	b29b      	uxth	r3, r3
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f8b6 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
 8008264:	e099      	b.n	800839a <HAL_UART_IRQHandler+0x50e>
 8008266:	bf00      	nop
 8008268:	08008523 	.word	0x08008523
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008274:	b29b      	uxth	r3, r3
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 808b 	beq.w	800839e <HAL_UART_IRQHandler+0x512>
 8008288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8086 	beq.w	800839e <HAL_UART_IRQHandler+0x512>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	330c      	adds	r3, #12
 8008298:	63bb      	str	r3, [r7, #56]	; 0x38
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	330c      	adds	r3, #12
 80082b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80082b6:	647a      	str	r2, [r7, #68]	; 0x44
 80082b8:	643b      	str	r3, [r7, #64]	; 0x40
 80082ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e3      	bne.n	8008292 <HAL_UART_IRQHandler+0x406>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3314      	adds	r3, #20
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	e853 3f00 	ldrex	r3, [r3]
 80082d8:	623b      	str	r3, [r7, #32]
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	f023 0301 	bic.w	r3, r3, #1
 80082e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3314      	adds	r3, #20
 80082ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082ee:	633a      	str	r2, [r7, #48]	; 0x30
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e3      	bne.n	80082ca <HAL_UART_IRQHandler+0x43e>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	631a      	str	r2, [r3, #48]	; 0x30
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	330c      	adds	r3, #12
 8008316:	613b      	str	r3, [r7, #16]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 0310 	bic.w	r3, r3, #16
 8008326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	330c      	adds	r3, #12
 8008330:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008334:	61fa      	str	r2, [r7, #28]
 8008336:	61bb      	str	r3, [r7, #24]
 8008338:	69b9      	ldr	r1, [r7, #24]
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	e841 2300 	strex	r3, r2, [r1]
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e3      	bne.n	8008310 <HAL_UART_IRQHandler+0x484>
 8008348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f83e 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
 8008354:	e023      	b.n	800839e <HAL_UART_IRQHandler+0x512>
 8008356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <HAL_UART_IRQHandler+0x4ea>
 8008362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_UART_IRQHandler+0x4ea>
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f8eb 	bl	800854a <UART_Transmit_IT>
 8008374:	e014      	b.n	80083a0 <HAL_UART_IRQHandler+0x514>
 8008376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00e      	beq.n	80083a0 <HAL_UART_IRQHandler+0x514>
 8008382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838a:	2b00      	cmp	r3, #0
 800838c:	d008      	beq.n	80083a0 <HAL_UART_IRQHandler+0x514>
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f92b 	bl	80085ea <UART_EndTransmit_IT>
 8008394:	e004      	b.n	80083a0 <HAL_UART_IRQHandler+0x514>
 8008396:	bf00      	nop
 8008398:	e002      	b.n	80083a0 <HAL_UART_IRQHandler+0x514>
 800839a:	bf00      	nop
 800839c:	e000      	b.n	80083a0 <HAL_UART_IRQHandler+0x514>
 800839e:	bf00      	nop
 80083a0:	37e8      	adds	r7, #232	; 0xe8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop

080083a8 <HAL_UART_TxCpltCallback>:
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_UART_ErrorCallback>:
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_UARTEx_RxEventCallback>:
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	807b      	strh	r3, [r7, #2]
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <UART_Start_Receive_IT>:
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	80fb      	strh	r3, [r7, #6]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	88fa      	ldrh	r2, [r7, #6]
 8008400:	859a      	strh	r2, [r3, #44]	; 0x2c
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	88fa      	ldrh	r2, [r7, #6]
 8008406:	85da      	strh	r2, [r3, #46]	; 0x2e
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	641a      	str	r2, [r3, #64]	; 0x40
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2222      	movs	r2, #34	; 0x22
 8008412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800842c:	60da      	str	r2, [r3, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	695a      	ldr	r2, [r3, #20]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f042 0201 	orr.w	r2, r2, #1
 800843c:	615a      	str	r2, [r3, #20]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0220 	orr.w	r2, r2, #32
 800844c:	60da      	str	r2, [r3, #12]
 800844e:	2300      	movs	r3, #0
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <UART_EndRxTransfer>:
 800845c:	b480      	push	{r7}
 800845e:	b095      	sub	sp, #84	; 0x54
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	330c      	adds	r3, #12
 800846a:	637b      	str	r3, [r7, #52]	; 0x34
 800846c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	633b      	str	r3, [r7, #48]	; 0x30
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800847a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	330c      	adds	r3, #12
 8008482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008484:	643a      	str	r2, [r7, #64]	; 0x40
 8008486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008488:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800848a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	63bb      	str	r3, [r7, #56]	; 0x38
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e5      	bne.n	8008464 <UART_EndRxTransfer+0x8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3314      	adds	r3, #20
 800849e:	623b      	str	r3, [r7, #32]
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	61fb      	str	r3, [r7, #28]
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f023 0301 	bic.w	r3, r3, #1
 80084ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3314      	adds	r3, #20
 80084b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80084bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	627b      	str	r3, [r7, #36]	; 0x24
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_EndRxTransfer+0x3c>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d119      	bne.n	8008508 <UART_EndRxTransfer+0xac>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	60bb      	str	r3, [r7, #8]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f023 0310 	bic.w	r3, r3, #16
 80084ea:	647b      	str	r3, [r7, #68]	; 0x44
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	330c      	adds	r3, #12
 80084f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084f4:	61ba      	str	r2, [r7, #24]
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	6979      	ldr	r1, [r7, #20]
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	613b      	str	r3, [r7, #16]
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e5      	bne.n	80084d4 <UART_EndRxTransfer+0x78>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2220      	movs	r2, #32
 800850c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	631a      	str	r2, [r3, #48]	; 0x30
 8008516:	bf00      	nop
 8008518:	3754      	adds	r7, #84	; 0x54
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <UART_DMAAbortOnError>:
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	85da      	strh	r2, [r3, #46]	; 0x2e
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	84da      	strh	r2, [r3, #38]	; 0x26
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f7ff ff3d 	bl	80083bc <HAL_UART_ErrorCallback>
 8008542:	bf00      	nop
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <UART_Transmit_IT>:
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b21      	cmp	r3, #33	; 0x21
 800855c:	d13e      	bne.n	80085dc <UART_Transmit_IT+0x92>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008566:	d114      	bne.n	8008592 <UART_Transmit_IT+0x48>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d110      	bne.n	8008592 <UART_Transmit_IT+0x48>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008584:	605a      	str	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	1c9a      	adds	r2, r3, #2
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	621a      	str	r2, [r3, #32]
 8008590:	e008      	b.n	80085a4 <UART_Transmit_IT+0x5a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	1c59      	adds	r1, r3, #1
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6211      	str	r1, [r2, #32]
 800859c:	781a      	ldrb	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	605a      	str	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4619      	mov	r1, r3
 80085b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10f      	bne.n	80085d8 <UART_Transmit_IT+0x8e>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085c6:	60da      	str	r2, [r3, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085d6:	60da      	str	r2, [r3, #12]
 80085d8:	2300      	movs	r3, #0
 80085da:	e000      	b.n	80085de <UART_Transmit_IT+0x94>
 80085dc:	2302      	movs	r3, #2
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <UART_EndTransmit_IT>:
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68da      	ldr	r2, [r3, #12]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008600:	60da      	str	r2, [r3, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff fecc 	bl	80083a8 <HAL_UART_TxCpltCallback>
 8008610:	2300      	movs	r3, #0
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <UART_Receive_IT>:
 800861a:	b580      	push	{r7, lr}
 800861c:	b08c      	sub	sp, #48	; 0x30
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b22      	cmp	r3, #34	; 0x22
 800862c:	f040 80ab 	bne.w	8008786 <UART_Receive_IT+0x16c>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008638:	d117      	bne.n	800866a <UART_Receive_IT+0x50>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d113      	bne.n	800866a <UART_Receive_IT+0x50>
 8008642:	2300      	movs	r3, #0
 8008644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	b29b      	uxth	r3, r3
 8008654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008658:	b29a      	uxth	r2, r3
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	801a      	strh	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008662:	1c9a      	adds	r2, r3, #2
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	629a      	str	r2, [r3, #40]	; 0x28
 8008668:	e026      	b.n	80086b8 <UART_Receive_IT+0x9e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008670:	2300      	movs	r3, #0
 8008672:	62bb      	str	r3, [r7, #40]	; 0x28
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867c:	d007      	beq.n	800868e <UART_Receive_IT+0x74>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <UART_Receive_IT+0x82>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d106      	bne.n	800869c <UART_Receive_IT+0x82>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	b2da      	uxtb	r2, r3
 8008696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008698:	701a      	strb	r2, [r3, #0]
 800869a:	e008      	b.n	80086ae <UART_Receive_IT+0x94>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ac:	701a      	strb	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	629a      	str	r2, [r3, #40]	; 0x28
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	3b01      	subs	r3, #1
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	4619      	mov	r1, r3
 80086c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d15a      	bne.n	8008782 <UART_Receive_IT+0x168>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 0220 	bic.w	r2, r2, #32
 80086da:	60da      	str	r2, [r3, #12]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086ea:	60da      	str	r2, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	695a      	ldr	r2, [r3, #20]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 0201 	bic.w	r2, r2, #1
 80086fa:	615a      	str	r2, [r3, #20]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2220      	movs	r2, #32
 8008700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008708:	2b01      	cmp	r3, #1
 800870a:	d135      	bne.n	8008778 <UART_Receive_IT+0x15e>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	631a      	str	r2, [r3, #48]	; 0x30
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	330c      	adds	r3, #12
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	613b      	str	r3, [r7, #16]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f023 0310 	bic.w	r3, r3, #16
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	330c      	adds	r3, #12
 8008730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008732:	623a      	str	r2, [r7, #32]
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	69f9      	ldr	r1, [r7, #28]
 8008738:	6a3a      	ldr	r2, [r7, #32]
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	61bb      	str	r3, [r7, #24]
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e5      	bne.n	8008712 <UART_Receive_IT+0xf8>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0310 	and.w	r3, r3, #16
 8008750:	2b10      	cmp	r3, #16
 8008752:	d10a      	bne.n	800876a <UART_Receive_IT+0x150>
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800876e:	4619      	mov	r1, r3
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff fe2d 	bl	80083d0 <HAL_UARTEx_RxEventCallback>
 8008776:	e002      	b.n	800877e <UART_Receive_IT+0x164>
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7f8 fcd9 	bl	8001130 <HAL_UART_RxCpltCallback>
 800877e:	2300      	movs	r3, #0
 8008780:	e002      	b.n	8008788 <UART_Receive_IT+0x16e>
 8008782:	2300      	movs	r3, #0
 8008784:	e000      	b.n	8008788 <UART_Receive_IT+0x16e>
 8008786:	2302      	movs	r3, #2
 8008788:	4618      	mov	r0, r3
 800878a:	3730      	adds	r7, #48	; 0x30
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <UART_SetConfig>:
 8008790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008794:	b09f      	sub	sp, #124	; 0x7c
 8008796:	af00      	add	r7, sp, #0
 8008798:	66f8      	str	r0, [r7, #108]	; 0x6c
 800879a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a6:	68d9      	ldr	r1, [r3, #12]
 80087a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	ea40 0301 	orr.w	r3, r0, r1
 80087b0:	6113      	str	r3, [r2, #16]
 80087b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b4:	689a      	ldr	r2, [r3, #8]
 80087b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	431a      	orrs	r2, r3
 80087bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	431a      	orrs	r2, r3
 80087c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	673b      	str	r3, [r7, #112]	; 0x70
 80087ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087d4:	f021 010c 	bic.w	r1, r1, #12
 80087d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087de:	430b      	orrs	r3, r1
 80087e0:	60d3      	str	r3, [r2, #12]
 80087e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ee:	6999      	ldr	r1, [r3, #24]
 80087f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	ea40 0301 	orr.w	r3, r0, r1
 80087f8:	6153      	str	r3, [r2, #20]
 80087fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	4bc5      	ldr	r3, [pc, #788]	; (8008b14 <UART_SetConfig+0x384>)
 8008800:	429a      	cmp	r2, r3
 8008802:	d004      	beq.n	800880e <UART_SetConfig+0x7e>
 8008804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	4bc3      	ldr	r3, [pc, #780]	; (8008b18 <UART_SetConfig+0x388>)
 800880a:	429a      	cmp	r2, r3
 800880c:	d103      	bne.n	8008816 <UART_SetConfig+0x86>
 800880e:	f7fd ff21 	bl	8006654 <HAL_RCC_GetPCLK2Freq>
 8008812:	6778      	str	r0, [r7, #116]	; 0x74
 8008814:	e002      	b.n	800881c <UART_SetConfig+0x8c>
 8008816:	f7fd ff09 	bl	800662c <HAL_RCC_GetPCLK1Freq>
 800881a:	6778      	str	r0, [r7, #116]	; 0x74
 800881c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008824:	f040 80b6 	bne.w	8008994 <UART_SetConfig+0x204>
 8008828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800882a:	461c      	mov	r4, r3
 800882c:	f04f 0500 	mov.w	r5, #0
 8008830:	4622      	mov	r2, r4
 8008832:	462b      	mov	r3, r5
 8008834:	1891      	adds	r1, r2, r2
 8008836:	6439      	str	r1, [r7, #64]	; 0x40
 8008838:	415b      	adcs	r3, r3
 800883a:	647b      	str	r3, [r7, #68]	; 0x44
 800883c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008840:	1912      	adds	r2, r2, r4
 8008842:	eb45 0303 	adc.w	r3, r5, r3
 8008846:	f04f 0000 	mov.w	r0, #0
 800884a:	f04f 0100 	mov.w	r1, #0
 800884e:	00d9      	lsls	r1, r3, #3
 8008850:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008854:	00d0      	lsls	r0, r2, #3
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	1911      	adds	r1, r2, r4
 800885c:	6639      	str	r1, [r7, #96]	; 0x60
 800885e:	416b      	adcs	r3, r5
 8008860:	667b      	str	r3, [r7, #100]	; 0x64
 8008862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	461a      	mov	r2, r3
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	1891      	adds	r1, r2, r2
 800886e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008870:	415b      	adcs	r3, r3
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008878:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800887c:	f7f8 f964 	bl	8000b48 <__aeabi_uldivmod>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4ba5      	ldr	r3, [pc, #660]	; (8008b1c <UART_SetConfig+0x38c>)
 8008886:	fba3 2302 	umull	r2, r3, r3, r2
 800888a:	095b      	lsrs	r3, r3, #5
 800888c:	011e      	lsls	r6, r3, #4
 800888e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008890:	461c      	mov	r4, r3
 8008892:	f04f 0500 	mov.w	r5, #0
 8008896:	4622      	mov	r2, r4
 8008898:	462b      	mov	r3, r5
 800889a:	1891      	adds	r1, r2, r2
 800889c:	6339      	str	r1, [r7, #48]	; 0x30
 800889e:	415b      	adcs	r3, r3
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
 80088a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088a6:	1912      	adds	r2, r2, r4
 80088a8:	eb45 0303 	adc.w	r3, r5, r3
 80088ac:	f04f 0000 	mov.w	r0, #0
 80088b0:	f04f 0100 	mov.w	r1, #0
 80088b4:	00d9      	lsls	r1, r3, #3
 80088b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088ba:	00d0      	lsls	r0, r2, #3
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	1911      	adds	r1, r2, r4
 80088c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80088c4:	416b      	adcs	r3, r5
 80088c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	461a      	mov	r2, r3
 80088ce:	f04f 0300 	mov.w	r3, #0
 80088d2:	1891      	adds	r1, r2, r2
 80088d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80088d6:	415b      	adcs	r3, r3
 80088d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80088e2:	f7f8 f931 	bl	8000b48 <__aeabi_uldivmod>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4b8c      	ldr	r3, [pc, #560]	; (8008b1c <UART_SetConfig+0x38c>)
 80088ec:	fba3 1302 	umull	r1, r3, r3, r2
 80088f0:	095b      	lsrs	r3, r3, #5
 80088f2:	2164      	movs	r1, #100	; 0x64
 80088f4:	fb01 f303 	mul.w	r3, r1, r3
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	3332      	adds	r3, #50	; 0x32
 80088fe:	4a87      	ldr	r2, [pc, #540]	; (8008b1c <UART_SetConfig+0x38c>)
 8008900:	fba2 2303 	umull	r2, r3, r2, r3
 8008904:	095b      	lsrs	r3, r3, #5
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800890c:	441e      	add	r6, r3
 800890e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008910:	4618      	mov	r0, r3
 8008912:	f04f 0100 	mov.w	r1, #0
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	1894      	adds	r4, r2, r2
 800891c:	623c      	str	r4, [r7, #32]
 800891e:	415b      	adcs	r3, r3
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
 8008922:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008926:	1812      	adds	r2, r2, r0
 8008928:	eb41 0303 	adc.w	r3, r1, r3
 800892c:	f04f 0400 	mov.w	r4, #0
 8008930:	f04f 0500 	mov.w	r5, #0
 8008934:	00dd      	lsls	r5, r3, #3
 8008936:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800893a:	00d4      	lsls	r4, r2, #3
 800893c:	4622      	mov	r2, r4
 800893e:	462b      	mov	r3, r5
 8008940:	1814      	adds	r4, r2, r0
 8008942:	653c      	str	r4, [r7, #80]	; 0x50
 8008944:	414b      	adcs	r3, r1
 8008946:	657b      	str	r3, [r7, #84]	; 0x54
 8008948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	461a      	mov	r2, r3
 800894e:	f04f 0300 	mov.w	r3, #0
 8008952:	1891      	adds	r1, r2, r2
 8008954:	61b9      	str	r1, [r7, #24]
 8008956:	415b      	adcs	r3, r3
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800895e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008962:	f7f8 f8f1 	bl	8000b48 <__aeabi_uldivmod>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	4b6c      	ldr	r3, [pc, #432]	; (8008b1c <UART_SetConfig+0x38c>)
 800896c:	fba3 1302 	umull	r1, r3, r3, r2
 8008970:	095b      	lsrs	r3, r3, #5
 8008972:	2164      	movs	r1, #100	; 0x64
 8008974:	fb01 f303 	mul.w	r3, r1, r3
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	3332      	adds	r3, #50	; 0x32
 800897e:	4a67      	ldr	r2, [pc, #412]	; (8008b1c <UART_SetConfig+0x38c>)
 8008980:	fba2 2303 	umull	r2, r3, r2, r3
 8008984:	095b      	lsrs	r3, r3, #5
 8008986:	f003 0207 	and.w	r2, r3, #7
 800898a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4432      	add	r2, r6
 8008990:	609a      	str	r2, [r3, #8]
 8008992:	e0b9      	b.n	8008b08 <UART_SetConfig+0x378>
 8008994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008996:	461c      	mov	r4, r3
 8008998:	f04f 0500 	mov.w	r5, #0
 800899c:	4622      	mov	r2, r4
 800899e:	462b      	mov	r3, r5
 80089a0:	1891      	adds	r1, r2, r2
 80089a2:	6139      	str	r1, [r7, #16]
 80089a4:	415b      	adcs	r3, r3
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089ac:	1912      	adds	r2, r2, r4
 80089ae:	eb45 0303 	adc.w	r3, r5, r3
 80089b2:	f04f 0000 	mov.w	r0, #0
 80089b6:	f04f 0100 	mov.w	r1, #0
 80089ba:	00d9      	lsls	r1, r3, #3
 80089bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089c0:	00d0      	lsls	r0, r2, #3
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	eb12 0804 	adds.w	r8, r2, r4
 80089ca:	eb43 0905 	adc.w	r9, r3, r5
 80089ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f04f 0100 	mov.w	r1, #0
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	008b      	lsls	r3, r1, #2
 80089e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089e6:	0082      	lsls	r2, r0, #2
 80089e8:	4640      	mov	r0, r8
 80089ea:	4649      	mov	r1, r9
 80089ec:	f7f8 f8ac 	bl	8000b48 <__aeabi_uldivmod>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4b49      	ldr	r3, [pc, #292]	; (8008b1c <UART_SetConfig+0x38c>)
 80089f6:	fba3 2302 	umull	r2, r3, r3, r2
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	011e      	lsls	r6, r3, #4
 80089fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a00:	4618      	mov	r0, r3
 8008a02:	f04f 0100 	mov.w	r1, #0
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	1894      	adds	r4, r2, r2
 8008a0c:	60bc      	str	r4, [r7, #8]
 8008a0e:	415b      	adcs	r3, r3
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a16:	1812      	adds	r2, r2, r0
 8008a18:	eb41 0303 	adc.w	r3, r1, r3
 8008a1c:	f04f 0400 	mov.w	r4, #0
 8008a20:	f04f 0500 	mov.w	r5, #0
 8008a24:	00dd      	lsls	r5, r3, #3
 8008a26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a2a:	00d4      	lsls	r4, r2, #3
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	1814      	adds	r4, r2, r0
 8008a32:	64bc      	str	r4, [r7, #72]	; 0x48
 8008a34:	414b      	adcs	r3, r1
 8008a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f04f 0100 	mov.w	r1, #0
 8008a42:	f04f 0200 	mov.w	r2, #0
 8008a46:	f04f 0300 	mov.w	r3, #0
 8008a4a:	008b      	lsls	r3, r1, #2
 8008a4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a50:	0082      	lsls	r2, r0, #2
 8008a52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a56:	f7f8 f877 	bl	8000b48 <__aeabi_uldivmod>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4b2f      	ldr	r3, [pc, #188]	; (8008b1c <UART_SetConfig+0x38c>)
 8008a60:	fba3 1302 	umull	r1, r3, r3, r2
 8008a64:	095b      	lsrs	r3, r3, #5
 8008a66:	2164      	movs	r1, #100	; 0x64
 8008a68:	fb01 f303 	mul.w	r3, r1, r3
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	011b      	lsls	r3, r3, #4
 8008a70:	3332      	adds	r3, #50	; 0x32
 8008a72:	4a2a      	ldr	r2, [pc, #168]	; (8008b1c <UART_SetConfig+0x38c>)
 8008a74:	fba2 2303 	umull	r2, r3, r2, r3
 8008a78:	095b      	lsrs	r3, r3, #5
 8008a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a7e:	441e      	add	r6, r3
 8008a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a82:	4618      	mov	r0, r3
 8008a84:	f04f 0100 	mov.w	r1, #0
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	1894      	adds	r4, r2, r2
 8008a8e:	603c      	str	r4, [r7, #0]
 8008a90:	415b      	adcs	r3, r3
 8008a92:	607b      	str	r3, [r7, #4]
 8008a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a98:	1812      	adds	r2, r2, r0
 8008a9a:	eb41 0303 	adc.w	r3, r1, r3
 8008a9e:	f04f 0400 	mov.w	r4, #0
 8008aa2:	f04f 0500 	mov.w	r5, #0
 8008aa6:	00dd      	lsls	r5, r3, #3
 8008aa8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008aac:	00d4      	lsls	r4, r2, #3
 8008aae:	4622      	mov	r2, r4
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	eb12 0a00 	adds.w	sl, r2, r0
 8008ab6:	eb43 0b01 	adc.w	fp, r3, r1
 8008aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f04f 0100 	mov.w	r1, #0
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	f04f 0300 	mov.w	r3, #0
 8008acc:	008b      	lsls	r3, r1, #2
 8008ace:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ad2:	0082      	lsls	r2, r0, #2
 8008ad4:	4650      	mov	r0, sl
 8008ad6:	4659      	mov	r1, fp
 8008ad8:	f7f8 f836 	bl	8000b48 <__aeabi_uldivmod>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4b0e      	ldr	r3, [pc, #56]	; (8008b1c <UART_SetConfig+0x38c>)
 8008ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8008ae6:	095b      	lsrs	r3, r3, #5
 8008ae8:	2164      	movs	r1, #100	; 0x64
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	3332      	adds	r3, #50	; 0x32
 8008af4:	4a09      	ldr	r2, [pc, #36]	; (8008b1c <UART_SetConfig+0x38c>)
 8008af6:	fba2 2303 	umull	r2, r3, r2, r3
 8008afa:	095b      	lsrs	r3, r3, #5
 8008afc:	f003 020f 	and.w	r2, r3, #15
 8008b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4432      	add	r2, r6
 8008b06:	609a      	str	r2, [r3, #8]
 8008b08:	bf00      	nop
 8008b0a:	377c      	adds	r7, #124	; 0x7c
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	bf00      	nop
 8008b14:	40011000 	.word	0x40011000
 8008b18:	40011400 	.word	0x40011400
 8008b1c:	51eb851f 	.word	0x51eb851f

08008b20 <makeFreeRtosPriority>:
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	80fb      	strh	r3, [r7, #6]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60fb      	str	r3, [r7, #12]
 8008b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b32:	2b84      	cmp	r3, #132	; 0x84
 8008b34:	d005      	beq.n	8008b42 <makeFreeRtosPriority+0x22>
 8008b36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	3303      	adds	r3, #3
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <inHandlerMode>:
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	f3ef 8305 	mrs	r3, IPSR
 8008b5a:	607b      	str	r3, [r7, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bf14      	ite	ne
 8008b62:	2301      	movne	r3, #1
 8008b64:	2300      	moveq	r3, #0
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <osKernelStart>:
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	f001 fad2 	bl	800a120 <vTaskStartScheduler>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <osThreadCreate>:
 8008b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b84:	b089      	sub	sp, #36	; 0x24
 8008b86:	af04      	add	r7, sp, #16
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d020      	beq.n	8008bd6 <osThreadCreate+0x54>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01c      	beq.n	8008bd6 <osThreadCreate+0x54>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685c      	ldr	r4, [r3, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681d      	ldr	r5, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	691e      	ldr	r6, [r3, #16]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff ffb6 	bl	8008b20 <makeFreeRtosPriority>
 8008bb4:	4601      	mov	r1, r0
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6992      	ldr	r2, [r2, #24]
 8008bbe:	9202      	str	r2, [sp, #8]
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	9100      	str	r1, [sp, #0]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	4632      	mov	r2, r6
 8008bc8:	4629      	mov	r1, r5
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 ff4c 	bl	8009a68 <xTaskCreateStatic>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e01c      	b.n	8008c10 <osThreadCreate+0x8e>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685c      	ldr	r4, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681d      	ldr	r5, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	b29e      	uxth	r6, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff ff98 	bl	8008b20 <makeFreeRtosPriority>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	f107 030c 	add.w	r3, r7, #12
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	9200      	str	r2, [sp, #0]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	4629      	mov	r1, r5
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 ff8e 	bl	8009b22 <xTaskCreate>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d001      	beq.n	8008c10 <osThreadCreate+0x8e>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e000      	b.n	8008c12 <osThreadCreate+0x90>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c1a <osDelay>:
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <osDelay+0x16>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	e000      	b.n	8008c32 <osDelay+0x18>
 8008c30:	2301      	movs	r3, #1
 8008c32:	4618      	mov	r0, r3
 8008c34:	f001 f8ac 	bl	8009d90 <vTaskDelay>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <osSemaphoreCreate>:
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b086      	sub	sp, #24
 8008c46:	af02      	add	r7, sp, #8
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00f      	beq.n	8008c74 <osSemaphoreCreate+0x32>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d10a      	bne.n	8008c70 <osSemaphoreCreate+0x2e>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	2203      	movs	r2, #3
 8008c60:	9200      	str	r2, [sp, #0]
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	2001      	movs	r0, #1
 8008c68:	f000 f9ec 	bl	8009044 <xQueueGenericCreateStatic>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	e016      	b.n	8008c9e <osSemaphoreCreate+0x5c>
 8008c70:	2300      	movs	r3, #0
 8008c72:	e014      	b.n	8008c9e <osSemaphoreCreate+0x5c>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d110      	bne.n	8008c9c <osSemaphoreCreate+0x5a>
 8008c7a:	2203      	movs	r2, #3
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	2001      	movs	r0, #1
 8008c80:	f000 fa58 	bl	8009134 <xQueueGenericCreate>
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <osSemaphoreCreate+0x56>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2100      	movs	r1, #0
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 faa8 	bl	80091e8 <xQueueGenericSend>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	e000      	b.n	8008c9e <osSemaphoreCreate+0x5c>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <osSemaphoreWait>:
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60bb      	str	r3, [r7, #8]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <osSemaphoreWait+0x18>
 8008cbc:	2380      	movs	r3, #128	; 0x80
 8008cbe:	e03a      	b.n	8008d36 <osSemaphoreWait+0x8e>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cca:	d103      	bne.n	8008cd4 <osSemaphoreWait+0x2c>
 8008ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	e009      	b.n	8008ce8 <osSemaphoreWait+0x40>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d006      	beq.n	8008ce8 <osSemaphoreWait+0x40>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <osSemaphoreWait+0x40>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	f7ff ff32 	bl	8008b50 <inHandlerMode>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d017      	beq.n	8008d22 <osSemaphoreWait+0x7a>
 8008cf2:	f107 0308 	add.w	r3, r7, #8
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fd0c 	bl	8009718 <xQueueReceiveFromISR>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d001      	beq.n	8008d0a <osSemaphoreWait+0x62>
 8008d06:	23ff      	movs	r3, #255	; 0xff
 8008d08:	e015      	b.n	8008d36 <osSemaphoreWait+0x8e>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d011      	beq.n	8008d34 <osSemaphoreWait+0x8c>
 8008d10:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <osSemaphoreWait+0x98>)
 8008d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	e008      	b.n	8008d34 <osSemaphoreWait+0x8c>
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fbeb 	bl	8009500 <xQueueSemaphoreTake>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d001      	beq.n	8008d34 <osSemaphoreWait+0x8c>
 8008d30:	23ff      	movs	r3, #255	; 0xff
 8008d32:	e000      	b.n	8008d36 <osSemaphoreWait+0x8e>
 8008d34:	2300      	movs	r3, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <osSemaphoreRelease>:
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	2300      	movs	r3, #0
 8008d52:	60bb      	str	r3, [r7, #8]
 8008d54:	f7ff fefc 	bl	8008b50 <inHandlerMode>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d016      	beq.n	8008d8c <osSemaphoreRelease+0x48>
 8008d5e:	f107 0308 	add.w	r3, r7, #8
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fb3d 	bl	80093e4 <xQueueGiveFromISR>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d001      	beq.n	8008d74 <osSemaphoreRelease+0x30>
 8008d70:	23ff      	movs	r3, #255	; 0xff
 8008d72:	e017      	b.n	8008da4 <osSemaphoreRelease+0x60>
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d013      	beq.n	8008da2 <osSemaphoreRelease+0x5e>
 8008d7a:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <osSemaphoreRelease+0x68>)
 8008d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	e00a      	b.n	8008da2 <osSemaphoreRelease+0x5e>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2100      	movs	r1, #0
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa28 	bl	80091e8 <xQueueGenericSend>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d001      	beq.n	8008da2 <osSemaphoreRelease+0x5e>
 8008d9e:	23ff      	movs	r3, #255	; 0xff
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <osThreadSuspend>:
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 f81d 	bl	8009df8 <vTaskSuspend>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <osThreadResume>:
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	f7ff febe 	bl	8008b50 <inHandlerMode>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00e      	beq.n	8008df8 <osThreadResume+0x30>
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f001 f92e 	bl	800a03c <xTaskResumeFromISR>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d10b      	bne.n	8008dfe <osThreadResume+0x36>
 8008de6:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <osThreadResume+0x40>)
 8008de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	e002      	b.n	8008dfe <osThreadResume+0x36>
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 f8c1 	bl	8009f80 <vTaskResume>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	e000ed04 	.word	0xe000ed04

08008e0c <vListInitialise>:
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f103 0208 	add.w	r2, r3, #8
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	605a      	str	r2, [r3, #4]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e24:	609a      	str	r2, [r3, #8]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f103 0208 	add.w	r2, r3, #8
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60da      	str	r2, [r3, #12]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f103 0208 	add.w	r2, r3, #8
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	611a      	str	r2, [r3, #16]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <vListInitialiseItem>:
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	611a      	str	r2, [r3, #16]
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <vListInsertEnd>:
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	6039      	str	r1, [r7, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	605a      	str	r2, [r3, #4]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	609a      	str	r2, [r3, #8]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	605a      	str	r2, [r3, #4]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	609a      	str	r2, [r3, #8]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	611a      	str	r2, [r3, #16]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	bf00      	nop
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <vListInsert>:
 8008eae:	b480      	push	{r7}
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60bb      	str	r3, [r7, #8]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ec4:	d103      	bne.n	8008ece <vListInsert+0x20>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e00c      	b.n	8008ee8 <vListInsert+0x3a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	e002      	b.n	8008edc <vListInsert+0x2e>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d2f6      	bcs.n	8008ed6 <vListInsert+0x28>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	605a      	str	r2, [r3, #4]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	609a      	str	r2, [r3, #8]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	609a      	str	r2, [r3, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	605a      	str	r2, [r3, #4]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	611a      	str	r2, [r3, #16]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <uxListRemove>:
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	60fb      	str	r3, [r7, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	6892      	ldr	r2, [r2, #8]
 8008f36:	609a      	str	r2, [r3, #8]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	6852      	ldr	r2, [r2, #4]
 8008f40:	605a      	str	r2, [r3, #4]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d103      	bne.n	8008f54 <uxListRemove+0x34>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	605a      	str	r2, [r3, #4]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	611a      	str	r2, [r3, #16]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	1e5a      	subs	r2, r3, #1
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <xQueueGenericReset>:
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10a      	bne.n	8008f9e <xQueueGenericReset+0x2a>
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	60bb      	str	r3, [r7, #8]
 8008f9a:	bf00      	nop
 8008f9c:	e7fe      	b.n	8008f9c <xQueueGenericReset+0x28>
 8008f9e:	f002 f809 	bl	800afb4 <vPortEnterCritical>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008faa:	68f9      	ldr	r1, [r7, #12]
 8008fac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008fae:	fb01 f303 	mul.w	r3, r1, r3
 8008fb2:	441a      	add	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	609a      	str	r2, [r3, #8]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	605a      	str	r2, [r3, #4]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	68f9      	ldr	r1, [r7, #12]
 8008fd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008fd4:	fb01 f303 	mul.w	r3, r1, r3
 8008fd8:	441a      	add	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	60da      	str	r2, [r3, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	22ff      	movs	r2, #255	; 0xff
 8008fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	22ff      	movs	r2, #255	; 0xff
 8008fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d114      	bne.n	800901e <xQueueGenericReset+0xaa>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01a      	beq.n	8009032 <xQueueGenericReset+0xbe>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	3310      	adds	r3, #16
 8009000:	4618      	mov	r0, r3
 8009002:	f001 facf 	bl	800a5a4 <xTaskRemoveFromEventList>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d012      	beq.n	8009032 <xQueueGenericReset+0xbe>
 800900c:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <xQueueGenericReset+0xcc>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	e009      	b.n	8009032 <xQueueGenericReset+0xbe>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3310      	adds	r3, #16
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff fef2 	bl	8008e0c <vListInitialise>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3324      	adds	r3, #36	; 0x24
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff feed 	bl	8008e0c <vListInitialise>
 8009032:	f001 ffef 	bl	800b014 <vPortExitCritical>
 8009036:	2301      	movs	r3, #1
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	e000ed04 	.word	0xe000ed04

08009044 <xQueueGenericCreateStatic>:
 8009044:	b580      	push	{r7, lr}
 8009046:	b08e      	sub	sp, #56	; 0x38
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10a      	bne.n	800906e <xQueueGenericCreateStatic+0x2a>
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	62bb      	str	r3, [r7, #40]	; 0x28
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xQueueGenericCreateStatic+0x28>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <xQueueGenericCreateStatic+0x46>
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	627b      	str	r3, [r7, #36]	; 0x24
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <xQueueGenericCreateStatic+0x44>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <xQueueGenericCreateStatic+0x52>
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <xQueueGenericCreateStatic+0x56>
 8009096:	2301      	movs	r3, #1
 8009098:	e000      	b.n	800909c <xQueueGenericCreateStatic+0x58>
 800909a:	2300      	movs	r3, #0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <xQueueGenericCreateStatic+0x72>
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	623b      	str	r3, [r7, #32]
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xQueueGenericCreateStatic+0x70>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <xQueueGenericCreateStatic+0x7e>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <xQueueGenericCreateStatic+0x82>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e000      	b.n	80090c8 <xQueueGenericCreateStatic+0x84>
 80090c6:	2300      	movs	r3, #0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10a      	bne.n	80090e2 <xQueueGenericCreateStatic+0x9e>
 80090cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	61fb      	str	r3, [r7, #28]
 80090de:	bf00      	nop
 80090e0:	e7fe      	b.n	80090e0 <xQueueGenericCreateStatic+0x9c>
 80090e2:	2348      	movs	r3, #72	; 0x48
 80090e4:	617b      	str	r3, [r7, #20]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2b48      	cmp	r3, #72	; 0x48
 80090ea:	d00a      	beq.n	8009102 <xQueueGenericCreateStatic+0xbe>
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	61bb      	str	r3, [r7, #24]
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <xQueueGenericCreateStatic+0xbc>
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00d      	beq.n	800912a <xQueueGenericCreateStatic+0xe6>
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800911a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	4613      	mov	r3, r2
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	68b9      	ldr	r1, [r7, #8]
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 f83f 	bl	80091a8 <prvInitialiseNewQueue>
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	4618      	mov	r0, r3
 800912e:	3730      	adds	r7, #48	; 0x30
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <xQueueGenericCreate>:
 8009134:	b580      	push	{r7, lr}
 8009136:	b08a      	sub	sp, #40	; 0x28
 8009138:	af02      	add	r7, sp, #8
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	71fb      	strb	r3, [r7, #7]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <xQueueGenericCreate+0x2a>
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <xQueueGenericCreate+0x28>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	fb02 f303 	mul.w	r3, r2, r3
 8009166:	61fb      	str	r3, [r7, #28]
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	3348      	adds	r3, #72	; 0x48
 800916c:	4618      	mov	r0, r3
 800916e:	f002 f843 	bl	800b1f8 <pvPortMalloc>
 8009172:	61b8      	str	r0, [r7, #24]
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d011      	beq.n	800919e <xQueueGenericCreate+0x6a>
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	3348      	adds	r3, #72	; 0x48
 8009182:	617b      	str	r3, [r7, #20]
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800918c:	79fa      	ldrb	r2, [r7, #7]
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	4613      	mov	r3, r2
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f805 	bl	80091a8 <prvInitialiseNewQueue>
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	4618      	mov	r0, r3
 80091a2:	3720      	adds	r7, #32
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <prvInitialiseNewQueue>:
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	70fb      	strb	r3, [r7, #3]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d103      	bne.n	80091c4 <prvInitialiseNewQueue+0x1c>
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	e002      	b.n	80091ca <prvInitialiseNewQueue+0x22>
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	641a      	str	r2, [r3, #64]	; 0x40
 80091d6:	2101      	movs	r1, #1
 80091d8:	69b8      	ldr	r0, [r7, #24]
 80091da:	f7ff fecb 	bl	8008f74 <xQueueGenericReset>
 80091de:	bf00      	nop
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <xQueueGenericSend>:
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08e      	sub	sp, #56	; 0x38
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	637b      	str	r3, [r7, #52]	; 0x34
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	633b      	str	r3, [r7, #48]	; 0x30
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <xQueueGenericSend+0x32>
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xQueueGenericSend+0x30>
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d103      	bne.n	8009228 <xQueueGenericSend+0x40>
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <xQueueGenericSend+0x44>
 8009228:	2301      	movs	r3, #1
 800922a:	e000      	b.n	800922e <xQueueGenericSend+0x46>
 800922c:	2300      	movs	r3, #0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10a      	bne.n	8009248 <xQueueGenericSend+0x60>
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	627b      	str	r3, [r7, #36]	; 0x24
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <xQueueGenericSend+0x5e>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b02      	cmp	r3, #2
 800924c:	d103      	bne.n	8009256 <xQueueGenericSend+0x6e>
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <xQueueGenericSend+0x72>
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <xQueueGenericSend+0x74>
 800925a:	2300      	movs	r3, #0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <xQueueGenericSend+0x8e>
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	623b      	str	r3, [r7, #32]
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <xQueueGenericSend+0x8c>
 8009276:	f001 fb51 	bl	800a91c <xTaskGetSchedulerState>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <xQueueGenericSend+0x9e>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <xQueueGenericSend+0xa2>
 8009286:	2301      	movs	r3, #1
 8009288:	e000      	b.n	800928c <xQueueGenericSend+0xa4>
 800928a:	2300      	movs	r3, #0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10a      	bne.n	80092a6 <xQueueGenericSend+0xbe>
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	61fb      	str	r3, [r7, #28]
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xQueueGenericSend+0xbc>
 80092a6:	f001 fe85 	bl	800afb4 <vPortEnterCritical>
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d302      	bcc.n	80092bc <xQueueGenericSend+0xd4>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d129      	bne.n	8009310 <xQueueGenericSend+0x128>
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	68b9      	ldr	r1, [r7, #8]
 80092c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092c2:	f000 fac1 	bl	8009848 <prvCopyDataToQueue>
 80092c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d010      	beq.n	80092f2 <xQueueGenericSend+0x10a>
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	3324      	adds	r3, #36	; 0x24
 80092d4:	4618      	mov	r0, r3
 80092d6:	f001 f965 	bl	800a5a4 <xTaskRemoveFromEventList>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d013      	beq.n	8009308 <xQueueGenericSend+0x120>
 80092e0:	4b3f      	ldr	r3, [pc, #252]	; (80093e0 <xQueueGenericSend+0x1f8>)
 80092e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	e00a      	b.n	8009308 <xQueueGenericSend+0x120>
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d007      	beq.n	8009308 <xQueueGenericSend+0x120>
 80092f8:	4b39      	ldr	r3, [pc, #228]	; (80093e0 <xQueueGenericSend+0x1f8>)
 80092fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f001 fe84 	bl	800b014 <vPortExitCritical>
 800930c:	2301      	movs	r3, #1
 800930e:	e063      	b.n	80093d8 <xQueueGenericSend+0x1f0>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d103      	bne.n	800931e <xQueueGenericSend+0x136>
 8009316:	f001 fe7d 	bl	800b014 <vPortExitCritical>
 800931a:	2300      	movs	r3, #0
 800931c:	e05c      	b.n	80093d8 <xQueueGenericSend+0x1f0>
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009320:	2b00      	cmp	r3, #0
 8009322:	d106      	bne.n	8009332 <xQueueGenericSend+0x14a>
 8009324:	f107 0314 	add.w	r3, r7, #20
 8009328:	4618      	mov	r0, r3
 800932a:	f001 f99d 	bl	800a668 <vTaskInternalSetTimeOutState>
 800932e:	2301      	movs	r3, #1
 8009330:	637b      	str	r3, [r7, #52]	; 0x34
 8009332:	f001 fe6f 	bl	800b014 <vPortExitCritical>
 8009336:	f000 ff53 	bl	800a1e0 <vTaskSuspendAll>
 800933a:	f001 fe3b 	bl	800afb4 <vPortEnterCritical>
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009344:	b25b      	sxtb	r3, r3
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800934a:	d103      	bne.n	8009354 <xQueueGenericSend+0x16c>
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800935a:	b25b      	sxtb	r3, r3
 800935c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009360:	d103      	bne.n	800936a <xQueueGenericSend+0x182>
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800936a:	f001 fe53 	bl	800b014 <vPortExitCritical>
 800936e:	1d3a      	adds	r2, r7, #4
 8009370:	f107 0314 	add.w	r3, r7, #20
 8009374:	4611      	mov	r1, r2
 8009376:	4618      	mov	r0, r3
 8009378:	f001 f98c 	bl	800a694 <xTaskCheckForTimeOut>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d124      	bne.n	80093cc <xQueueGenericSend+0x1e4>
 8009382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009384:	f000 fb58 	bl	8009a38 <prvIsQueueFull>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d018      	beq.n	80093c0 <xQueueGenericSend+0x1d8>
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	3310      	adds	r3, #16
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	4611      	mov	r1, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f001 f8e0 	bl	800a55c <vTaskPlaceOnEventList>
 800939c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800939e:	f000 fae3 	bl	8009968 <prvUnlockQueue>
 80093a2:	f000 ff2b 	bl	800a1fc <xTaskResumeAll>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f47f af7c 	bne.w	80092a6 <xQueueGenericSend+0xbe>
 80093ae:	4b0c      	ldr	r3, [pc, #48]	; (80093e0 <xQueueGenericSend+0x1f8>)
 80093b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	e772      	b.n	80092a6 <xQueueGenericSend+0xbe>
 80093c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093c2:	f000 fad1 	bl	8009968 <prvUnlockQueue>
 80093c6:	f000 ff19 	bl	800a1fc <xTaskResumeAll>
 80093ca:	e76c      	b.n	80092a6 <xQueueGenericSend+0xbe>
 80093cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ce:	f000 facb 	bl	8009968 <prvUnlockQueue>
 80093d2:	f000 ff13 	bl	800a1fc <xTaskResumeAll>
 80093d6:	2300      	movs	r3, #0
 80093d8:	4618      	mov	r0, r3
 80093da:	3738      	adds	r7, #56	; 0x38
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <xQueueGiveFromISR>:
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08e      	sub	sp, #56	; 0x38
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	633b      	str	r3, [r7, #48]	; 0x30
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xQueueGiveFromISR+0x2a>
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	623b      	str	r3, [r7, #32]
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueGiveFromISR+0x28>
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <xQueueGiveFromISR+0x48>
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	61fb      	str	r3, [r7, #28]
 8009428:	bf00      	nop
 800942a:	e7fe      	b.n	800942a <xQueueGiveFromISR+0x46>
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d103      	bne.n	800943c <xQueueGiveFromISR+0x58>
 8009434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <xQueueGiveFromISR+0x5c>
 800943c:	2301      	movs	r3, #1
 800943e:	e000      	b.n	8009442 <xQueueGiveFromISR+0x5e>
 8009440:	2300      	movs	r3, #0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10a      	bne.n	800945c <xQueueGiveFromISR+0x78>
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	61bb      	str	r3, [r7, #24]
 8009458:	bf00      	nop
 800945a:	e7fe      	b.n	800945a <xQueueGiveFromISR+0x76>
 800945c:	f001 fe8c 	bl	800b178 <vPortValidateInterruptPriority>
 8009460:	f3ef 8211 	mrs	r2, BASEPRI
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	617a      	str	r2, [r7, #20]
 8009476:	613b      	str	r3, [r7, #16]
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	62bb      	str	r3, [r7, #40]	; 0x28
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009488:	429a      	cmp	r2, r3
 800948a:	d22b      	bcs.n	80094e4 <xQueueGiveFromISR+0x100>
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	639a      	str	r2, [r3, #56]	; 0x38
 800949e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094a6:	d112      	bne.n	80094ce <xQueueGiveFromISR+0xea>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d016      	beq.n	80094de <xQueueGiveFromISR+0xfa>
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	3324      	adds	r3, #36	; 0x24
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 f875 	bl	800a5a4 <xTaskRemoveFromEventList>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00e      	beq.n	80094de <xQueueGiveFromISR+0xfa>
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <xQueueGiveFromISR+0xfa>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2201      	movs	r2, #1
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	e007      	b.n	80094de <xQueueGiveFromISR+0xfa>
 80094ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094d2:	3301      	adds	r3, #1
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	b25a      	sxtb	r2, r3
 80094d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094de:	2301      	movs	r3, #1
 80094e0:	637b      	str	r3, [r7, #52]	; 0x34
 80094e2:	e001      	b.n	80094e8 <xQueueGiveFromISR+0x104>
 80094e4:	2300      	movs	r3, #0
 80094e6:	637b      	str	r3, [r7, #52]	; 0x34
 80094e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	bf00      	nop
 80094f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f6:	4618      	mov	r0, r3
 80094f8:	3738      	adds	r7, #56	; 0x38
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <xQueueSemaphoreTake>:
 8009500:	b580      	push	{r7, lr}
 8009502:	b08e      	sub	sp, #56	; 0x38
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	2300      	movs	r3, #0
 800950c:	637b      	str	r3, [r7, #52]	; 0x34
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009512:	2300      	movs	r3, #0
 8009514:	633b      	str	r3, [r7, #48]	; 0x30
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <xQueueSemaphoreTake+0x32>
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	623b      	str	r3, [r7, #32]
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <xQueueSemaphoreTake+0x30>
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00a      	beq.n	8009550 <xQueueSemaphoreTake+0x50>
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	61fb      	str	r3, [r7, #28]
 800954c:	bf00      	nop
 800954e:	e7fe      	b.n	800954e <xQueueSemaphoreTake+0x4e>
 8009550:	f001 f9e4 	bl	800a91c <xTaskGetSchedulerState>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d102      	bne.n	8009560 <xQueueSemaphoreTake+0x60>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <xQueueSemaphoreTake+0x64>
 8009560:	2301      	movs	r3, #1
 8009562:	e000      	b.n	8009566 <xQueueSemaphoreTake+0x66>
 8009564:	2300      	movs	r3, #0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <xQueueSemaphoreTake+0x80>
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	61bb      	str	r3, [r7, #24]
 800957c:	bf00      	nop
 800957e:	e7fe      	b.n	800957e <xQueueSemaphoreTake+0x7e>
 8009580:	f001 fd18 	bl	800afb4 <vPortEnterCritical>
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009588:	62bb      	str	r3, [r7, #40]	; 0x28
 800958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958c:	2b00      	cmp	r3, #0
 800958e:	d024      	beq.n	80095da <xQueueSemaphoreTake+0xda>
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	1e5a      	subs	r2, r3, #1
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d104      	bne.n	80095aa <xQueueSemaphoreTake+0xaa>
 80095a0:	f001 fb64 	bl	800ac6c <pvTaskIncrementMutexHeldCount>
 80095a4:	4602      	mov	r2, r0
 80095a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a8:	609a      	str	r2, [r3, #8]
 80095aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00f      	beq.n	80095d2 <xQueueSemaphoreTake+0xd2>
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	3310      	adds	r3, #16
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 fff4 	bl	800a5a4 <xTaskRemoveFromEventList>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d007      	beq.n	80095d2 <xQueueSemaphoreTake+0xd2>
 80095c2:	4b54      	ldr	r3, [pc, #336]	; (8009714 <xQueueSemaphoreTake+0x214>)
 80095c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f001 fd1f 	bl	800b014 <vPortExitCritical>
 80095d6:	2301      	movs	r3, #1
 80095d8:	e097      	b.n	800970a <xQueueSemaphoreTake+0x20a>
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d111      	bne.n	8009604 <xQueueSemaphoreTake+0x104>
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00a      	beq.n	80095fc <xQueueSemaphoreTake+0xfc>
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	617b      	str	r3, [r7, #20]
 80095f8:	bf00      	nop
 80095fa:	e7fe      	b.n	80095fa <xQueueSemaphoreTake+0xfa>
 80095fc:	f001 fd0a 	bl	800b014 <vPortExitCritical>
 8009600:	2300      	movs	r3, #0
 8009602:	e082      	b.n	800970a <xQueueSemaphoreTake+0x20a>
 8009604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009606:	2b00      	cmp	r3, #0
 8009608:	d106      	bne.n	8009618 <xQueueSemaphoreTake+0x118>
 800960a:	f107 030c 	add.w	r3, r7, #12
 800960e:	4618      	mov	r0, r3
 8009610:	f001 f82a 	bl	800a668 <vTaskInternalSetTimeOutState>
 8009614:	2301      	movs	r3, #1
 8009616:	637b      	str	r3, [r7, #52]	; 0x34
 8009618:	f001 fcfc 	bl	800b014 <vPortExitCritical>
 800961c:	f000 fde0 	bl	800a1e0 <vTaskSuspendAll>
 8009620:	f001 fcc8 	bl	800afb4 <vPortEnterCritical>
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800962a:	b25b      	sxtb	r3, r3
 800962c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009630:	d103      	bne.n	800963a <xQueueSemaphoreTake+0x13a>
 8009632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009640:	b25b      	sxtb	r3, r3
 8009642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009646:	d103      	bne.n	8009650 <xQueueSemaphoreTake+0x150>
 8009648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964a:	2200      	movs	r2, #0
 800964c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009650:	f001 fce0 	bl	800b014 <vPortExitCritical>
 8009654:	463a      	mov	r2, r7
 8009656:	f107 030c 	add.w	r3, r7, #12
 800965a:	4611      	mov	r1, r2
 800965c:	4618      	mov	r0, r3
 800965e:	f001 f819 	bl	800a694 <xTaskCheckForTimeOut>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d132      	bne.n	80096ce <xQueueSemaphoreTake+0x1ce>
 8009668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800966a:	f000 f9cf 	bl	8009a0c <prvIsQueueEmpty>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d026      	beq.n	80096c2 <xQueueSemaphoreTake+0x1c2>
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d109      	bne.n	8009690 <xQueueSemaphoreTake+0x190>
 800967c:	f001 fc9a 	bl	800afb4 <vPortEnterCritical>
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	4618      	mov	r0, r3
 8009686:	f001 f967 	bl	800a958 <xTaskPriorityInherit>
 800968a:	6338      	str	r0, [r7, #48]	; 0x30
 800968c:	f001 fcc2 	bl	800b014 <vPortExitCritical>
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	3324      	adds	r3, #36	; 0x24
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	4611      	mov	r1, r2
 8009698:	4618      	mov	r0, r3
 800969a:	f000 ff5f 	bl	800a55c <vTaskPlaceOnEventList>
 800969e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096a0:	f000 f962 	bl	8009968 <prvUnlockQueue>
 80096a4:	f000 fdaa 	bl	800a1fc <xTaskResumeAll>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f47f af68 	bne.w	8009580 <xQueueSemaphoreTake+0x80>
 80096b0:	4b18      	ldr	r3, [pc, #96]	; (8009714 <xQueueSemaphoreTake+0x214>)
 80096b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	e75e      	b.n	8009580 <xQueueSemaphoreTake+0x80>
 80096c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096c4:	f000 f950 	bl	8009968 <prvUnlockQueue>
 80096c8:	f000 fd98 	bl	800a1fc <xTaskResumeAll>
 80096cc:	e758      	b.n	8009580 <xQueueSemaphoreTake+0x80>
 80096ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096d0:	f000 f94a 	bl	8009968 <prvUnlockQueue>
 80096d4:	f000 fd92 	bl	800a1fc <xTaskResumeAll>
 80096d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096da:	f000 f997 	bl	8009a0c <prvIsQueueEmpty>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f43f af4d 	beq.w	8009580 <xQueueSemaphoreTake+0x80>
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00d      	beq.n	8009708 <xQueueSemaphoreTake+0x208>
 80096ec:	f001 fc62 	bl	800afb4 <vPortEnterCritical>
 80096f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096f2:	f000 f891 	bl	8009818 <prvGetDisinheritPriorityAfterTimeout>
 80096f6:	6278      	str	r0, [r7, #36]	; 0x24
 80096f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096fe:	4618      	mov	r0, r3
 8009700:	f001 fa26 	bl	800ab50 <vTaskPriorityDisinheritAfterTimeout>
 8009704:	f001 fc86 	bl	800b014 <vPortExitCritical>
 8009708:	2300      	movs	r3, #0
 800970a:	4618      	mov	r0, r3
 800970c:	3738      	adds	r7, #56	; 0x38
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	e000ed04 	.word	0xe000ed04

08009718 <xQueueReceiveFromISR>:
 8009718:	b580      	push	{r7, lr}
 800971a:	b08e      	sub	sp, #56	; 0x38
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	633b      	str	r3, [r7, #48]	; 0x30
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <xQueueReceiveFromISR+0x2c>
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	623b      	str	r3, [r7, #32]
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <xQueueReceiveFromISR+0x2a>
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d103      	bne.n	8009752 <xQueueReceiveFromISR+0x3a>
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <xQueueReceiveFromISR+0x3e>
 8009752:	2301      	movs	r3, #1
 8009754:	e000      	b.n	8009758 <xQueueReceiveFromISR+0x40>
 8009756:	2300      	movs	r3, #0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10a      	bne.n	8009772 <xQueueReceiveFromISR+0x5a>
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	61fb      	str	r3, [r7, #28]
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <xQueueReceiveFromISR+0x58>
 8009772:	f001 fd01 	bl	800b178 <vPortValidateInterruptPriority>
 8009776:	f3ef 8211 	mrs	r2, BASEPRI
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	61ba      	str	r2, [r7, #24]
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979a:	2b00      	cmp	r3, #0
 800979c:	d02f      	beq.n	80097fe <xQueueReceiveFromISR+0xe6>
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ac:	f000 f8b6 	bl	800991c <prvCopyDataFromQueue>
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	1e5a      	subs	r2, r3, #1
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	639a      	str	r2, [r3, #56]	; 0x38
 80097b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097c0:	d112      	bne.n	80097e8 <xQueueReceiveFromISR+0xd0>
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d016      	beq.n	80097f8 <xQueueReceiveFromISR+0xe0>
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	3310      	adds	r3, #16
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 fee8 	bl	800a5a4 <xTaskRemoveFromEventList>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00e      	beq.n	80097f8 <xQueueReceiveFromISR+0xe0>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00b      	beq.n	80097f8 <xQueueReceiveFromISR+0xe0>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	e007      	b.n	80097f8 <xQueueReceiveFromISR+0xe0>
 80097e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097ec:	3301      	adds	r3, #1
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	b25a      	sxtb	r2, r3
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097f8:	2301      	movs	r3, #1
 80097fa:	637b      	str	r3, [r7, #52]	; 0x34
 80097fc:	e001      	b.n	8009802 <xQueueReceiveFromISR+0xea>
 80097fe:	2300      	movs	r3, #0
 8009800:	637b      	str	r3, [r7, #52]	; 0x34
 8009802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009804:	613b      	str	r3, [r7, #16]
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	bf00      	nop
 800980e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009810:	4618      	mov	r0, r3
 8009812:	3738      	adds	r7, #56	; 0x38
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <prvGetDisinheritPriorityAfterTimeout>:
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	2b00      	cmp	r3, #0
 8009826:	d006      	beq.n	8009836 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f1c3 0307 	rsb	r3, r3, #7
 8009832:	60fb      	str	r3, [r7, #12]
 8009834:	e001      	b.n	800983a <prvGetDisinheritPriorityAfterTimeout+0x22>
 8009836:	2300      	movs	r3, #0
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <prvCopyDataToQueue>:
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	2300      	movs	r3, #0
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10d      	bne.n	8009882 <prvCopyDataToQueue+0x3a>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d14d      	bne.n	800990a <prvCopyDataToQueue+0xc2>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	4618      	mov	r0, r3
 8009874:	f001 f8e6 	bl	800aa44 <xTaskPriorityDisinherit>
 8009878:	6178      	str	r0, [r7, #20]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	609a      	str	r2, [r3, #8]
 8009880:	e043      	b.n	800990a <prvCopyDataToQueue+0xc2>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d119      	bne.n	80098bc <prvCopyDataToQueue+0x74>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6858      	ldr	r0, [r3, #4]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009890:	461a      	mov	r2, r3
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	f002 ff68 	bl	800c768 <memcpy>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a0:	441a      	add	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	605a      	str	r2, [r3, #4]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d32b      	bcc.n	800990a <prvCopyDataToQueue+0xc2>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	605a      	str	r2, [r3, #4]
 80098ba:	e026      	b.n	800990a <prvCopyDataToQueue+0xc2>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	68d8      	ldr	r0, [r3, #12]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c4:	461a      	mov	r2, r3
 80098c6:	68b9      	ldr	r1, [r7, #8]
 80098c8:	f002 ff4e 	bl	800c768 <memcpy>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	68da      	ldr	r2, [r3, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d4:	425b      	negs	r3, r3
 80098d6:	441a      	add	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	60da      	str	r2, [r3, #12]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d207      	bcs.n	80098f8 <prvCopyDataToQueue+0xb0>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f0:	425b      	negs	r3, r3
 80098f2:	441a      	add	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	60da      	str	r2, [r3, #12]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d105      	bne.n	800990a <prvCopyDataToQueue+0xc2>
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <prvCopyDataToQueue+0xc2>
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	3b01      	subs	r3, #1
 8009908:	613b      	str	r3, [r7, #16]
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	1c5a      	adds	r2, r3, #1
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	639a      	str	r2, [r3, #56]	; 0x38
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	4618      	mov	r0, r3
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <prvCopyDataFromQueue>:
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	d018      	beq.n	8009960 <prvCopyDataFromQueue+0x44>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009936:	441a      	add	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60da      	str	r2, [r3, #12]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	429a      	cmp	r2, r3
 8009946:	d303      	bcc.n	8009950 <prvCopyDataFromQueue+0x34>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	60da      	str	r2, [r3, #12]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68d9      	ldr	r1, [r3, #12]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009958:	461a      	mov	r2, r3
 800995a:	6838      	ldr	r0, [r7, #0]
 800995c:	f002 ff04 	bl	800c768 <memcpy>
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <prvUnlockQueue>:
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	f001 fb20 	bl	800afb4 <vPortEnterCritical>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800997a:	73fb      	strb	r3, [r7, #15]
 800997c:	e011      	b.n	80099a2 <prvUnlockQueue+0x3a>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	2b00      	cmp	r3, #0
 8009984:	d012      	beq.n	80099ac <prvUnlockQueue+0x44>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3324      	adds	r3, #36	; 0x24
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fe0a 	bl	800a5a4 <xTaskRemoveFromEventList>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <prvUnlockQueue+0x32>
 8009996:	f000 fedf 	bl	800a758 <vTaskMissedYield>
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	3b01      	subs	r3, #1
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	73fb      	strb	r3, [r7, #15]
 80099a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	dce9      	bgt.n	800997e <prvUnlockQueue+0x16>
 80099aa:	e000      	b.n	80099ae <prvUnlockQueue+0x46>
 80099ac:	bf00      	nop
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	22ff      	movs	r2, #255	; 0xff
 80099b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099b6:	f001 fb2d 	bl	800b014 <vPortExitCritical>
 80099ba:	f001 fafb 	bl	800afb4 <vPortEnterCritical>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099c4:	73bb      	strb	r3, [r7, #14]
 80099c6:	e011      	b.n	80099ec <prvUnlockQueue+0x84>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d012      	beq.n	80099f6 <prvUnlockQueue+0x8e>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3310      	adds	r3, #16
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 fde5 	bl	800a5a4 <xTaskRemoveFromEventList>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <prvUnlockQueue+0x7c>
 80099e0:	f000 feba 	bl	800a758 <vTaskMissedYield>
 80099e4:	7bbb      	ldrb	r3, [r7, #14]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	73bb      	strb	r3, [r7, #14]
 80099ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	dce9      	bgt.n	80099c8 <prvUnlockQueue+0x60>
 80099f4:	e000      	b.n	80099f8 <prvUnlockQueue+0x90>
 80099f6:	bf00      	nop
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	22ff      	movs	r2, #255	; 0xff
 80099fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a00:	f001 fb08 	bl	800b014 <vPortExitCritical>
 8009a04:	bf00      	nop
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <prvIsQueueEmpty>:
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	f001 face 	bl	800afb4 <vPortEnterCritical>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d102      	bne.n	8009a26 <prvIsQueueEmpty+0x1a>
 8009a20:	2301      	movs	r3, #1
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	e001      	b.n	8009a2a <prvIsQueueEmpty+0x1e>
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	f001 faf3 	bl	800b014 <vPortExitCritical>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <prvIsQueueFull>:
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	f001 fab8 	bl	800afb4 <vPortEnterCritical>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d102      	bne.n	8009a56 <prvIsQueueFull+0x1e>
 8009a50:	2301      	movs	r3, #1
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	e001      	b.n	8009a5a <prvIsQueueFull+0x22>
 8009a56:	2300      	movs	r3, #0
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	f001 fadb 	bl	800b014 <vPortExitCritical>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <xTaskCreateStatic>:
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08e      	sub	sp, #56	; 0x38
 8009a6c:	af04      	add	r7, sp, #16
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]
 8009a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <xTaskCreateStatic+0x2a>
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	623b      	str	r3, [r7, #32]
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <xTaskCreateStatic+0x28>
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10a      	bne.n	8009aae <xTaskCreateStatic+0x46>
 8009a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	61fb      	str	r3, [r7, #28]
 8009aaa:	bf00      	nop
 8009aac:	e7fe      	b.n	8009aac <xTaskCreateStatic+0x44>
 8009aae:	2354      	movs	r3, #84	; 0x54
 8009ab0:	613b      	str	r3, [r7, #16]
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	2b54      	cmp	r3, #84	; 0x54
 8009ab6:	d00a      	beq.n	8009ace <xTaskCreateStatic+0x66>
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <xTaskCreateStatic+0x64>
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d01e      	beq.n	8009b14 <xTaskCreateStatic+0xac>
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01b      	beq.n	8009b14 <xTaskCreateStatic+0xac>
 8009adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	2202      	movs	r2, #2
 8009aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009aee:	2300      	movs	r3, #0
 8009af0:	9303      	str	r3, [sp, #12]
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	9302      	str	r3, [sp, #8]
 8009af6:	f107 0314 	add.w	r3, r7, #20
 8009afa:	9301      	str	r3, [sp, #4]
 8009afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	68b9      	ldr	r1, [r7, #8]
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 f850 	bl	8009bac <prvInitialiseNewTask>
 8009b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b0e:	f000 f8d5 	bl	8009cbc <prvAddNewTaskToReadyList>
 8009b12:	e001      	b.n	8009b18 <xTaskCreateStatic+0xb0>
 8009b14:	2300      	movs	r3, #0
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3728      	adds	r7, #40	; 0x28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <xTaskCreate>:
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b08c      	sub	sp, #48	; 0x30
 8009b26:	af04      	add	r7, sp, #16
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	603b      	str	r3, [r7, #0]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	80fb      	strh	r3, [r7, #6]
 8009b32:	88fb      	ldrh	r3, [r7, #6]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 fb5e 	bl	800b1f8 <pvPortMalloc>
 8009b3c:	6178      	str	r0, [r7, #20]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00e      	beq.n	8009b62 <xTaskCreate+0x40>
 8009b44:	2054      	movs	r0, #84	; 0x54
 8009b46:	f001 fb57 	bl	800b1f8 <pvPortMalloc>
 8009b4a:	61f8      	str	r0, [r7, #28]
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <xTaskCreate+0x38>
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	631a      	str	r2, [r3, #48]	; 0x30
 8009b58:	e005      	b.n	8009b66 <xTaskCreate+0x44>
 8009b5a:	6978      	ldr	r0, [r7, #20]
 8009b5c:	f001 fc18 	bl	800b390 <vPortFree>
 8009b60:	e001      	b.n	8009b66 <xTaskCreate+0x44>
 8009b62:	2300      	movs	r3, #0
 8009b64:	61fb      	str	r3, [r7, #28]
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d017      	beq.n	8009b9c <xTaskCreate+0x7a>
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009b74:	88fa      	ldrh	r2, [r7, #6]
 8009b76:	2300      	movs	r3, #0
 8009b78:	9303      	str	r3, [sp, #12]
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	9302      	str	r3, [sp, #8]
 8009b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	68b9      	ldr	r1, [r7, #8]
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f000 f80e 	bl	8009bac <prvInitialiseNewTask>
 8009b90:	69f8      	ldr	r0, [r7, #28]
 8009b92:	f000 f893 	bl	8009cbc <prvAddNewTaskToReadyList>
 8009b96:	2301      	movs	r3, #1
 8009b98:	61bb      	str	r3, [r7, #24]
 8009b9a:	e002      	b.n	8009ba2 <xTaskCreate+0x80>
 8009b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ba0:	61bb      	str	r3, [r7, #24]
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <prvInitialiseNewTask>:
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	61bb      	str	r3, [r7, #24]
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	f023 0307 	bic.w	r3, r3, #7
 8009bd2:	61bb      	str	r3, [r7, #24]
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <prvInitialiseNewTask+0x48>
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	617b      	str	r3, [r7, #20]
 8009bf0:	bf00      	nop
 8009bf2:	e7fe      	b.n	8009bf2 <prvInitialiseNewTask+0x46>
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d01f      	beq.n	8009c3a <prvInitialiseNewTask+0x8e>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	e012      	b.n	8009c26 <prvInitialiseNewTask+0x7a>
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	4413      	add	r3, r2
 8009c06:	7819      	ldrb	r1, [r3, #0]
 8009c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	3334      	adds	r3, #52	; 0x34
 8009c10:	460a      	mov	r2, r1
 8009c12:	701a      	strb	r2, [r3, #0]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	4413      	add	r3, r2
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d006      	beq.n	8009c2e <prvInitialiseNewTask+0x82>
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	3301      	adds	r3, #1
 8009c24:	61fb      	str	r3, [r7, #28]
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	2b0f      	cmp	r3, #15
 8009c2a:	d9e9      	bls.n	8009c00 <prvInitialiseNewTask+0x54>
 8009c2c:	e000      	b.n	8009c30 <prvInitialiseNewTask+0x84>
 8009c2e:	bf00      	nop
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c38:	e003      	b.n	8009c42 <prvInitialiseNewTask+0x96>
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	2b06      	cmp	r3, #6
 8009c46:	d901      	bls.n	8009c4c <prvInitialiseNewTask+0xa0>
 8009c48:	2306      	movs	r3, #6
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c50:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c56:	645a      	str	r2, [r3, #68]	; 0x44
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	649a      	str	r2, [r3, #72]	; 0x48
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	3304      	adds	r3, #4
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff f8f2 	bl	8008e4c <vListInitialiseItem>
 8009c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6a:	3318      	adds	r3, #24
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7ff f8ed 	bl	8008e4c <vListInitialiseItem>
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c76:	611a      	str	r2, [r3, #16]
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	f1c3 0207 	rsb	r2, r3, #7
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	619a      	str	r2, [r3, #24]
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c86:	625a      	str	r2, [r3, #36]	; 0x24
 8009c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	68f9      	ldr	r1, [r7, #12]
 8009c9a:	69b8      	ldr	r0, [r7, #24]
 8009c9c:	f001 f860 	bl	800ad60 <pxPortInitialiseStack>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <prvInitialiseNewTask+0x106>
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	bf00      	nop
 8009cb4:	3720      	adds	r7, #32
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <prvAddNewTaskToReadyList>:
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	f001 f976 	bl	800afb4 <vPortEnterCritical>
 8009cc8:	4b2a      	ldr	r3, [pc, #168]	; (8009d74 <prvAddNewTaskToReadyList+0xb8>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	4a29      	ldr	r2, [pc, #164]	; (8009d74 <prvAddNewTaskToReadyList+0xb8>)
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	4b29      	ldr	r3, [pc, #164]	; (8009d78 <prvAddNewTaskToReadyList+0xbc>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d109      	bne.n	8009cee <prvAddNewTaskToReadyList+0x32>
 8009cda:	4a27      	ldr	r2, [pc, #156]	; (8009d78 <prvAddNewTaskToReadyList+0xbc>)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	4b24      	ldr	r3, [pc, #144]	; (8009d74 <prvAddNewTaskToReadyList+0xb8>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d110      	bne.n	8009d0a <prvAddNewTaskToReadyList+0x4e>
 8009ce8:	f000 fd5a 	bl	800a7a0 <prvInitialiseTaskLists>
 8009cec:	e00d      	b.n	8009d0a <prvAddNewTaskToReadyList+0x4e>
 8009cee:	4b23      	ldr	r3, [pc, #140]	; (8009d7c <prvAddNewTaskToReadyList+0xc0>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d109      	bne.n	8009d0a <prvAddNewTaskToReadyList+0x4e>
 8009cf6:	4b20      	ldr	r3, [pc, #128]	; (8009d78 <prvAddNewTaskToReadyList+0xbc>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d802      	bhi.n	8009d0a <prvAddNewTaskToReadyList+0x4e>
 8009d04:	4a1c      	ldr	r2, [pc, #112]	; (8009d78 <prvAddNewTaskToReadyList+0xbc>)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	4b1d      	ldr	r3, [pc, #116]	; (8009d80 <prvAddNewTaskToReadyList+0xc4>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	4a1b      	ldr	r2, [pc, #108]	; (8009d80 <prvAddNewTaskToReadyList+0xc4>)
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d18:	2201      	movs	r2, #1
 8009d1a:	409a      	lsls	r2, r3
 8009d1c:	4b19      	ldr	r3, [pc, #100]	; (8009d84 <prvAddNewTaskToReadyList+0xc8>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	4a18      	ldr	r2, [pc, #96]	; (8009d84 <prvAddNewTaskToReadyList+0xc8>)
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4a15      	ldr	r2, [pc, #84]	; (8009d88 <prvAddNewTaskToReadyList+0xcc>)
 8009d34:	441a      	add	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f7ff f892 	bl	8008e66 <vListInsertEnd>
 8009d42:	f001 f967 	bl	800b014 <vPortExitCritical>
 8009d46:	4b0d      	ldr	r3, [pc, #52]	; (8009d7c <prvAddNewTaskToReadyList+0xc0>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00e      	beq.n	8009d6c <prvAddNewTaskToReadyList+0xb0>
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <prvAddNewTaskToReadyList+0xbc>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d207      	bcs.n	8009d6c <prvAddNewTaskToReadyList+0xb0>
 8009d5c:	4b0b      	ldr	r3, [pc, #44]	; (8009d8c <prvAddNewTaskToReadyList+0xd0>)
 8009d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	200005f8 	.word	0x200005f8
 8009d78:	200004f8 	.word	0x200004f8
 8009d7c:	20000604 	.word	0x20000604
 8009d80:	20000614 	.word	0x20000614
 8009d84:	20000600 	.word	0x20000600
 8009d88:	200004fc 	.word	0x200004fc
 8009d8c:	e000ed04 	.word	0xe000ed04

08009d90 <vTaskDelay>:
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d017      	beq.n	8009dd2 <vTaskDelay+0x42>
 8009da2:	4b13      	ldr	r3, [pc, #76]	; (8009df0 <vTaskDelay+0x60>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <vTaskDelay+0x30>
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	60bb      	str	r3, [r7, #8]
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <vTaskDelay+0x2e>
 8009dc0:	f000 fa0e 	bl	800a1e0 <vTaskSuspendAll>
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 ff64 	bl	800ac94 <prvAddCurrentTaskToDelayedList>
 8009dcc:	f000 fa16 	bl	800a1fc <xTaskResumeAll>
 8009dd0:	60f8      	str	r0, [r7, #12]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d107      	bne.n	8009de8 <vTaskDelay+0x58>
 8009dd8:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <vTaskDelay+0x64>)
 8009dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dde:	601a      	str	r2, [r3, #0]
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	20000620 	.word	0x20000620
 8009df4:	e000ed04 	.word	0xe000ed04

08009df8 <vTaskSuspend>:
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	f001 f8d8 	bl	800afb4 <vPortEnterCritical>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d102      	bne.n	8009e10 <vTaskSuspend+0x18>
 8009e0a:	4b3c      	ldr	r3, [pc, #240]	; (8009efc <vTaskSuspend+0x104>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	e000      	b.n	8009e12 <vTaskSuspend+0x1a>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3304      	adds	r3, #4
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7ff f881 	bl	8008f20 <uxListRemove>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d115      	bne.n	8009e50 <vTaskSuspend+0x58>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e28:	4935      	ldr	r1, [pc, #212]	; (8009f00 <vTaskSuspend+0x108>)
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	440b      	add	r3, r1
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10a      	bne.n	8009e50 <vTaskSuspend+0x58>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3e:	2201      	movs	r2, #1
 8009e40:	fa02 f303 	lsl.w	r3, r2, r3
 8009e44:	43da      	mvns	r2, r3
 8009e46:	4b2f      	ldr	r3, [pc, #188]	; (8009f04 <vTaskSuspend+0x10c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	4a2d      	ldr	r2, [pc, #180]	; (8009f04 <vTaskSuspend+0x10c>)
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <vTaskSuspend+0x6a>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	3318      	adds	r3, #24
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7ff f85f 	bl	8008f20 <uxListRemove>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3304      	adds	r3, #4
 8009e66:	4619      	mov	r1, r3
 8009e68:	4827      	ldr	r0, [pc, #156]	; (8009f08 <vTaskSuspend+0x110>)
 8009e6a:	f7fe fffc 	bl	8008e66 <vListInsertEnd>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d103      	bne.n	8009e82 <vTaskSuspend+0x8a>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009e82:	f001 f8c7 	bl	800b014 <vPortExitCritical>
 8009e86:	4b21      	ldr	r3, [pc, #132]	; (8009f0c <vTaskSuspend+0x114>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d005      	beq.n	8009e9a <vTaskSuspend+0xa2>
 8009e8e:	f001 f891 	bl	800afb4 <vPortEnterCritical>
 8009e92:	f000 fd23 	bl	800a8dc <prvResetNextTaskUnblockTime>
 8009e96:	f001 f8bd 	bl	800b014 <vPortExitCritical>
 8009e9a:	4b18      	ldr	r3, [pc, #96]	; (8009efc <vTaskSuspend+0x104>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d127      	bne.n	8009ef4 <vTaskSuspend+0xfc>
 8009ea4:	4b19      	ldr	r3, [pc, #100]	; (8009f0c <vTaskSuspend+0x114>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d017      	beq.n	8009edc <vTaskSuspend+0xe4>
 8009eac:	4b18      	ldr	r3, [pc, #96]	; (8009f10 <vTaskSuspend+0x118>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00a      	beq.n	8009eca <vTaskSuspend+0xd2>
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	60bb      	str	r3, [r7, #8]
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <vTaskSuspend+0xd0>
 8009eca:	4b12      	ldr	r3, [pc, #72]	; (8009f14 <vTaskSuspend+0x11c>)
 8009ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	e00b      	b.n	8009ef4 <vTaskSuspend+0xfc>
 8009edc:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <vTaskSuspend+0x110>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	4b0d      	ldr	r3, [pc, #52]	; (8009f18 <vTaskSuspend+0x120>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d103      	bne.n	8009ef0 <vTaskSuspend+0xf8>
 8009ee8:	4b04      	ldr	r3, [pc, #16]	; (8009efc <vTaskSuspend+0x104>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	e001      	b.n	8009ef4 <vTaskSuspend+0xfc>
 8009ef0:	f000 fad8 	bl	800a4a4 <vTaskSwitchContext>
 8009ef4:	bf00      	nop
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	200004f8 	.word	0x200004f8
 8009f00:	200004fc 	.word	0x200004fc
 8009f04:	20000600 	.word	0x20000600
 8009f08:	200005e4 	.word	0x200005e4
 8009f0c:	20000604 	.word	0x20000604
 8009f10:	20000620 	.word	0x20000620
 8009f14:	e000ed04 	.word	0xe000ed04
 8009f18:	200005f8 	.word	0x200005f8

08009f1c <prvTaskIsTaskSuspended>:
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	2300      	movs	r3, #0
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	613b      	str	r3, [r7, #16]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10a      	bne.n	8009f48 <prvTaskIsTaskSuspended+0x2c>
 8009f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	bf00      	nop
 8009f46:	e7fe      	b.n	8009f46 <prvTaskIsTaskSuspended+0x2a>
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	695b      	ldr	r3, [r3, #20]
 8009f4c:	4a0a      	ldr	r2, [pc, #40]	; (8009f78 <prvTaskIsTaskSuspended+0x5c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d10a      	bne.n	8009f68 <prvTaskIsTaskSuspended+0x4c>
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	4a09      	ldr	r2, [pc, #36]	; (8009f7c <prvTaskIsTaskSuspended+0x60>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d005      	beq.n	8009f68 <prvTaskIsTaskSuspended+0x4c>
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <prvTaskIsTaskSuspended+0x4c>
 8009f64:	2301      	movs	r3, #1
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	371c      	adds	r7, #28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	200005e4 	.word	0x200005e4
 8009f7c:	200005b8 	.word	0x200005b8

08009f80 <vTaskResume>:
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10a      	bne.n	8009fa8 <vTaskResume+0x28>
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	60bb      	str	r3, [r7, #8]
 8009fa4:	bf00      	nop
 8009fa6:	e7fe      	b.n	8009fa6 <vTaskResume+0x26>
 8009fa8:	4b20      	ldr	r3, [pc, #128]	; (800a02c <vTaskResume+0xac>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d037      	beq.n	800a022 <vTaskResume+0xa2>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d034      	beq.n	800a022 <vTaskResume+0xa2>
 8009fb8:	f000 fffc 	bl	800afb4 <vPortEnterCritical>
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f7ff ffad 	bl	8009f1c <prvTaskIsTaskSuspended>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d02a      	beq.n	800a01e <vTaskResume+0x9e>
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3304      	adds	r3, #4
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fe ffa7 	bl	8008f20 <uxListRemove>
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	409a      	lsls	r2, r3
 8009fda:	4b15      	ldr	r3, [pc, #84]	; (800a030 <vTaskResume+0xb0>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	4a13      	ldr	r2, [pc, #76]	; (800a030 <vTaskResume+0xb0>)
 8009fe2:	6013      	str	r3, [r2, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe8:	4613      	mov	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4a10      	ldr	r2, [pc, #64]	; (800a034 <vTaskResume+0xb4>)
 8009ff2:	441a      	add	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	f7fe ff33 	bl	8008e66 <vListInsertEnd>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a004:	4b09      	ldr	r3, [pc, #36]	; (800a02c <vTaskResume+0xac>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d307      	bcc.n	800a01e <vTaskResume+0x9e>
 800a00e:	4b0a      	ldr	r3, [pc, #40]	; (800a038 <vTaskResume+0xb8>)
 800a010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f000 fff9 	bl	800b014 <vPortExitCritical>
 800a022:	bf00      	nop
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	200004f8 	.word	0x200004f8
 800a030:	20000600 	.word	0x20000600
 800a034:	200004fc 	.word	0x200004fc
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <xTaskResumeFromISR>:
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	; 0x28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	2300      	movs	r3, #0
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	623b      	str	r3, [r7, #32]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <xTaskResumeFromISR+0x2c>
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	61bb      	str	r3, [r7, #24]
 800a064:	bf00      	nop
 800a066:	e7fe      	b.n	800a066 <xTaskResumeFromISR+0x2a>
 800a068:	f001 f886 	bl	800b178 <vPortValidateInterruptPriority>
 800a06c:	f3ef 8211 	mrs	r2, BASEPRI
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	617a      	str	r2, [r7, #20]
 800a082:	613b      	str	r3, [r7, #16]
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	61fb      	str	r3, [r7, #28]
 800a088:	6a38      	ldr	r0, [r7, #32]
 800a08a:	f7ff ff47 	bl	8009f1c <prvTaskIsTaskSuspended>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d02f      	beq.n	800a0f4 <xTaskResumeFromISR+0xb8>
 800a094:	4b1d      	ldr	r3, [pc, #116]	; (800a10c <xTaskResumeFromISR+0xd0>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d125      	bne.n	800a0e8 <xTaskResumeFromISR+0xac>
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a0:	4b1b      	ldr	r3, [pc, #108]	; (800a110 <xTaskResumeFromISR+0xd4>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d301      	bcc.n	800a0ae <xTaskResumeFromISR+0x72>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe ff34 	bl	8008f20 <uxListRemove>
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	2201      	movs	r2, #1
 800a0be:	409a      	lsls	r2, r3
 800a0c0:	4b14      	ldr	r3, [pc, #80]	; (800a114 <xTaskResumeFromISR+0xd8>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	4a13      	ldr	r2, [pc, #76]	; (800a114 <xTaskResumeFromISR+0xd8>)
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4a10      	ldr	r2, [pc, #64]	; (800a118 <xTaskResumeFromISR+0xdc>)
 800a0d8:	441a      	add	r2, r3
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	3304      	adds	r3, #4
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	f7fe fec0 	bl	8008e66 <vListInsertEnd>
 800a0e6:	e005      	b.n	800a0f4 <xTaskResumeFromISR+0xb8>
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	3318      	adds	r3, #24
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	480b      	ldr	r0, [pc, #44]	; (800a11c <xTaskResumeFromISR+0xe0>)
 800a0f0:	f7fe feb9 	bl	8008e66 <vListInsertEnd>
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	bf00      	nop
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	4618      	mov	r0, r3
 800a104:	3728      	adds	r7, #40	; 0x28
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000620 	.word	0x20000620
 800a110:	200004f8 	.word	0x200004f8
 800a114:	20000600 	.word	0x20000600
 800a118:	200004fc 	.word	0x200004fc
 800a11c:	200005b8 	.word	0x200005b8

0800a120 <vTaskStartScheduler>:
 800a120:	b580      	push	{r7, lr}
 800a122:	b08a      	sub	sp, #40	; 0x28
 800a124:	af04      	add	r7, sp, #16
 800a126:	2300      	movs	r3, #0
 800a128:	60bb      	str	r3, [r7, #8]
 800a12a:	2300      	movs	r3, #0
 800a12c:	607b      	str	r3, [r7, #4]
 800a12e:	463a      	mov	r2, r7
 800a130:	1d39      	adds	r1, r7, #4
 800a132:	f107 0308 	add.w	r3, r7, #8
 800a136:	4618      	mov	r0, r3
 800a138:	f7f6 ff88 	bl	800104c <vApplicationGetIdleTaskMemory>
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	9202      	str	r2, [sp, #8]
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	2300      	movs	r3, #0
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	2300      	movs	r3, #0
 800a14c:	460a      	mov	r2, r1
 800a14e:	491e      	ldr	r1, [pc, #120]	; (800a1c8 <vTaskStartScheduler+0xa8>)
 800a150:	481e      	ldr	r0, [pc, #120]	; (800a1cc <vTaskStartScheduler+0xac>)
 800a152:	f7ff fc89 	bl	8009a68 <xTaskCreateStatic>
 800a156:	4603      	mov	r3, r0
 800a158:	4a1d      	ldr	r2, [pc, #116]	; (800a1d0 <vTaskStartScheduler+0xb0>)
 800a15a:	6013      	str	r3, [r2, #0]
 800a15c:	4b1c      	ldr	r3, [pc, #112]	; (800a1d0 <vTaskStartScheduler+0xb0>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <vTaskStartScheduler+0x4a>
 800a164:	2301      	movs	r3, #1
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	e001      	b.n	800a16e <vTaskStartScheduler+0x4e>
 800a16a:	2300      	movs	r3, #0
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d116      	bne.n	800a1a2 <vTaskStartScheduler+0x82>
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	613b      	str	r3, [r7, #16]
 800a186:	bf00      	nop
 800a188:	4b12      	ldr	r3, [pc, #72]	; (800a1d4 <vTaskStartScheduler+0xb4>)
 800a18a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a18e:	601a      	str	r2, [r3, #0]
 800a190:	4b11      	ldr	r3, [pc, #68]	; (800a1d8 <vTaskStartScheduler+0xb8>)
 800a192:	2201      	movs	r2, #1
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <vTaskStartScheduler+0xbc>)
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	f000 fe68 	bl	800ae70 <xPortStartScheduler>
 800a1a0:	e00e      	b.n	800a1c0 <vTaskStartScheduler+0xa0>
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1a8:	d10a      	bne.n	800a1c0 <vTaskStartScheduler+0xa0>
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <vTaskStartScheduler+0x9e>
 800a1c0:	bf00      	nop
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	0800cb40 	.word	0x0800cb40
 800a1cc:	0800a771 	.word	0x0800a771
 800a1d0:	2000061c 	.word	0x2000061c
 800a1d4:	20000618 	.word	0x20000618
 800a1d8:	20000604 	.word	0x20000604
 800a1dc:	200005fc 	.word	0x200005fc

0800a1e0 <vTaskSuspendAll>:
 800a1e0:	b480      	push	{r7}
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	4b04      	ldr	r3, [pc, #16]	; (800a1f8 <vTaskSuspendAll+0x18>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	4a03      	ldr	r2, [pc, #12]	; (800a1f8 <vTaskSuspendAll+0x18>)
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	bf00      	nop
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	20000620 	.word	0x20000620

0800a1fc <xTaskResumeAll>:
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
 800a206:	2300      	movs	r3, #0
 800a208:	60bb      	str	r3, [r7, #8]
 800a20a:	4b41      	ldr	r3, [pc, #260]	; (800a310 <xTaskResumeAll+0x114>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10a      	bne.n	800a228 <xTaskResumeAll+0x2c>
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	603b      	str	r3, [r7, #0]
 800a224:	bf00      	nop
 800a226:	e7fe      	b.n	800a226 <xTaskResumeAll+0x2a>
 800a228:	f000 fec4 	bl	800afb4 <vPortEnterCritical>
 800a22c:	4b38      	ldr	r3, [pc, #224]	; (800a310 <xTaskResumeAll+0x114>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3b01      	subs	r3, #1
 800a232:	4a37      	ldr	r2, [pc, #220]	; (800a310 <xTaskResumeAll+0x114>)
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	4b36      	ldr	r3, [pc, #216]	; (800a310 <xTaskResumeAll+0x114>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d161      	bne.n	800a302 <xTaskResumeAll+0x106>
 800a23e:	4b35      	ldr	r3, [pc, #212]	; (800a314 <xTaskResumeAll+0x118>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d05d      	beq.n	800a302 <xTaskResumeAll+0x106>
 800a246:	e02e      	b.n	800a2a6 <xTaskResumeAll+0xaa>
 800a248:	4b33      	ldr	r3, [pc, #204]	; (800a318 <xTaskResumeAll+0x11c>)
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	3318      	adds	r3, #24
 800a254:	4618      	mov	r0, r3
 800a256:	f7fe fe63 	bl	8008f20 <uxListRemove>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3304      	adds	r3, #4
 800a25e:	4618      	mov	r0, r3
 800a260:	f7fe fe5e 	bl	8008f20 <uxListRemove>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	2201      	movs	r2, #1
 800a26a:	409a      	lsls	r2, r3
 800a26c:	4b2b      	ldr	r3, [pc, #172]	; (800a31c <xTaskResumeAll+0x120>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4313      	orrs	r3, r2
 800a272:	4a2a      	ldr	r2, [pc, #168]	; (800a31c <xTaskResumeAll+0x120>)
 800a274:	6013      	str	r3, [r2, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27a:	4613      	mov	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4a27      	ldr	r2, [pc, #156]	; (800a320 <xTaskResumeAll+0x124>)
 800a284:	441a      	add	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3304      	adds	r3, #4
 800a28a:	4619      	mov	r1, r3
 800a28c:	4610      	mov	r0, r2
 800a28e:	f7fe fdea 	bl	8008e66 <vListInsertEnd>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a296:	4b23      	ldr	r3, [pc, #140]	; (800a324 <xTaskResumeAll+0x128>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d302      	bcc.n	800a2a6 <xTaskResumeAll+0xaa>
 800a2a0:	4b21      	ldr	r3, [pc, #132]	; (800a328 <xTaskResumeAll+0x12c>)
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	4b1c      	ldr	r3, [pc, #112]	; (800a318 <xTaskResumeAll+0x11c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1cc      	bne.n	800a248 <xTaskResumeAll+0x4c>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <xTaskResumeAll+0xbc>
 800a2b4:	f000 fb12 	bl	800a8dc <prvResetNextTaskUnblockTime>
 800a2b8:	4b1c      	ldr	r3, [pc, #112]	; (800a32c <xTaskResumeAll+0x130>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	607b      	str	r3, [r7, #4]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d010      	beq.n	800a2e6 <xTaskResumeAll+0xea>
 800a2c4:	f000 f836 	bl	800a334 <xTaskIncrementTick>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <xTaskResumeAll+0xd8>
 800a2ce:	4b16      	ldr	r3, [pc, #88]	; (800a328 <xTaskResumeAll+0x12c>)
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	607b      	str	r3, [r7, #4]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1f1      	bne.n	800a2c4 <xTaskResumeAll+0xc8>
 800a2e0:	4b12      	ldr	r3, [pc, #72]	; (800a32c <xTaskResumeAll+0x130>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	4b10      	ldr	r3, [pc, #64]	; (800a328 <xTaskResumeAll+0x12c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d009      	beq.n	800a302 <xTaskResumeAll+0x106>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	60bb      	str	r3, [r7, #8]
 800a2f2:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <xTaskResumeAll+0x134>)
 800a2f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f000 fe87 	bl	800b014 <vPortExitCritical>
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20000620 	.word	0x20000620
 800a314:	200005f8 	.word	0x200005f8
 800a318:	200005b8 	.word	0x200005b8
 800a31c:	20000600 	.word	0x20000600
 800a320:	200004fc 	.word	0x200004fc
 800a324:	200004f8 	.word	0x200004f8
 800a328:	2000060c 	.word	0x2000060c
 800a32c:	20000608 	.word	0x20000608
 800a330:	e000ed04 	.word	0xe000ed04

0800a334 <xTaskIncrementTick>:
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	2300      	movs	r3, #0
 800a33c:	617b      	str	r3, [r7, #20]
 800a33e:	4b4e      	ldr	r3, [pc, #312]	; (800a478 <xTaskIncrementTick+0x144>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 808e 	bne.w	800a464 <xTaskIncrementTick+0x130>
 800a348:	4b4c      	ldr	r3, [pc, #304]	; (800a47c <xTaskIncrementTick+0x148>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3301      	adds	r3, #1
 800a34e:	613b      	str	r3, [r7, #16]
 800a350:	4a4a      	ldr	r2, [pc, #296]	; (800a47c <xTaskIncrementTick+0x148>)
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d120      	bne.n	800a39e <xTaskIncrementTick+0x6a>
 800a35c:	4b48      	ldr	r3, [pc, #288]	; (800a480 <xTaskIncrementTick+0x14c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00a      	beq.n	800a37c <xTaskIncrementTick+0x48>
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	bf00      	nop
 800a37a:	e7fe      	b.n	800a37a <xTaskIncrementTick+0x46>
 800a37c:	4b40      	ldr	r3, [pc, #256]	; (800a480 <xTaskIncrementTick+0x14c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	60fb      	str	r3, [r7, #12]
 800a382:	4b40      	ldr	r3, [pc, #256]	; (800a484 <xTaskIncrementTick+0x150>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a3e      	ldr	r2, [pc, #248]	; (800a480 <xTaskIncrementTick+0x14c>)
 800a388:	6013      	str	r3, [r2, #0]
 800a38a:	4a3e      	ldr	r2, [pc, #248]	; (800a484 <xTaskIncrementTick+0x150>)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	4b3d      	ldr	r3, [pc, #244]	; (800a488 <xTaskIncrementTick+0x154>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3301      	adds	r3, #1
 800a396:	4a3c      	ldr	r2, [pc, #240]	; (800a488 <xTaskIncrementTick+0x154>)
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	f000 fa9f 	bl	800a8dc <prvResetNextTaskUnblockTime>
 800a39e:	4b3b      	ldr	r3, [pc, #236]	; (800a48c <xTaskIncrementTick+0x158>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d348      	bcc.n	800a43a <xTaskIncrementTick+0x106>
 800a3a8:	4b35      	ldr	r3, [pc, #212]	; (800a480 <xTaskIncrementTick+0x14c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d104      	bne.n	800a3bc <xTaskIncrementTick+0x88>
 800a3b2:	4b36      	ldr	r3, [pc, #216]	; (800a48c <xTaskIncrementTick+0x158>)
 800a3b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	e03e      	b.n	800a43a <xTaskIncrementTick+0x106>
 800a3bc:	4b30      	ldr	r3, [pc, #192]	; (800a480 <xTaskIncrementTick+0x14c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	60bb      	str	r3, [r7, #8]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	607b      	str	r3, [r7, #4]
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d203      	bcs.n	800a3dc <xTaskIncrementTick+0xa8>
 800a3d4:	4a2d      	ldr	r2, [pc, #180]	; (800a48c <xTaskIncrementTick+0x158>)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	e02e      	b.n	800a43a <xTaskIncrementTick+0x106>
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe fd9d 	bl	8008f20 <uxListRemove>
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d004      	beq.n	800a3f8 <xTaskIncrementTick+0xc4>
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	3318      	adds	r3, #24
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fd94 	bl	8008f20 <uxListRemove>
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	409a      	lsls	r2, r3
 800a400:	4b23      	ldr	r3, [pc, #140]	; (800a490 <xTaskIncrementTick+0x15c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4313      	orrs	r3, r2
 800a406:	4a22      	ldr	r2, [pc, #136]	; (800a490 <xTaskIncrementTick+0x15c>)
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40e:	4613      	mov	r3, r2
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4a1f      	ldr	r2, [pc, #124]	; (800a494 <xTaskIncrementTick+0x160>)
 800a418:	441a      	add	r2, r3
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	3304      	adds	r3, #4
 800a41e:	4619      	mov	r1, r3
 800a420:	4610      	mov	r0, r2
 800a422:	f7fe fd20 	bl	8008e66 <vListInsertEnd>
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42a:	4b1b      	ldr	r3, [pc, #108]	; (800a498 <xTaskIncrementTick+0x164>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a430:	429a      	cmp	r2, r3
 800a432:	d3b9      	bcc.n	800a3a8 <xTaskIncrementTick+0x74>
 800a434:	2301      	movs	r3, #1
 800a436:	617b      	str	r3, [r7, #20]
 800a438:	e7b6      	b.n	800a3a8 <xTaskIncrementTick+0x74>
 800a43a:	4b17      	ldr	r3, [pc, #92]	; (800a498 <xTaskIncrementTick+0x164>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a440:	4914      	ldr	r1, [pc, #80]	; (800a494 <xTaskIncrementTick+0x160>)
 800a442:	4613      	mov	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	440b      	add	r3, r1
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d901      	bls.n	800a456 <xTaskIncrementTick+0x122>
 800a452:	2301      	movs	r3, #1
 800a454:	617b      	str	r3, [r7, #20]
 800a456:	4b11      	ldr	r3, [pc, #68]	; (800a49c <xTaskIncrementTick+0x168>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d007      	beq.n	800a46e <xTaskIncrementTick+0x13a>
 800a45e:	2301      	movs	r3, #1
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	e004      	b.n	800a46e <xTaskIncrementTick+0x13a>
 800a464:	4b0e      	ldr	r3, [pc, #56]	; (800a4a0 <xTaskIncrementTick+0x16c>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	3301      	adds	r3, #1
 800a46a:	4a0d      	ldr	r2, [pc, #52]	; (800a4a0 <xTaskIncrementTick+0x16c>)
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	20000620 	.word	0x20000620
 800a47c:	200005fc 	.word	0x200005fc
 800a480:	200005b0 	.word	0x200005b0
 800a484:	200005b4 	.word	0x200005b4
 800a488:	20000610 	.word	0x20000610
 800a48c:	20000618 	.word	0x20000618
 800a490:	20000600 	.word	0x20000600
 800a494:	200004fc 	.word	0x200004fc
 800a498:	200004f8 	.word	0x200004f8
 800a49c:	2000060c 	.word	0x2000060c
 800a4a0:	20000608 	.word	0x20000608

0800a4a4 <vTaskSwitchContext>:
 800a4a4:	b480      	push	{r7}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4b27      	ldr	r3, [pc, #156]	; (800a548 <vTaskSwitchContext+0xa4>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <vTaskSwitchContext+0x16>
 800a4b2:	4b26      	ldr	r3, [pc, #152]	; (800a54c <vTaskSwitchContext+0xa8>)
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	601a      	str	r2, [r3, #0]
 800a4b8:	e03f      	b.n	800a53a <vTaskSwitchContext+0x96>
 800a4ba:	4b24      	ldr	r3, [pc, #144]	; (800a54c <vTaskSwitchContext+0xa8>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]
 800a4c0:	4b23      	ldr	r3, [pc, #140]	; (800a550 <vTaskSwitchContext+0xac>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	60fb      	str	r3, [r7, #12]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	fab3 f383 	clz	r3, r3
 800a4cc:	72fb      	strb	r3, [r7, #11]
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	f1c3 031f 	rsb	r3, r3, #31
 800a4d4:	617b      	str	r3, [r7, #20]
 800a4d6:	491f      	ldr	r1, [pc, #124]	; (800a554 <vTaskSwitchContext+0xb0>)
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	440b      	add	r3, r1
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <vTaskSwitchContext+0x5c>
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	607b      	str	r3, [r7, #4]
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <vTaskSwitchContext+0x5a>
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	4613      	mov	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4a12      	ldr	r2, [pc, #72]	; (800a554 <vTaskSwitchContext+0xb0>)
 800a50c:	4413      	add	r3, r2
 800a50e:	613b      	str	r3, [r7, #16]
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	605a      	str	r2, [r3, #4]
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	3308      	adds	r3, #8
 800a522:	429a      	cmp	r2, r3
 800a524:	d104      	bne.n	800a530 <vTaskSwitchContext+0x8c>
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	605a      	str	r2, [r3, #4]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	4a08      	ldr	r2, [pc, #32]	; (800a558 <vTaskSwitchContext+0xb4>)
 800a538:	6013      	str	r3, [r2, #0]
 800a53a:	bf00      	nop
 800a53c:	371c      	adds	r7, #28
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	20000620 	.word	0x20000620
 800a54c:	2000060c 	.word	0x2000060c
 800a550:	20000600 	.word	0x20000600
 800a554:	200004fc 	.word	0x200004fc
 800a558:	200004f8 	.word	0x200004f8

0800a55c <vTaskPlaceOnEventList>:
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <vTaskPlaceOnEventList+0x26>
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <vTaskPlaceOnEventList+0x24>
 800a582:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <vTaskPlaceOnEventList+0x44>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3318      	adds	r3, #24
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7fe fc8f 	bl	8008eae <vListInsert>
 800a590:	2101      	movs	r1, #1
 800a592:	6838      	ldr	r0, [r7, #0]
 800a594:	f000 fb7e 	bl	800ac94 <prvAddCurrentTaskToDelayedList>
 800a598:	bf00      	nop
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	200004f8 	.word	0x200004f8

0800a5a4 <xTaskRemoveFromEventList>:
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	613b      	str	r3, [r7, #16]
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10a      	bne.n	800a5d0 <xTaskRemoveFromEventList+0x2c>
 800a5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	bf00      	nop
 800a5ce:	e7fe      	b.n	800a5ce <xTaskRemoveFromEventList+0x2a>
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	3318      	adds	r3, #24
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fe fca3 	bl	8008f20 <uxListRemove>
 800a5da:	4b1d      	ldr	r3, [pc, #116]	; (800a650 <xTaskRemoveFromEventList+0xac>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d11c      	bne.n	800a61c <xTaskRemoveFromEventList+0x78>
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fe fc9a 	bl	8008f20 <uxListRemove>
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	409a      	lsls	r2, r3
 800a5f4:	4b17      	ldr	r3, [pc, #92]	; (800a654 <xTaskRemoveFromEventList+0xb0>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	4a16      	ldr	r2, [pc, #88]	; (800a654 <xTaskRemoveFromEventList+0xb0>)
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a602:	4613      	mov	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4a13      	ldr	r2, [pc, #76]	; (800a658 <xTaskRemoveFromEventList+0xb4>)
 800a60c:	441a      	add	r2, r3
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	3304      	adds	r3, #4
 800a612:	4619      	mov	r1, r3
 800a614:	4610      	mov	r0, r2
 800a616:	f7fe fc26 	bl	8008e66 <vListInsertEnd>
 800a61a:	e005      	b.n	800a628 <xTaskRemoveFromEventList+0x84>
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	3318      	adds	r3, #24
 800a620:	4619      	mov	r1, r3
 800a622:	480e      	ldr	r0, [pc, #56]	; (800a65c <xTaskRemoveFromEventList+0xb8>)
 800a624:	f7fe fc1f 	bl	8008e66 <vListInsertEnd>
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62c:	4b0c      	ldr	r3, [pc, #48]	; (800a660 <xTaskRemoveFromEventList+0xbc>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a632:	429a      	cmp	r2, r3
 800a634:	d905      	bls.n	800a642 <xTaskRemoveFromEventList+0x9e>
 800a636:	2301      	movs	r3, #1
 800a638:	617b      	str	r3, [r7, #20]
 800a63a:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <xTaskRemoveFromEventList+0xc0>)
 800a63c:	2201      	movs	r2, #1
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	e001      	b.n	800a646 <xTaskRemoveFromEventList+0xa2>
 800a642:	2300      	movs	r3, #0
 800a644:	617b      	str	r3, [r7, #20]
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	4618      	mov	r0, r3
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	20000620 	.word	0x20000620
 800a654:	20000600 	.word	0x20000600
 800a658:	200004fc 	.word	0x200004fc
 800a65c:	200005b8 	.word	0x200005b8
 800a660:	200004f8 	.word	0x200004f8
 800a664:	2000060c 	.word	0x2000060c

0800a668 <vTaskInternalSetTimeOutState>:
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	4b06      	ldr	r3, [pc, #24]	; (800a68c <vTaskInternalSetTimeOutState+0x24>)
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	4b05      	ldr	r3, [pc, #20]	; (800a690 <vTaskInternalSetTimeOutState+0x28>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	605a      	str	r2, [r3, #4]
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	20000610 	.word	0x20000610
 800a690:	200005fc 	.word	0x200005fc

0800a694 <xTaskCheckForTimeOut>:
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <xTaskCheckForTimeOut+0x26>
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	613b      	str	r3, [r7, #16]
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <xTaskCheckForTimeOut+0x24>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10a      	bne.n	800a6d6 <xTaskCheckForTimeOut+0x42>
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	60fb      	str	r3, [r7, #12]
 800a6d2:	bf00      	nop
 800a6d4:	e7fe      	b.n	800a6d4 <xTaskCheckForTimeOut+0x40>
 800a6d6:	f000 fc6d 	bl	800afb4 <vPortEnterCritical>
 800a6da:	4b1d      	ldr	r3, [pc, #116]	; (800a750 <xTaskCheckForTimeOut+0xbc>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	61bb      	str	r3, [r7, #24]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	69ba      	ldr	r2, [r7, #24]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	617b      	str	r3, [r7, #20]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6f2:	d102      	bne.n	800a6fa <xTaskCheckForTimeOut+0x66>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	61fb      	str	r3, [r7, #28]
 800a6f8:	e023      	b.n	800a742 <xTaskCheckForTimeOut+0xae>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	4b15      	ldr	r3, [pc, #84]	; (800a754 <xTaskCheckForTimeOut+0xc0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d007      	beq.n	800a716 <xTaskCheckForTimeOut+0x82>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	69ba      	ldr	r2, [r7, #24]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d302      	bcc.n	800a716 <xTaskCheckForTimeOut+0x82>
 800a710:	2301      	movs	r3, #1
 800a712:	61fb      	str	r3, [r7, #28]
 800a714:	e015      	b.n	800a742 <xTaskCheckForTimeOut+0xae>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d20b      	bcs.n	800a738 <xTaskCheckForTimeOut+0xa4>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	1ad2      	subs	r2, r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff ff9b 	bl	800a668 <vTaskInternalSetTimeOutState>
 800a732:	2300      	movs	r3, #0
 800a734:	61fb      	str	r3, [r7, #28]
 800a736:	e004      	b.n	800a742 <xTaskCheckForTimeOut+0xae>
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2200      	movs	r2, #0
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	2301      	movs	r3, #1
 800a740:	61fb      	str	r3, [r7, #28]
 800a742:	f000 fc67 	bl	800b014 <vPortExitCritical>
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	4618      	mov	r0, r3
 800a74a:	3720      	adds	r7, #32
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	200005fc 	.word	0x200005fc
 800a754:	20000610 	.word	0x20000610

0800a758 <vTaskMissedYield>:
 800a758:	b480      	push	{r7}
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	4b03      	ldr	r3, [pc, #12]	; (800a76c <vTaskMissedYield+0x14>)
 800a75e:	2201      	movs	r2, #1
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	bf00      	nop
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	2000060c 	.word	0x2000060c

0800a770 <prvIdleTask>:
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	f000 f852 	bl	800a820 <prvCheckTasksWaitingTermination>
 800a77c:	4b06      	ldr	r3, [pc, #24]	; (800a798 <prvIdleTask+0x28>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d9f9      	bls.n	800a778 <prvIdleTask+0x8>
 800a784:	4b05      	ldr	r3, [pc, #20]	; (800a79c <prvIdleTask+0x2c>)
 800a786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	e7f0      	b.n	800a778 <prvIdleTask+0x8>
 800a796:	bf00      	nop
 800a798:	200004fc 	.word	0x200004fc
 800a79c:	e000ed04 	.word	0xe000ed04

0800a7a0 <prvInitialiseTaskLists>:
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	607b      	str	r3, [r7, #4]
 800a7aa:	e00c      	b.n	800a7c6 <prvInitialiseTaskLists+0x26>
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4a12      	ldr	r2, [pc, #72]	; (800a800 <prvInitialiseTaskLists+0x60>)
 800a7b8:	4413      	add	r3, r2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fe fb26 	bl	8008e0c <vListInitialise>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	607b      	str	r3, [r7, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b06      	cmp	r3, #6
 800a7ca:	d9ef      	bls.n	800a7ac <prvInitialiseTaskLists+0xc>
 800a7cc:	480d      	ldr	r0, [pc, #52]	; (800a804 <prvInitialiseTaskLists+0x64>)
 800a7ce:	f7fe fb1d 	bl	8008e0c <vListInitialise>
 800a7d2:	480d      	ldr	r0, [pc, #52]	; (800a808 <prvInitialiseTaskLists+0x68>)
 800a7d4:	f7fe fb1a 	bl	8008e0c <vListInitialise>
 800a7d8:	480c      	ldr	r0, [pc, #48]	; (800a80c <prvInitialiseTaskLists+0x6c>)
 800a7da:	f7fe fb17 	bl	8008e0c <vListInitialise>
 800a7de:	480c      	ldr	r0, [pc, #48]	; (800a810 <prvInitialiseTaskLists+0x70>)
 800a7e0:	f7fe fb14 	bl	8008e0c <vListInitialise>
 800a7e4:	480b      	ldr	r0, [pc, #44]	; (800a814 <prvInitialiseTaskLists+0x74>)
 800a7e6:	f7fe fb11 	bl	8008e0c <vListInitialise>
 800a7ea:	4b0b      	ldr	r3, [pc, #44]	; (800a818 <prvInitialiseTaskLists+0x78>)
 800a7ec:	4a05      	ldr	r2, [pc, #20]	; (800a804 <prvInitialiseTaskLists+0x64>)
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <prvInitialiseTaskLists+0x7c>)
 800a7f2:	4a05      	ldr	r2, [pc, #20]	; (800a808 <prvInitialiseTaskLists+0x68>)
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	bf00      	nop
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	200004fc 	.word	0x200004fc
 800a804:	20000588 	.word	0x20000588
 800a808:	2000059c 	.word	0x2000059c
 800a80c:	200005b8 	.word	0x200005b8
 800a810:	200005cc 	.word	0x200005cc
 800a814:	200005e4 	.word	0x200005e4
 800a818:	200005b0 	.word	0x200005b0
 800a81c:	200005b4 	.word	0x200005b4

0800a820 <prvCheckTasksWaitingTermination>:
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	e019      	b.n	800a85c <prvCheckTasksWaitingTermination+0x3c>
 800a828:	f000 fbc4 	bl	800afb4 <vPortEnterCritical>
 800a82c:	4b10      	ldr	r3, [pc, #64]	; (800a870 <prvCheckTasksWaitingTermination+0x50>)
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	607b      	str	r3, [r7, #4]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	3304      	adds	r3, #4
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fe fb71 	bl	8008f20 <uxListRemove>
 800a83e:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <prvCheckTasksWaitingTermination+0x54>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3b01      	subs	r3, #1
 800a844:	4a0b      	ldr	r2, [pc, #44]	; (800a874 <prvCheckTasksWaitingTermination+0x54>)
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	4b0b      	ldr	r3, [pc, #44]	; (800a878 <prvCheckTasksWaitingTermination+0x58>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	4a0a      	ldr	r2, [pc, #40]	; (800a878 <prvCheckTasksWaitingTermination+0x58>)
 800a850:	6013      	str	r3, [r2, #0]
 800a852:	f000 fbdf 	bl	800b014 <vPortExitCritical>
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f810 	bl	800a87c <prvDeleteTCB>
 800a85c:	4b06      	ldr	r3, [pc, #24]	; (800a878 <prvCheckTasksWaitingTermination+0x58>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1e1      	bne.n	800a828 <prvCheckTasksWaitingTermination+0x8>
 800a864:	bf00      	nop
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	200005cc 	.word	0x200005cc
 800a874:	200005f8 	.word	0x200005f8
 800a878:	200005e0 	.word	0x200005e0

0800a87c <prvDeleteTCB>:
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d108      	bne.n	800a8a0 <prvDeleteTCB+0x24>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	4618      	mov	r0, r3
 800a894:	f000 fd7c 	bl	800b390 <vPortFree>
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fd79 	bl	800b390 <vPortFree>
 800a89e:	e018      	b.n	800a8d2 <prvDeleteTCB+0x56>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d103      	bne.n	800a8b2 <prvDeleteTCB+0x36>
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fd70 	bl	800b390 <vPortFree>
 800a8b0:	e00f      	b.n	800a8d2 <prvDeleteTCB+0x56>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d00a      	beq.n	800a8d2 <prvDeleteTCB+0x56>
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	60fb      	str	r3, [r7, #12]
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <prvDeleteTCB+0x54>
 800a8d2:	bf00      	nop
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <prvResetNextTaskUnblockTime>:
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4b0c      	ldr	r3, [pc, #48]	; (800a914 <prvResetNextTaskUnblockTime+0x38>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d104      	bne.n	800a8f6 <prvResetNextTaskUnblockTime+0x1a>
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <prvResetNextTaskUnblockTime+0x3c>)
 800a8ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8f2:	601a      	str	r2, [r3, #0]
 800a8f4:	e008      	b.n	800a908 <prvResetNextTaskUnblockTime+0x2c>
 800a8f6:	4b07      	ldr	r3, [pc, #28]	; (800a914 <prvResetNextTaskUnblockTime+0x38>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	607b      	str	r3, [r7, #4]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	4a04      	ldr	r2, [pc, #16]	; (800a918 <prvResetNextTaskUnblockTime+0x3c>)
 800a906:	6013      	str	r3, [r2, #0]
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	200005b0 	.word	0x200005b0
 800a918:	20000618 	.word	0x20000618

0800a91c <xTaskGetSchedulerState>:
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <xTaskGetSchedulerState+0x34>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d102      	bne.n	800a930 <xTaskGetSchedulerState+0x14>
 800a92a:	2301      	movs	r3, #1
 800a92c:	607b      	str	r3, [r7, #4]
 800a92e:	e008      	b.n	800a942 <xTaskGetSchedulerState+0x26>
 800a930:	4b08      	ldr	r3, [pc, #32]	; (800a954 <xTaskGetSchedulerState+0x38>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <xTaskGetSchedulerState+0x22>
 800a938:	2302      	movs	r3, #2
 800a93a:	607b      	str	r3, [r7, #4]
 800a93c:	e001      	b.n	800a942 <xTaskGetSchedulerState+0x26>
 800a93e:	2300      	movs	r3, #0
 800a940:	607b      	str	r3, [r7, #4]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4618      	mov	r0, r3
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	20000604 	.word	0x20000604
 800a954:	20000620 	.word	0x20000620

0800a958 <xTaskPriorityInherit>:
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60bb      	str	r3, [r7, #8]
 800a964:	2300      	movs	r3, #0
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d05e      	beq.n	800aa2c <xTaskPriorityInherit+0xd4>
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a972:	4b31      	ldr	r3, [pc, #196]	; (800aa38 <xTaskPriorityInherit+0xe0>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	429a      	cmp	r2, r3
 800a97a:	d24e      	bcs.n	800aa1a <xTaskPriorityInherit+0xc2>
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	2b00      	cmp	r3, #0
 800a982:	db06      	blt.n	800a992 <xTaskPriorityInherit+0x3a>
 800a984:	4b2c      	ldr	r3, [pc, #176]	; (800aa38 <xTaskPriorityInherit+0xe0>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98a:	f1c3 0207 	rsb	r2, r3, #7
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	619a      	str	r2, [r3, #24]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	6959      	ldr	r1, [r3, #20]
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4a26      	ldr	r2, [pc, #152]	; (800aa3c <xTaskPriorityInherit+0xe4>)
 800a9a4:	4413      	add	r3, r2
 800a9a6:	4299      	cmp	r1, r3
 800a9a8:	d12f      	bne.n	800aa0a <xTaskPriorityInherit+0xb2>
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe fab6 	bl	8008f20 <uxListRemove>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10a      	bne.n	800a9d0 <xTaskPriorityInherit+0x78>
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9be:	2201      	movs	r2, #1
 800a9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c4:	43da      	mvns	r2, r3
 800a9c6:	4b1e      	ldr	r3, [pc, #120]	; (800aa40 <xTaskPriorityInherit+0xe8>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	4a1c      	ldr	r2, [pc, #112]	; (800aa40 <xTaskPriorityInherit+0xe8>)
 800a9ce:	6013      	str	r3, [r2, #0]
 800a9d0:	4b19      	ldr	r3, [pc, #100]	; (800aa38 <xTaskPriorityInherit+0xe0>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9de:	2201      	movs	r2, #1
 800a9e0:	409a      	lsls	r2, r3
 800a9e2:	4b17      	ldr	r3, [pc, #92]	; (800aa40 <xTaskPriorityInherit+0xe8>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	4a15      	ldr	r2, [pc, #84]	; (800aa40 <xTaskPriorityInherit+0xe8>)
 800a9ea:	6013      	str	r3, [r2, #0]
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4a10      	ldr	r2, [pc, #64]	; (800aa3c <xTaskPriorityInherit+0xe4>)
 800a9fa:	441a      	add	r2, r3
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	3304      	adds	r3, #4
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f7fe fa2f 	bl	8008e66 <vListInsertEnd>
 800aa08:	e004      	b.n	800aa14 <xTaskPriorityInherit+0xbc>
 800aa0a:	4b0b      	ldr	r3, [pc, #44]	; (800aa38 <xTaskPriorityInherit+0xe0>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa14:	2301      	movs	r3, #1
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	e008      	b.n	800aa2c <xTaskPriorityInherit+0xd4>
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa1e:	4b06      	ldr	r3, [pc, #24]	; (800aa38 <xTaskPriorityInherit+0xe0>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d201      	bcs.n	800aa2c <xTaskPriorityInherit+0xd4>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	200004f8 	.word	0x200004f8
 800aa3c:	200004fc 	.word	0x200004fc
 800aa40:	20000600 	.word	0x20000600

0800aa44 <xTaskPriorityDisinherit>:
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	613b      	str	r3, [r7, #16]
 800aa50:	2300      	movs	r3, #0
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d06e      	beq.n	800ab38 <xTaskPriorityDisinherit+0xf4>
 800aa5a:	4b3a      	ldr	r3, [pc, #232]	; (800ab44 <xTaskPriorityDisinherit+0x100>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d00a      	beq.n	800aa7a <xTaskPriorityDisinherit+0x36>
 800aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	bf00      	nop
 800aa78:	e7fe      	b.n	800aa78 <xTaskPriorityDisinherit+0x34>
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <xTaskPriorityDisinherit+0x54>
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	60bb      	str	r3, [r7, #8]
 800aa94:	bf00      	nop
 800aa96:	e7fe      	b.n	800aa96 <xTaskPriorityDisinherit+0x52>
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa9c:	1e5a      	subs	r2, r3, #1
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	649a      	str	r2, [r3, #72]	; 0x48
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d044      	beq.n	800ab38 <xTaskPriorityDisinherit+0xf4>
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d140      	bne.n	800ab38 <xTaskPriorityDisinherit+0xf4>
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	3304      	adds	r3, #4
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fe fa30 	bl	8008f20 <uxListRemove>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d115      	bne.n	800aaf2 <xTaskPriorityDisinherit+0xae>
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaca:	491f      	ldr	r1, [pc, #124]	; (800ab48 <xTaskPriorityDisinherit+0x104>)
 800aacc:	4613      	mov	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	4413      	add	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	440b      	add	r3, r1
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <xTaskPriorityDisinherit+0xae>
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	2201      	movs	r2, #1
 800aae2:	fa02 f303 	lsl.w	r3, r2, r3
 800aae6:	43da      	mvns	r2, r3
 800aae8:	4b18      	ldr	r3, [pc, #96]	; (800ab4c <xTaskPriorityDisinherit+0x108>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4013      	ands	r3, r2
 800aaee:	4a17      	ldr	r2, [pc, #92]	; (800ab4c <xTaskPriorityDisinherit+0x108>)
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	62da      	str	r2, [r3, #44]	; 0x2c
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafe:	f1c3 0207 	rsb	r2, r3, #7
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	619a      	str	r2, [r3, #24]
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	409a      	lsls	r2, r3
 800ab0e:	4b0f      	ldr	r3, [pc, #60]	; (800ab4c <xTaskPriorityDisinherit+0x108>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	4a0d      	ldr	r2, [pc, #52]	; (800ab4c <xTaskPriorityDisinherit+0x108>)
 800ab16:	6013      	str	r3, [r2, #0]
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4a08      	ldr	r2, [pc, #32]	; (800ab48 <xTaskPriorityDisinherit+0x104>)
 800ab26:	441a      	add	r2, r3
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f7fe f999 	bl	8008e66 <vListInsertEnd>
 800ab34:	2301      	movs	r3, #1
 800ab36:	617b      	str	r3, [r7, #20]
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	200004f8 	.word	0x200004f8
 800ab48:	200004fc 	.word	0x200004fc
 800ab4c:	20000600 	.word	0x20000600

0800ab50 <vTaskPriorityDisinheritAfterTimeout>:
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	61bb      	str	r3, [r7, #24]
 800ab5e:	2301      	movs	r3, #1
 800ab60:	617b      	str	r3, [r7, #20]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d077      	beq.n	800ac58 <vTaskPriorityDisinheritAfterTimeout+0x108>
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	60fb      	str	r3, [r7, #12]
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d902      	bls.n	800ab96 <vTaskPriorityDisinheritAfterTimeout+0x46>
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	61fb      	str	r3, [r7, #28]
 800ab94:	e002      	b.n	800ab9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9a:	61fb      	str	r3, [r7, #28]
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d058      	beq.n	800ac58 <vTaskPriorityDisinheritAfterTimeout+0x108>
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	429a      	cmp	r2, r3
 800abae:	d153      	bne.n	800ac58 <vTaskPriorityDisinheritAfterTimeout+0x108>
 800abb0:	4b2b      	ldr	r3, [pc, #172]	; (800ac60 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	69ba      	ldr	r2, [r7, #24]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d10a      	bne.n	800abd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800abba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	60bb      	str	r3, [r7, #8]
 800abcc:	bf00      	nop
 800abce:	e7fe      	b.n	800abce <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd4:	613b      	str	r3, [r7, #16]
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	69fa      	ldr	r2, [r7, #28]
 800abda:	62da      	str	r2, [r3, #44]	; 0x2c
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	db04      	blt.n	800abee <vTaskPriorityDisinheritAfterTimeout+0x9e>
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	f1c3 0207 	rsb	r2, r3, #7
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	619a      	str	r2, [r3, #24]
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	6959      	ldr	r1, [r3, #20]
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	4613      	mov	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4a19      	ldr	r2, [pc, #100]	; (800ac64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800abfe:	4413      	add	r3, r2
 800ac00:	4299      	cmp	r1, r3
 800ac02:	d129      	bne.n	800ac58 <vTaskPriorityDisinheritAfterTimeout+0x108>
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	3304      	adds	r3, #4
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fe f989 	bl	8008f20 <uxListRemove>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <vTaskPriorityDisinheritAfterTimeout+0xda>
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	2201      	movs	r2, #1
 800ac1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1e:	43da      	mvns	r2, r3
 800ac20:	4b11      	ldr	r3, [pc, #68]	; (800ac68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4013      	ands	r3, r2
 800ac26:	4a10      	ldr	r2, [pc, #64]	; (800ac68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ac28:	6013      	str	r3, [r2, #0]
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2e:	2201      	movs	r2, #1
 800ac30:	409a      	lsls	r2, r3
 800ac32:	4b0d      	ldr	r3, [pc, #52]	; (800ac68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	4a0b      	ldr	r2, [pc, #44]	; (800ac68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac40:	4613      	mov	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4a06      	ldr	r2, [pc, #24]	; (800ac64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ac4a:	441a      	add	r2, r3
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4619      	mov	r1, r3
 800ac52:	4610      	mov	r0, r2
 800ac54:	f7fe f907 	bl	8008e66 <vListInsertEnd>
 800ac58:	bf00      	nop
 800ac5a:	3720      	adds	r7, #32
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	200004f8 	.word	0x200004f8
 800ac64:	200004fc 	.word	0x200004fc
 800ac68:	20000600 	.word	0x20000600

0800ac6c <pvTaskIncrementMutexHeldCount>:
 800ac6c:	b480      	push	{r7}
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d004      	beq.n	800ac82 <pvTaskIncrementMutexHeldCount+0x16>
 800ac78:	4b05      	ldr	r3, [pc, #20]	; (800ac90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac7e:	3201      	adds	r2, #1
 800ac80:	649a      	str	r2, [r3, #72]	; 0x48
 800ac82:	4b03      	ldr	r3, [pc, #12]	; (800ac90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4618      	mov	r0, r3
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	200004f8 	.word	0x200004f8

0800ac94 <prvAddCurrentTaskToDelayedList>:
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
 800ac9e:	4b29      	ldr	r3, [pc, #164]	; (800ad44 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	4b28      	ldr	r3, [pc, #160]	; (800ad48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3304      	adds	r3, #4
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fe f938 	bl	8008f20 <uxListRemove>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10b      	bne.n	800acce <prvAddCurrentTaskToDelayedList+0x3a>
 800acb6:	4b24      	ldr	r3, [pc, #144]	; (800ad48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	2201      	movs	r2, #1
 800acbe:	fa02 f303 	lsl.w	r3, r2, r3
 800acc2:	43da      	mvns	r2, r3
 800acc4:	4b21      	ldr	r3, [pc, #132]	; (800ad4c <prvAddCurrentTaskToDelayedList+0xb8>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4013      	ands	r3, r2
 800acca:	4a20      	ldr	r2, [pc, #128]	; (800ad4c <prvAddCurrentTaskToDelayedList+0xb8>)
 800accc:	6013      	str	r3, [r2, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acd4:	d10a      	bne.n	800acec <prvAddCurrentTaskToDelayedList+0x58>
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d007      	beq.n	800acec <prvAddCurrentTaskToDelayedList+0x58>
 800acdc:	4b1a      	ldr	r3, [pc, #104]	; (800ad48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3304      	adds	r3, #4
 800ace2:	4619      	mov	r1, r3
 800ace4:	481a      	ldr	r0, [pc, #104]	; (800ad50 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ace6:	f7fe f8be 	bl	8008e66 <vListInsertEnd>
 800acea:	e026      	b.n	800ad3a <prvAddCurrentTaskToDelayedList+0xa6>
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4413      	add	r3, r2
 800acf2:	60bb      	str	r3, [r7, #8]
 800acf4:	4b14      	ldr	r3, [pc, #80]	; (800ad48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	605a      	str	r2, [r3, #4]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d209      	bcs.n	800ad18 <prvAddCurrentTaskToDelayedList+0x84>
 800ad04:	4b13      	ldr	r3, [pc, #76]	; (800ad54 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4610      	mov	r0, r2
 800ad12:	f7fe f8cc 	bl	8008eae <vListInsert>
 800ad16:	e010      	b.n	800ad3a <prvAddCurrentTaskToDelayedList+0xa6>
 800ad18:	4b0f      	ldr	r3, [pc, #60]	; (800ad58 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	4b0a      	ldr	r3, [pc, #40]	; (800ad48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3304      	adds	r3, #4
 800ad22:	4619      	mov	r1, r3
 800ad24:	4610      	mov	r0, r2
 800ad26:	f7fe f8c2 	bl	8008eae <vListInsert>
 800ad2a:	4b0c      	ldr	r3, [pc, #48]	; (800ad5c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d202      	bcs.n	800ad3a <prvAddCurrentTaskToDelayedList+0xa6>
 800ad34:	4a09      	ldr	r2, [pc, #36]	; (800ad5c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	6013      	str	r3, [r2, #0]
 800ad3a:	bf00      	nop
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	200005fc 	.word	0x200005fc
 800ad48:	200004f8 	.word	0x200004f8
 800ad4c:	20000600 	.word	0x20000600
 800ad50:	200005e4 	.word	0x200005e4
 800ad54:	200005b4 	.word	0x200005b4
 800ad58:	200005b0 	.word	0x200005b0
 800ad5c:	20000618 	.word	0x20000618

0800ad60 <pxPortInitialiseStack>:
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3b04      	subs	r3, #4
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3b04      	subs	r3, #4
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	f023 0201 	bic.w	r2, r3, #1
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3b04      	subs	r3, #4
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	4a0c      	ldr	r2, [pc, #48]	; (800adc4 <pxPortInitialiseStack+0x64>)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	601a      	str	r2, [r3, #0]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3b14      	subs	r3, #20
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	601a      	str	r2, [r3, #0]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	3b04      	subs	r3, #4
 800ada6:	60fb      	str	r3, [r7, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f06f 0202 	mvn.w	r2, #2
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	3b20      	subs	r3, #32
 800adb4:	60fb      	str	r3, [r7, #12]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4618      	mov	r0, r3
 800adba:	3714      	adds	r7, #20
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	0800adc9 	.word	0x0800adc9

0800adc8 <prvTaskExitError>:
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	2300      	movs	r3, #0
 800add0:	607b      	str	r3, [r7, #4]
 800add2:	4b12      	ldr	r3, [pc, #72]	; (800ae1c <prvTaskExitError+0x54>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adda:	d00a      	beq.n	800adf2 <prvTaskExitError+0x2a>
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <prvTaskExitError+0x28>
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	60bb      	str	r3, [r7, #8]
 800ae04:	bf00      	nop
 800ae06:	bf00      	nop
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d0fc      	beq.n	800ae08 <prvTaskExitError+0x40>
 800ae0e:	bf00      	nop
 800ae10:	bf00      	nop
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	20000010 	.word	0x20000010

0800ae20 <SVC_Handler>:
 800ae20:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <pxCurrentTCBConst2>)
 800ae22:	6819      	ldr	r1, [r3, #0]
 800ae24:	6808      	ldr	r0, [r1, #0]
 800ae26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2a:	f380 8809 	msr	PSP, r0
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f04f 0000 	mov.w	r0, #0
 800ae36:	f380 8811 	msr	BASEPRI, r0
 800ae3a:	4770      	bx	lr
 800ae3c:	f3af 8000 	nop.w

0800ae40 <pxCurrentTCBConst2>:
 800ae40:	200004f8 	.word	0x200004f8
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop

0800ae48 <prvPortStartFirstTask>:
 800ae48:	4808      	ldr	r0, [pc, #32]	; (800ae6c <prvPortStartFirstTask+0x24>)
 800ae4a:	6800      	ldr	r0, [r0, #0]
 800ae4c:	6800      	ldr	r0, [r0, #0]
 800ae4e:	f380 8808 	msr	MSP, r0
 800ae52:	f04f 0000 	mov.w	r0, #0
 800ae56:	f380 8814 	msr	CONTROL, r0
 800ae5a:	b662      	cpsie	i
 800ae5c:	b661      	cpsie	f
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	df00      	svc	0
 800ae68:	bf00      	nop
 800ae6a:	bf00      	nop
 800ae6c:	e000ed08 	.word	0xe000ed08

0800ae70 <xPortStartScheduler>:
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4b46      	ldr	r3, [pc, #280]	; (800af90 <xPortStartScheduler+0x120>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a46      	ldr	r2, [pc, #280]	; (800af94 <xPortStartScheduler+0x124>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d10a      	bne.n	800ae96 <xPortStartScheduler+0x26>
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	613b      	str	r3, [r7, #16]
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xPortStartScheduler+0x24>
 800ae96:	4b3e      	ldr	r3, [pc, #248]	; (800af90 <xPortStartScheduler+0x120>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a3f      	ldr	r2, [pc, #252]	; (800af98 <xPortStartScheduler+0x128>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d10a      	bne.n	800aeb6 <xPortStartScheduler+0x46>
 800aea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	60fb      	str	r3, [r7, #12]
 800aeb2:	bf00      	nop
 800aeb4:	e7fe      	b.n	800aeb4 <xPortStartScheduler+0x44>
 800aeb6:	4b39      	ldr	r3, [pc, #228]	; (800af9c <xPortStartScheduler+0x12c>)
 800aeb8:	617b      	str	r3, [r7, #20]
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	607b      	str	r3, [r7, #4]
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	22ff      	movs	r2, #255	; 0xff
 800aec6:	701a      	strb	r2, [r3, #0]
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	70fb      	strb	r3, [r7, #3]
 800aed0:	78fb      	ldrb	r3, [r7, #3]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	4b31      	ldr	r3, [pc, #196]	; (800afa0 <xPortStartScheduler+0x130>)
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <xPortStartScheduler+0x134>)
 800aee0:	2207      	movs	r2, #7
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	e009      	b.n	800aefa <xPortStartScheduler+0x8a>
 800aee6:	4b2f      	ldr	r3, [pc, #188]	; (800afa4 <xPortStartScheduler+0x134>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	4a2d      	ldr	r2, [pc, #180]	; (800afa4 <xPortStartScheduler+0x134>)
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	78fb      	ldrb	r3, [r7, #3]
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	005b      	lsls	r3, r3, #1
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	70fb      	strb	r3, [r7, #3]
 800aefa:	78fb      	ldrb	r3, [r7, #3]
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af02:	2b80      	cmp	r3, #128	; 0x80
 800af04:	d0ef      	beq.n	800aee6 <xPortStartScheduler+0x76>
 800af06:	4b27      	ldr	r3, [pc, #156]	; (800afa4 <xPortStartScheduler+0x134>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f1c3 0307 	rsb	r3, r3, #7
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d00a      	beq.n	800af28 <xPortStartScheduler+0xb8>
 800af12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	60bb      	str	r3, [r7, #8]
 800af24:	bf00      	nop
 800af26:	e7fe      	b.n	800af26 <xPortStartScheduler+0xb6>
 800af28:	4b1e      	ldr	r3, [pc, #120]	; (800afa4 <xPortStartScheduler+0x134>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	021b      	lsls	r3, r3, #8
 800af2e:	4a1d      	ldr	r2, [pc, #116]	; (800afa4 <xPortStartScheduler+0x134>)
 800af30:	6013      	str	r3, [r2, #0]
 800af32:	4b1c      	ldr	r3, [pc, #112]	; (800afa4 <xPortStartScheduler+0x134>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af3a:	4a1a      	ldr	r2, [pc, #104]	; (800afa4 <xPortStartScheduler+0x134>)
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	b2da      	uxtb	r2, r3
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	701a      	strb	r2, [r3, #0]
 800af46:	4b18      	ldr	r3, [pc, #96]	; (800afa8 <xPortStartScheduler+0x138>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a17      	ldr	r2, [pc, #92]	; (800afa8 <xPortStartScheduler+0x138>)
 800af4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af50:	6013      	str	r3, [r2, #0]
 800af52:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <xPortStartScheduler+0x138>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a14      	ldr	r2, [pc, #80]	; (800afa8 <xPortStartScheduler+0x138>)
 800af58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af5c:	6013      	str	r3, [r2, #0]
 800af5e:	f000 f8dd 	bl	800b11c <vPortSetupTimerInterrupt>
 800af62:	4b12      	ldr	r3, [pc, #72]	; (800afac <xPortStartScheduler+0x13c>)
 800af64:	2200      	movs	r2, #0
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	f000 f8fc 	bl	800b164 <vPortEnableVFP>
 800af6c:	4b10      	ldr	r3, [pc, #64]	; (800afb0 <xPortStartScheduler+0x140>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a0f      	ldr	r2, [pc, #60]	; (800afb0 <xPortStartScheduler+0x140>)
 800af72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	f7ff ff66 	bl	800ae48 <prvPortStartFirstTask>
 800af7c:	f7ff fa92 	bl	800a4a4 <vTaskSwitchContext>
 800af80:	f7ff ff22 	bl	800adc8 <prvTaskExitError>
 800af84:	2300      	movs	r3, #0
 800af86:	4618      	mov	r0, r3
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	e000ed00 	.word	0xe000ed00
 800af94:	410fc271 	.word	0x410fc271
 800af98:	410fc270 	.word	0x410fc270
 800af9c:	e000e400 	.word	0xe000e400
 800afa0:	20000624 	.word	0x20000624
 800afa4:	20000628 	.word	0x20000628
 800afa8:	e000ed20 	.word	0xe000ed20
 800afac:	20000010 	.word	0x20000010
 800afb0:	e000ef34 	.word	0xe000ef34

0800afb4 <vPortEnterCritical>:
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	607b      	str	r3, [r7, #4]
 800afcc:	bf00      	nop
 800afce:	4b0f      	ldr	r3, [pc, #60]	; (800b00c <vPortEnterCritical+0x58>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3301      	adds	r3, #1
 800afd4:	4a0d      	ldr	r2, [pc, #52]	; (800b00c <vPortEnterCritical+0x58>)
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	4b0c      	ldr	r3, [pc, #48]	; (800b00c <vPortEnterCritical+0x58>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d10f      	bne.n	800b000 <vPortEnterCritical+0x4c>
 800afe0:	4b0b      	ldr	r3, [pc, #44]	; (800b010 <vPortEnterCritical+0x5c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00a      	beq.n	800b000 <vPortEnterCritical+0x4c>
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	bf00      	nop
 800affe:	e7fe      	b.n	800affe <vPortEnterCritical+0x4a>
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	20000010 	.word	0x20000010
 800b010:	e000ed04 	.word	0xe000ed04

0800b014 <vPortExitCritical>:
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	4b12      	ldr	r3, [pc, #72]	; (800b064 <vPortExitCritical+0x50>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10a      	bne.n	800b038 <vPortExitCritical+0x24>
 800b022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	607b      	str	r3, [r7, #4]
 800b034:	bf00      	nop
 800b036:	e7fe      	b.n	800b036 <vPortExitCritical+0x22>
 800b038:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <vPortExitCritical+0x50>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	4a09      	ldr	r2, [pc, #36]	; (800b064 <vPortExitCritical+0x50>)
 800b040:	6013      	str	r3, [r2, #0]
 800b042:	4b08      	ldr	r3, [pc, #32]	; (800b064 <vPortExitCritical+0x50>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d105      	bne.n	800b056 <vPortExitCritical+0x42>
 800b04a:	2300      	movs	r3, #0
 800b04c:	603b      	str	r3, [r7, #0]
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20000010 	.word	0x20000010
	...

0800b070 <PendSV_Handler>:
 800b070:	f3ef 8009 	mrs	r0, PSP
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	4b15      	ldr	r3, [pc, #84]	; (800b0d0 <pxCurrentTCBConst>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	f01e 0f10 	tst.w	lr, #16
 800b080:	bf08      	it	eq
 800b082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08a:	6010      	str	r0, [r2, #0]
 800b08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b090:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b094:	f380 8811 	msr	BASEPRI, r0
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f7ff fa00 	bl	800a4a4 <vTaskSwitchContext>
 800b0a4:	f04f 0000 	mov.w	r0, #0
 800b0a8:	f380 8811 	msr	BASEPRI, r0
 800b0ac:	bc09      	pop	{r0, r3}
 800b0ae:	6819      	ldr	r1, [r3, #0]
 800b0b0:	6808      	ldr	r0, [r1, #0]
 800b0b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b6:	f01e 0f10 	tst.w	lr, #16
 800b0ba:	bf08      	it	eq
 800b0bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b0c0:	f380 8809 	msr	PSP, r0
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	f3af 8000 	nop.w

0800b0d0 <pxCurrentTCBConst>:
 800b0d0:	200004f8 	.word	0x200004f8
 800b0d4:	bf00      	nop
 800b0d6:	bf00      	nop

0800b0d8 <SysTick_Handler>:
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	607b      	str	r3, [r7, #4]
 800b0f0:	bf00      	nop
 800b0f2:	f7ff f91f 	bl	800a334 <xTaskIncrementTick>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <SysTick_Handler+0x2c>
 800b0fc:	4b06      	ldr	r3, [pc, #24]	; (800b118 <SysTick_Handler+0x40>)
 800b0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	2300      	movs	r3, #0
 800b106:	603b      	str	r3, [r7, #0]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	bf00      	nop
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	e000ed04 	.word	0xe000ed04

0800b11c <vPortSetupTimerInterrupt>:
 800b11c:	b480      	push	{r7}
 800b11e:	af00      	add	r7, sp, #0
 800b120:	4b0b      	ldr	r3, [pc, #44]	; (800b150 <vPortSetupTimerInterrupt+0x34>)
 800b122:	2200      	movs	r2, #0
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <vPortSetupTimerInterrupt+0x38>)
 800b128:	2200      	movs	r2, #0
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	4b0a      	ldr	r3, [pc, #40]	; (800b158 <vPortSetupTimerInterrupt+0x3c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a0a      	ldr	r2, [pc, #40]	; (800b15c <vPortSetupTimerInterrupt+0x40>)
 800b132:	fba2 2303 	umull	r2, r3, r2, r3
 800b136:	099b      	lsrs	r3, r3, #6
 800b138:	4a09      	ldr	r2, [pc, #36]	; (800b160 <vPortSetupTimerInterrupt+0x44>)
 800b13a:	3b01      	subs	r3, #1
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	4b04      	ldr	r3, [pc, #16]	; (800b150 <vPortSetupTimerInterrupt+0x34>)
 800b140:	2207      	movs	r2, #7
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	bf00      	nop
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	e000e010 	.word	0xe000e010
 800b154:	e000e018 	.word	0xe000e018
 800b158:	20000004 	.word	0x20000004
 800b15c:	10624dd3 	.word	0x10624dd3
 800b160:	e000e014 	.word	0xe000e014

0800b164 <vPortEnableVFP>:
 800b164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b174 <vPortEnableVFP+0x10>
 800b168:	6801      	ldr	r1, [r0, #0]
 800b16a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b16e:	6001      	str	r1, [r0, #0]
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	e000ed88 	.word	0xe000ed88

0800b178 <vPortValidateInterruptPriority>:
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	f3ef 8305 	mrs	r3, IPSR
 800b182:	60fb      	str	r3, [r7, #12]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b0f      	cmp	r3, #15
 800b188:	d914      	bls.n	800b1b4 <vPortValidateInterruptPriority+0x3c>
 800b18a:	4a17      	ldr	r2, [pc, #92]	; (800b1e8 <vPortValidateInterruptPriority+0x70>)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	72fb      	strb	r3, [r7, #11]
 800b194:	4b15      	ldr	r3, [pc, #84]	; (800b1ec <vPortValidateInterruptPriority+0x74>)
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	7afa      	ldrb	r2, [r7, #11]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d20a      	bcs.n	800b1b4 <vPortValidateInterruptPriority+0x3c>
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	607b      	str	r3, [r7, #4]
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <vPortValidateInterruptPriority+0x3a>
 800b1b4:	4b0e      	ldr	r3, [pc, #56]	; (800b1f0 <vPortValidateInterruptPriority+0x78>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b1bc:	4b0d      	ldr	r3, [pc, #52]	; (800b1f4 <vPortValidateInterruptPriority+0x7c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d90a      	bls.n	800b1da <vPortValidateInterruptPriority+0x62>
 800b1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c8:	f383 8811 	msr	BASEPRI, r3
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	603b      	str	r3, [r7, #0]
 800b1d6:	bf00      	nop
 800b1d8:	e7fe      	b.n	800b1d8 <vPortValidateInterruptPriority+0x60>
 800b1da:	bf00      	nop
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	e000e3f0 	.word	0xe000e3f0
 800b1ec:	20000624 	.word	0x20000624
 800b1f0:	e000ed0c 	.word	0xe000ed0c
 800b1f4:	20000628 	.word	0x20000628

0800b1f8 <pvPortMalloc>:
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b08a      	sub	sp, #40	; 0x28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	2300      	movs	r3, #0
 800b202:	61fb      	str	r3, [r7, #28]
 800b204:	f7fe ffec 	bl	800a1e0 <vTaskSuspendAll>
 800b208:	4b5b      	ldr	r3, [pc, #364]	; (800b378 <pvPortMalloc+0x180>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <pvPortMalloc+0x1c>
 800b210:	f000 f920 	bl	800b454 <prvHeapInit>
 800b214:	4b59      	ldr	r3, [pc, #356]	; (800b37c <pvPortMalloc+0x184>)
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4013      	ands	r3, r2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f040 8093 	bne.w	800b348 <pvPortMalloc+0x150>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d01d      	beq.n	800b264 <pvPortMalloc+0x6c>
 800b228:	2208      	movs	r2, #8
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4413      	add	r3, r2
 800b22e:	607b      	str	r3, [r7, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f003 0307 	and.w	r3, r3, #7
 800b236:	2b00      	cmp	r3, #0
 800b238:	d014      	beq.n	800b264 <pvPortMalloc+0x6c>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f023 0307 	bic.w	r3, r3, #7
 800b240:	3308      	adds	r3, #8
 800b242:	607b      	str	r3, [r7, #4]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00a      	beq.n	800b264 <pvPortMalloc+0x6c>
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	617b      	str	r3, [r7, #20]
 800b260:	bf00      	nop
 800b262:	e7fe      	b.n	800b262 <pvPortMalloc+0x6a>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d06e      	beq.n	800b348 <pvPortMalloc+0x150>
 800b26a:	4b45      	ldr	r3, [pc, #276]	; (800b380 <pvPortMalloc+0x188>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	429a      	cmp	r2, r3
 800b272:	d869      	bhi.n	800b348 <pvPortMalloc+0x150>
 800b274:	4b43      	ldr	r3, [pc, #268]	; (800b384 <pvPortMalloc+0x18c>)
 800b276:	623b      	str	r3, [r7, #32]
 800b278:	4b42      	ldr	r3, [pc, #264]	; (800b384 <pvPortMalloc+0x18c>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	627b      	str	r3, [r7, #36]	; 0x24
 800b27e:	e004      	b.n	800b28a <pvPortMalloc+0x92>
 800b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b282:	623b      	str	r3, [r7, #32]
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	429a      	cmp	r2, r3
 800b292:	d903      	bls.n	800b29c <pvPortMalloc+0xa4>
 800b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1f1      	bne.n	800b280 <pvPortMalloc+0x88>
 800b29c:	4b36      	ldr	r3, [pc, #216]	; (800b378 <pvPortMalloc+0x180>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d050      	beq.n	800b348 <pvPortMalloc+0x150>
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2208      	movs	r2, #8
 800b2ac:	4413      	add	r3, r2
 800b2ae:	61fb      	str	r3, [r7, #28]
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	6a3b      	ldr	r3, [r7, #32]
 800b2b6:	601a      	str	r2, [r3, #0]
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	1ad2      	subs	r2, r2, r3
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d91f      	bls.n	800b308 <pvPortMalloc+0x110>
 800b2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	61bb      	str	r3, [r7, #24]
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	f003 0307 	and.w	r3, r3, #7
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00a      	beq.n	800b2f0 <pvPortMalloc+0xf8>
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	bf00      	nop
 800b2ee:	e7fe      	b.n	800b2ee <pvPortMalloc+0xf6>
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	1ad2      	subs	r2, r2, r3
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	605a      	str	r2, [r3, #4]
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	605a      	str	r2, [r3, #4]
 800b302:	69b8      	ldr	r0, [r7, #24]
 800b304:	f000 f908 	bl	800b518 <prvInsertBlockIntoFreeList>
 800b308:	4b1d      	ldr	r3, [pc, #116]	; (800b380 <pvPortMalloc+0x188>)
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	4a1b      	ldr	r2, [pc, #108]	; (800b380 <pvPortMalloc+0x188>)
 800b314:	6013      	str	r3, [r2, #0]
 800b316:	4b1a      	ldr	r3, [pc, #104]	; (800b380 <pvPortMalloc+0x188>)
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	4b1b      	ldr	r3, [pc, #108]	; (800b388 <pvPortMalloc+0x190>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d203      	bcs.n	800b32a <pvPortMalloc+0x132>
 800b322:	4b17      	ldr	r3, [pc, #92]	; (800b380 <pvPortMalloc+0x188>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a18      	ldr	r2, [pc, #96]	; (800b388 <pvPortMalloc+0x190>)
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	4b13      	ldr	r3, [pc, #76]	; (800b37c <pvPortMalloc+0x184>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	431a      	orrs	r2, r3
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	605a      	str	r2, [r3, #4]
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	4b13      	ldr	r3, [pc, #76]	; (800b38c <pvPortMalloc+0x194>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3301      	adds	r3, #1
 800b344:	4a11      	ldr	r2, [pc, #68]	; (800b38c <pvPortMalloc+0x194>)
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	f7fe ff58 	bl	800a1fc <xTaskResumeAll>
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	f003 0307 	and.w	r3, r3, #7
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00a      	beq.n	800b36c <pvPortMalloc+0x174>
 800b356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	60fb      	str	r3, [r7, #12]
 800b368:	bf00      	nop
 800b36a:	e7fe      	b.n	800b36a <pvPortMalloc+0x172>
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	4618      	mov	r0, r3
 800b370:	3728      	adds	r7, #40	; 0x28
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	20004234 	.word	0x20004234
 800b37c:	20004248 	.word	0x20004248
 800b380:	20004238 	.word	0x20004238
 800b384:	2000422c 	.word	0x2000422c
 800b388:	2000423c 	.word	0x2000423c
 800b38c:	20004240 	.word	0x20004240

0800b390 <vPortFree>:
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	617b      	str	r3, [r7, #20]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d04d      	beq.n	800b43e <vPortFree+0xae>
 800b3a2:	2308      	movs	r3, #8
 800b3a4:	425b      	negs	r3, r3
 800b3a6:	697a      	ldr	r2, [r7, #20]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	617b      	str	r3, [r7, #20]
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	613b      	str	r3, [r7, #16]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	4b24      	ldr	r3, [pc, #144]	; (800b448 <vPortFree+0xb8>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10a      	bne.n	800b3d4 <vPortFree+0x44>
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <vPortFree+0x42>
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00a      	beq.n	800b3f2 <vPortFree+0x62>
 800b3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	60bb      	str	r3, [r7, #8]
 800b3ee:	bf00      	nop
 800b3f0:	e7fe      	b.n	800b3f0 <vPortFree+0x60>
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	4b14      	ldr	r3, [pc, #80]	; (800b448 <vPortFree+0xb8>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4013      	ands	r3, r2
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01e      	beq.n	800b43e <vPortFree+0xae>
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d11a      	bne.n	800b43e <vPortFree+0xae>
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	4b0e      	ldr	r3, [pc, #56]	; (800b448 <vPortFree+0xb8>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	43db      	mvns	r3, r3
 800b412:	401a      	ands	r2, r3
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	605a      	str	r2, [r3, #4]
 800b418:	f7fe fee2 	bl	800a1e0 <vTaskSuspendAll>
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	4b0a      	ldr	r3, [pc, #40]	; (800b44c <vPortFree+0xbc>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4413      	add	r3, r2
 800b426:	4a09      	ldr	r2, [pc, #36]	; (800b44c <vPortFree+0xbc>)
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	6938      	ldr	r0, [r7, #16]
 800b42c:	f000 f874 	bl	800b518 <prvInsertBlockIntoFreeList>
 800b430:	4b07      	ldr	r3, [pc, #28]	; (800b450 <vPortFree+0xc0>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3301      	adds	r3, #1
 800b436:	4a06      	ldr	r2, [pc, #24]	; (800b450 <vPortFree+0xc0>)
 800b438:	6013      	str	r3, [r2, #0]
 800b43a:	f7fe fedf 	bl	800a1fc <xTaskResumeAll>
 800b43e:	bf00      	nop
 800b440:	3718      	adds	r7, #24
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	20004248 	.word	0x20004248
 800b44c:	20004238 	.word	0x20004238
 800b450:	20004244 	.word	0x20004244

0800b454 <prvHeapInit>:
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b45e:	60bb      	str	r3, [r7, #8]
 800b460:	4b27      	ldr	r3, [pc, #156]	; (800b500 <prvHeapInit+0xac>)
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00c      	beq.n	800b488 <prvHeapInit+0x34>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3307      	adds	r3, #7
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f023 0307 	bic.w	r3, r3, #7
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	4a1f      	ldr	r2, [pc, #124]	; (800b500 <prvHeapInit+0xac>)
 800b484:	4413      	add	r3, r2
 800b486:	60bb      	str	r3, [r7, #8]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	607b      	str	r3, [r7, #4]
 800b48c:	4a1d      	ldr	r2, [pc, #116]	; (800b504 <prvHeapInit+0xb0>)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6013      	str	r3, [r2, #0]
 800b492:	4b1c      	ldr	r3, [pc, #112]	; (800b504 <prvHeapInit+0xb0>)
 800b494:	2200      	movs	r2, #0
 800b496:	605a      	str	r2, [r3, #4]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	4413      	add	r3, r2
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	2208      	movs	r2, #8
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	1a9b      	subs	r3, r3, r2
 800b4a6:	60fb      	str	r3, [r7, #12]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f023 0307 	bic.w	r3, r3, #7
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	4a15      	ldr	r2, [pc, #84]	; (800b508 <prvHeapInit+0xb4>)
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	4b14      	ldr	r3, [pc, #80]	; (800b508 <prvHeapInit+0xb4>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	605a      	str	r2, [r3, #4]
 800b4be:	4b12      	ldr	r3, [pc, #72]	; (800b508 <prvHeapInit+0xb4>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	603b      	str	r3, [r7, #0]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	1ad2      	subs	r2, r2, r3
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	605a      	str	r2, [r3, #4]
 800b4d4:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <prvHeapInit+0xb4>)
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	4a0a      	ldr	r2, [pc, #40]	; (800b50c <prvHeapInit+0xb8>)
 800b4e2:	6013      	str	r3, [r2, #0]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	4a09      	ldr	r2, [pc, #36]	; (800b510 <prvHeapInit+0xbc>)
 800b4ea:	6013      	str	r3, [r2, #0]
 800b4ec:	4b09      	ldr	r3, [pc, #36]	; (800b514 <prvHeapInit+0xc0>)
 800b4ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	bf00      	nop
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	2000062c 	.word	0x2000062c
 800b504:	2000422c 	.word	0x2000422c
 800b508:	20004234 	.word	0x20004234
 800b50c:	2000423c 	.word	0x2000423c
 800b510:	20004238 	.word	0x20004238
 800b514:	20004248 	.word	0x20004248

0800b518 <prvInsertBlockIntoFreeList>:
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	4b28      	ldr	r3, [pc, #160]	; (800b5c4 <prvInsertBlockIntoFreeList+0xac>)
 800b522:	60fb      	str	r3, [r7, #12]
 800b524:	e002      	b.n	800b52c <prvInsertBlockIntoFreeList+0x14>
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	60fb      	str	r3, [r7, #12]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	429a      	cmp	r2, r3
 800b534:	d8f7      	bhi.n	800b526 <prvInsertBlockIntoFreeList+0xe>
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	60bb      	str	r3, [r7, #8]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	4413      	add	r3, r2
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	429a      	cmp	r2, r3
 800b546:	d108      	bne.n	800b55a <prvInsertBlockIntoFreeList+0x42>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	441a      	add	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	605a      	str	r2, [r3, #4]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	607b      	str	r3, [r7, #4]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	60bb      	str	r3, [r7, #8]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	441a      	add	r2, r3
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d118      	bne.n	800b5a0 <prvInsertBlockIntoFreeList+0x88>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	4b15      	ldr	r3, [pc, #84]	; (800b5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	429a      	cmp	r2, r3
 800b578:	d00d      	beq.n	800b596 <prvInsertBlockIntoFreeList+0x7e>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	685a      	ldr	r2, [r3, #4]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	441a      	add	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	605a      	str	r2, [r3, #4]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	e008      	b.n	800b5a8 <prvInsertBlockIntoFreeList+0x90>
 800b596:	4b0c      	ldr	r3, [pc, #48]	; (800b5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	e003      	b.n	800b5a8 <prvInsertBlockIntoFreeList+0x90>
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d002      	beq.n	800b5b6 <prvInsertBlockIntoFreeList+0x9e>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	601a      	str	r2, [r3, #0]
 800b5b6:	bf00      	nop
 800b5b8:	3714      	adds	r7, #20
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	2000422c 	.word	0x2000422c
 800b5c8:	20004234 	.word	0x20004234

0800b5cc <_ZdlPv>:
 800b5cc:	f001 b8c4 	b.w	800c758 <free>

0800b5d0 <_Znwj>:
 800b5d0:	2801      	cmp	r0, #1
 800b5d2:	bf38      	it	cc
 800b5d4:	2001      	movcc	r0, #1
 800b5d6:	b510      	push	{r4, lr}
 800b5d8:	4604      	mov	r4, r0
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f001 f8b4 	bl	800c748 <malloc>
 800b5e0:	b930      	cbnz	r0, 800b5f0 <_Znwj+0x20>
 800b5e2:	f000 f8c3 	bl	800b76c <_ZSt15get_new_handlerv>
 800b5e6:	b908      	cbnz	r0, 800b5ec <_Znwj+0x1c>
 800b5e8:	f001 f87c 	bl	800c6e4 <abort>
 800b5ec:	4780      	blx	r0
 800b5ee:	e7f4      	b.n	800b5da <_Znwj+0xa>
 800b5f0:	bd10      	pop	{r4, pc}

0800b5f2 <_ZNSaIcEC1Ev>:
 800b5f2:	4770      	bx	lr

0800b5f4 <_ZNSaIcEC1ERKS_>:
 800b5f4:	4770      	bx	lr

0800b5f6 <_ZNSaIcED1Ev>:
 800b5f6:	4770      	bx	lr

0800b5f8 <_ZSt17__throw_bad_allocv>:
 800b5f8:	b508      	push	{r3, lr}
 800b5fa:	f001 f873 	bl	800c6e4 <abort>

0800b5fe <_ZSt19__throw_logic_errorPKc>:
 800b5fe:	b508      	push	{r3, lr}
 800b600:	f001 f870 	bl	800c6e4 <abort>

0800b604 <_ZSt20__throw_length_errorPKc>:
 800b604:	b508      	push	{r3, lr}
 800b606:	f001 f86d 	bl	800c6e4 <abort>

0800b60a <_ZSt24__throw_out_of_range_fmtPKcz>:
 800b60a:	b40f      	push	{r0, r1, r2, r3}
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	f107 0418 	add.w	r4, r7, #24
 800b616:	f854 2b04 	ldr.w	r2, [r4], #4
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	4610      	mov	r0, r2
 800b61e:	f7f4 fdd7 	bl	80001d0 <strlen>
 800b622:	f200 2307 	addw	r3, r0, #519	; 0x207
 800b626:	f023 0307 	bic.w	r3, r3, #7
 800b62a:	ebad 0d03 	sub.w	sp, sp, r3
 800b62e:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	60fc      	str	r4, [r7, #12]
 800b636:	4623      	mov	r3, r4
 800b638:	4668      	mov	r0, sp
 800b63a:	f000 f855 	bl	800b6e8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800b63e:	f001 f851 	bl	800c6e4 <abort>
	...

0800b644 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800b644:	b580      	push	{r7, lr}
 800b646:	b09c      	sub	sp, #112	; 0x70
 800b648:	4606      	mov	r6, r0
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	460c      	mov	r4, r1
 800b64e:	1ba4      	subs	r4, r4, r6
 800b650:	490e      	ldr	r1, [pc, #56]	; (800b68c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800b652:	2269      	movs	r2, #105	; 0x69
 800b654:	1d38      	adds	r0, r7, #4
 800b656:	f001 f887 	bl	800c768 <memcpy>
 800b65a:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800b65e:	f023 0307 	bic.w	r3, r3, #7
 800b662:	ebad 0d03 	sub.w	sp, sp, r3
 800b666:	466d      	mov	r5, sp
 800b668:	2268      	movs	r2, #104	; 0x68
 800b66a:	1d39      	adds	r1, r7, #4
 800b66c:	4628      	mov	r0, r5
 800b66e:	f001 f87b 	bl	800c768 <memcpy>
 800b672:	4622      	mov	r2, r4
 800b674:	4631      	mov	r1, r6
 800b676:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800b67a:	442c      	add	r4, r5
 800b67c:	f001 f874 	bl	800c768 <memcpy>
 800b680:	2300      	movs	r3, #0
 800b682:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800b686:	4628      	mov	r0, r5
 800b688:	f7ff ffb9 	bl	800b5fe <_ZSt19__throw_logic_errorPKc>
 800b68c:	0800cb60 	.word	0x0800cb60

0800b690 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800b690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b694:	af00      	add	r7, sp, #0
 800b696:	b084      	sub	sp, #16
 800b698:	466d      	mov	r5, sp
 800b69a:	f105 040c 	add.w	r4, r5, #12
 800b69e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800b6e4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800b6a2:	4623      	mov	r3, r4
 800b6a4:	f04f 0c0a 	mov.w	ip, #10
 800b6a8:	fbb2 f6fc 	udiv	r6, r2, ip
 800b6ac:	fb0c 2e16 	mls	lr, ip, r6, r2
 800b6b0:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800b6b4:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800b6b8:	4696      	mov	lr, r2
 800b6ba:	f1be 0f09 	cmp.w	lr, #9
 800b6be:	4632      	mov	r2, r6
 800b6c0:	d8f2      	bhi.n	800b6a8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800b6c2:	1ae4      	subs	r4, r4, r3
 800b6c4:	428c      	cmp	r4, r1
 800b6c6:	d809      	bhi.n	800b6dc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800b6c8:	f1c4 010c 	rsb	r1, r4, #12
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	4429      	add	r1, r5
 800b6d0:	f001 f84a 	bl	800c768 <memcpy>
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b6e0:	e7f8      	b.n	800b6d4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800b6e2:	bf00      	nop
 800b6e4:	0800cbc9 	.word	0x0800cbc9

0800b6e8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800b6e8:	3901      	subs	r1, #1
 800b6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ee:	4607      	mov	r7, r0
 800b6f0:	4615      	mov	r5, r2
 800b6f2:	eb00 0801 	add.w	r8, r0, r1
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	782a      	ldrb	r2, [r5, #0]
 800b6fa:	b362      	cbz	r2, 800b756 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800b6fc:	4544      	cmp	r4, r8
 800b6fe:	d22e      	bcs.n	800b75e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800b700:	2a25      	cmp	r2, #37	; 0x25
 800b702:	d107      	bne.n	800b714 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800b704:	786a      	ldrb	r2, [r5, #1]
 800b706:	2a73      	cmp	r2, #115	; 0x73
 800b708:	d009      	beq.n	800b71e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800b70a:	2a7a      	cmp	r2, #122	; 0x7a
 800b70c:	d012      	beq.n	800b734 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800b70e:	2a25      	cmp	r2, #37	; 0x25
 800b710:	d100      	bne.n	800b714 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800b712:	3501      	adds	r5, #1
 800b714:	f815 2b01 	ldrb.w	r2, [r5], #1
 800b718:	f804 2b01 	strb.w	r2, [r4], #1
 800b71c:	e7ec      	b.n	800b6f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800b71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b722:	3a01      	subs	r2, #1
 800b724:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b728:	b1e9      	cbz	r1, 800b766 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 800b72a:	4544      	cmp	r4, r8
 800b72c:	d017      	beq.n	800b75e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800b72e:	f804 1b01 	strb.w	r1, [r4], #1
 800b732:	e7f7      	b.n	800b724 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800b734:	78aa      	ldrb	r2, [r5, #2]
 800b736:	2a75      	cmp	r2, #117	; 0x75
 800b738:	d1ec      	bne.n	800b714 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800b73a:	461e      	mov	r6, r3
 800b73c:	eba8 0104 	sub.w	r1, r8, r4
 800b740:	f856 2b04 	ldr.w	r2, [r6], #4
 800b744:	4620      	mov	r0, r4
 800b746:	f7ff ffa3 	bl	800b690 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	dd07      	ble.n	800b75e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800b74e:	4404      	add	r4, r0
 800b750:	3503      	adds	r5, #3
 800b752:	4633      	mov	r3, r6
 800b754:	e7d0      	b.n	800b6f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800b756:	7022      	strb	r2, [r4, #0]
 800b758:	1be0      	subs	r0, r4, r7
 800b75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b75e:	4621      	mov	r1, r4
 800b760:	4638      	mov	r0, r7
 800b762:	f7ff ff6f 	bl	800b644 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800b766:	3502      	adds	r5, #2
 800b768:	e7c6      	b.n	800b6f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
	...

0800b76c <_ZSt15get_new_handlerv>:
 800b76c:	4b02      	ldr	r3, [pc, #8]	; (800b778 <_ZSt15get_new_handlerv+0xc>)
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	f3bf 8f5b 	dmb	ish
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	2000424c 	.word	0x2000424c

0800b77c <pow>:
 800b77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b780:	ec59 8b10 	vmov	r8, r9, d0
 800b784:	ec57 6b11 	vmov	r6, r7, d1
 800b788:	f000 f8a6 	bl	800b8d8 <__ieee754_pow>
 800b78c:	4b4e      	ldr	r3, [pc, #312]	; (800b8c8 <pow+0x14c>)
 800b78e:	f993 3000 	ldrsb.w	r3, [r3]
 800b792:	3301      	adds	r3, #1
 800b794:	ec55 4b10 	vmov	r4, r5, d0
 800b798:	d015      	beq.n	800b7c6 <pow+0x4a>
 800b79a:	4632      	mov	r2, r6
 800b79c:	463b      	mov	r3, r7
 800b79e:	4630      	mov	r0, r6
 800b7a0:	4639      	mov	r1, r7
 800b7a2:	f7f5 f973 	bl	8000a8c <__aeabi_dcmpun>
 800b7a6:	b970      	cbnz	r0, 800b7c6 <pow+0x4a>
 800b7a8:	4642      	mov	r2, r8
 800b7aa:	464b      	mov	r3, r9
 800b7ac:	4640      	mov	r0, r8
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	f7f5 f96c 	bl	8000a8c <__aeabi_dcmpun>
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	b148      	cbz	r0, 800b7ce <pow+0x52>
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	4639      	mov	r1, r7
 800b7be:	f7f5 f933 	bl	8000a28 <__aeabi_dcmpeq>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d17d      	bne.n	800b8c2 <pow+0x146>
 800b7c6:	ec45 4b10 	vmov	d0, r4, r5
 800b7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ce:	4640      	mov	r0, r8
 800b7d0:	4649      	mov	r1, r9
 800b7d2:	f7f5 f929 	bl	8000a28 <__aeabi_dcmpeq>
 800b7d6:	b1e0      	cbz	r0, 800b812 <pow+0x96>
 800b7d8:	2200      	movs	r2, #0
 800b7da:	2300      	movs	r3, #0
 800b7dc:	4630      	mov	r0, r6
 800b7de:	4639      	mov	r1, r7
 800b7e0:	f7f5 f922 	bl	8000a28 <__aeabi_dcmpeq>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d16c      	bne.n	800b8c2 <pow+0x146>
 800b7e8:	ec47 6b10 	vmov	d0, r6, r7
 800b7ec:	f000 fe53 	bl	800c496 <finite>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d0e8      	beq.n	800b7c6 <pow+0x4a>
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	4639      	mov	r1, r7
 800b7fc:	f7f5 f91e 	bl	8000a3c <__aeabi_dcmplt>
 800b800:	2800      	cmp	r0, #0
 800b802:	d0e0      	beq.n	800b7c6 <pow+0x4a>
 800b804:	f000 ff76 	bl	800c6f4 <__errno>
 800b808:	2321      	movs	r3, #33	; 0x21
 800b80a:	6003      	str	r3, [r0, #0]
 800b80c:	2400      	movs	r4, #0
 800b80e:	4d2f      	ldr	r5, [pc, #188]	; (800b8cc <pow+0x150>)
 800b810:	e7d9      	b.n	800b7c6 <pow+0x4a>
 800b812:	ec45 4b10 	vmov	d0, r4, r5
 800b816:	f000 fe3e 	bl	800c496 <finite>
 800b81a:	bbb8      	cbnz	r0, 800b88c <pow+0x110>
 800b81c:	ec49 8b10 	vmov	d0, r8, r9
 800b820:	f000 fe39 	bl	800c496 <finite>
 800b824:	b390      	cbz	r0, 800b88c <pow+0x110>
 800b826:	ec47 6b10 	vmov	d0, r6, r7
 800b82a:	f000 fe34 	bl	800c496 <finite>
 800b82e:	b368      	cbz	r0, 800b88c <pow+0x110>
 800b830:	4622      	mov	r2, r4
 800b832:	462b      	mov	r3, r5
 800b834:	4620      	mov	r0, r4
 800b836:	4629      	mov	r1, r5
 800b838:	f7f5 f928 	bl	8000a8c <__aeabi_dcmpun>
 800b83c:	b160      	cbz	r0, 800b858 <pow+0xdc>
 800b83e:	f000 ff59 	bl	800c6f4 <__errno>
 800b842:	2321      	movs	r3, #33	; 0x21
 800b844:	6003      	str	r3, [r0, #0]
 800b846:	2200      	movs	r2, #0
 800b848:	2300      	movs	r3, #0
 800b84a:	4610      	mov	r0, r2
 800b84c:	4619      	mov	r1, r3
 800b84e:	f7f4 ffad 	bl	80007ac <__aeabi_ddiv>
 800b852:	4604      	mov	r4, r0
 800b854:	460d      	mov	r5, r1
 800b856:	e7b6      	b.n	800b7c6 <pow+0x4a>
 800b858:	f000 ff4c 	bl	800c6f4 <__errno>
 800b85c:	2322      	movs	r3, #34	; 0x22
 800b85e:	6003      	str	r3, [r0, #0]
 800b860:	2200      	movs	r2, #0
 800b862:	2300      	movs	r3, #0
 800b864:	4640      	mov	r0, r8
 800b866:	4649      	mov	r1, r9
 800b868:	f7f5 f8e8 	bl	8000a3c <__aeabi_dcmplt>
 800b86c:	2400      	movs	r4, #0
 800b86e:	b158      	cbz	r0, 800b888 <pow+0x10c>
 800b870:	ec47 6b10 	vmov	d0, r6, r7
 800b874:	f000 fe24 	bl	800c4c0 <rint>
 800b878:	4632      	mov	r2, r6
 800b87a:	ec51 0b10 	vmov	r0, r1, d0
 800b87e:	463b      	mov	r3, r7
 800b880:	f7f5 f8d2 	bl	8000a28 <__aeabi_dcmpeq>
 800b884:	2800      	cmp	r0, #0
 800b886:	d0c2      	beq.n	800b80e <pow+0x92>
 800b888:	4d11      	ldr	r5, [pc, #68]	; (800b8d0 <pow+0x154>)
 800b88a:	e79c      	b.n	800b7c6 <pow+0x4a>
 800b88c:	2200      	movs	r2, #0
 800b88e:	2300      	movs	r3, #0
 800b890:	4620      	mov	r0, r4
 800b892:	4629      	mov	r1, r5
 800b894:	f7f5 f8c8 	bl	8000a28 <__aeabi_dcmpeq>
 800b898:	2800      	cmp	r0, #0
 800b89a:	d094      	beq.n	800b7c6 <pow+0x4a>
 800b89c:	ec49 8b10 	vmov	d0, r8, r9
 800b8a0:	f000 fdf9 	bl	800c496 <finite>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d08e      	beq.n	800b7c6 <pow+0x4a>
 800b8a8:	ec47 6b10 	vmov	d0, r6, r7
 800b8ac:	f000 fdf3 	bl	800c496 <finite>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d088      	beq.n	800b7c6 <pow+0x4a>
 800b8b4:	f000 ff1e 	bl	800c6f4 <__errno>
 800b8b8:	2322      	movs	r3, #34	; 0x22
 800b8ba:	6003      	str	r3, [r0, #0]
 800b8bc:	2400      	movs	r4, #0
 800b8be:	2500      	movs	r5, #0
 800b8c0:	e781      	b.n	800b7c6 <pow+0x4a>
 800b8c2:	4d04      	ldr	r5, [pc, #16]	; (800b8d4 <pow+0x158>)
 800b8c4:	2400      	movs	r4, #0
 800b8c6:	e77e      	b.n	800b7c6 <pow+0x4a>
 800b8c8:	20000014 	.word	0x20000014
 800b8cc:	fff00000 	.word	0xfff00000
 800b8d0:	7ff00000 	.word	0x7ff00000
 800b8d4:	3ff00000 	.word	0x3ff00000

0800b8d8 <__ieee754_pow>:
 800b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	ed2d 8b06 	vpush	{d8-d10}
 800b8e0:	b08d      	sub	sp, #52	; 0x34
 800b8e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b8e6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b8ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b8ee:	ea56 0100 	orrs.w	r1, r6, r0
 800b8f2:	ec53 2b10 	vmov	r2, r3, d0
 800b8f6:	f000 84d1 	beq.w	800c29c <__ieee754_pow+0x9c4>
 800b8fa:	497f      	ldr	r1, [pc, #508]	; (800baf8 <__ieee754_pow+0x220>)
 800b8fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b900:	428c      	cmp	r4, r1
 800b902:	ee10 8a10 	vmov	r8, s0
 800b906:	4699      	mov	r9, r3
 800b908:	dc09      	bgt.n	800b91e <__ieee754_pow+0x46>
 800b90a:	d103      	bne.n	800b914 <__ieee754_pow+0x3c>
 800b90c:	b97a      	cbnz	r2, 800b92e <__ieee754_pow+0x56>
 800b90e:	42a6      	cmp	r6, r4
 800b910:	dd02      	ble.n	800b918 <__ieee754_pow+0x40>
 800b912:	e00c      	b.n	800b92e <__ieee754_pow+0x56>
 800b914:	428e      	cmp	r6, r1
 800b916:	dc02      	bgt.n	800b91e <__ieee754_pow+0x46>
 800b918:	428e      	cmp	r6, r1
 800b91a:	d110      	bne.n	800b93e <__ieee754_pow+0x66>
 800b91c:	b178      	cbz	r0, 800b93e <__ieee754_pow+0x66>
 800b91e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b922:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b926:	ea54 0308 	orrs.w	r3, r4, r8
 800b92a:	f000 84b7 	beq.w	800c29c <__ieee754_pow+0x9c4>
 800b92e:	4873      	ldr	r0, [pc, #460]	; (800bafc <__ieee754_pow+0x224>)
 800b930:	b00d      	add	sp, #52	; 0x34
 800b932:	ecbd 8b06 	vpop	{d8-d10}
 800b936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93a:	f000 bdb9 	b.w	800c4b0 <nan>
 800b93e:	f1b9 0f00 	cmp.w	r9, #0
 800b942:	da36      	bge.n	800b9b2 <__ieee754_pow+0xda>
 800b944:	496e      	ldr	r1, [pc, #440]	; (800bb00 <__ieee754_pow+0x228>)
 800b946:	428e      	cmp	r6, r1
 800b948:	dc51      	bgt.n	800b9ee <__ieee754_pow+0x116>
 800b94a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b94e:	428e      	cmp	r6, r1
 800b950:	f340 84af 	ble.w	800c2b2 <__ieee754_pow+0x9da>
 800b954:	1531      	asrs	r1, r6, #20
 800b956:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b95a:	2914      	cmp	r1, #20
 800b95c:	dd0f      	ble.n	800b97e <__ieee754_pow+0xa6>
 800b95e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b962:	fa20 fc01 	lsr.w	ip, r0, r1
 800b966:	fa0c f101 	lsl.w	r1, ip, r1
 800b96a:	4281      	cmp	r1, r0
 800b96c:	f040 84a1 	bne.w	800c2b2 <__ieee754_pow+0x9da>
 800b970:	f00c 0c01 	and.w	ip, ip, #1
 800b974:	f1cc 0102 	rsb	r1, ip, #2
 800b978:	9100      	str	r1, [sp, #0]
 800b97a:	b180      	cbz	r0, 800b99e <__ieee754_pow+0xc6>
 800b97c:	e059      	b.n	800ba32 <__ieee754_pow+0x15a>
 800b97e:	2800      	cmp	r0, #0
 800b980:	d155      	bne.n	800ba2e <__ieee754_pow+0x156>
 800b982:	f1c1 0114 	rsb	r1, r1, #20
 800b986:	fa46 fc01 	asr.w	ip, r6, r1
 800b98a:	fa0c f101 	lsl.w	r1, ip, r1
 800b98e:	42b1      	cmp	r1, r6
 800b990:	f040 848c 	bne.w	800c2ac <__ieee754_pow+0x9d4>
 800b994:	f00c 0c01 	and.w	ip, ip, #1
 800b998:	f1cc 0102 	rsb	r1, ip, #2
 800b99c:	9100      	str	r1, [sp, #0]
 800b99e:	4959      	ldr	r1, [pc, #356]	; (800bb04 <__ieee754_pow+0x22c>)
 800b9a0:	428e      	cmp	r6, r1
 800b9a2:	d12d      	bne.n	800ba00 <__ieee754_pow+0x128>
 800b9a4:	2f00      	cmp	r7, #0
 800b9a6:	da79      	bge.n	800ba9c <__ieee754_pow+0x1c4>
 800b9a8:	4956      	ldr	r1, [pc, #344]	; (800bb04 <__ieee754_pow+0x22c>)
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	f7f4 fefe 	bl	80007ac <__aeabi_ddiv>
 800b9b0:	e016      	b.n	800b9e0 <__ieee754_pow+0x108>
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	9100      	str	r1, [sp, #0]
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d13b      	bne.n	800ba32 <__ieee754_pow+0x15a>
 800b9ba:	494f      	ldr	r1, [pc, #316]	; (800baf8 <__ieee754_pow+0x220>)
 800b9bc:	428e      	cmp	r6, r1
 800b9be:	d1ee      	bne.n	800b99e <__ieee754_pow+0xc6>
 800b9c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b9c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b9c8:	ea53 0308 	orrs.w	r3, r3, r8
 800b9cc:	f000 8466 	beq.w	800c29c <__ieee754_pow+0x9c4>
 800b9d0:	4b4d      	ldr	r3, [pc, #308]	; (800bb08 <__ieee754_pow+0x230>)
 800b9d2:	429c      	cmp	r4, r3
 800b9d4:	dd0d      	ble.n	800b9f2 <__ieee754_pow+0x11a>
 800b9d6:	2f00      	cmp	r7, #0
 800b9d8:	f280 8464 	bge.w	800c2a4 <__ieee754_pow+0x9cc>
 800b9dc:	2000      	movs	r0, #0
 800b9de:	2100      	movs	r1, #0
 800b9e0:	ec41 0b10 	vmov	d0, r0, r1
 800b9e4:	b00d      	add	sp, #52	; 0x34
 800b9e6:	ecbd 8b06 	vpop	{d8-d10}
 800b9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ee:	2102      	movs	r1, #2
 800b9f0:	e7e0      	b.n	800b9b4 <__ieee754_pow+0xdc>
 800b9f2:	2f00      	cmp	r7, #0
 800b9f4:	daf2      	bge.n	800b9dc <__ieee754_pow+0x104>
 800b9f6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b9fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9fe:	e7ef      	b.n	800b9e0 <__ieee754_pow+0x108>
 800ba00:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ba04:	d104      	bne.n	800ba10 <__ieee754_pow+0x138>
 800ba06:	4610      	mov	r0, r2
 800ba08:	4619      	mov	r1, r3
 800ba0a:	f7f4 fda5 	bl	8000558 <__aeabi_dmul>
 800ba0e:	e7e7      	b.n	800b9e0 <__ieee754_pow+0x108>
 800ba10:	493e      	ldr	r1, [pc, #248]	; (800bb0c <__ieee754_pow+0x234>)
 800ba12:	428f      	cmp	r7, r1
 800ba14:	d10d      	bne.n	800ba32 <__ieee754_pow+0x15a>
 800ba16:	f1b9 0f00 	cmp.w	r9, #0
 800ba1a:	db0a      	blt.n	800ba32 <__ieee754_pow+0x15a>
 800ba1c:	ec43 2b10 	vmov	d0, r2, r3
 800ba20:	b00d      	add	sp, #52	; 0x34
 800ba22:	ecbd 8b06 	vpop	{d8-d10}
 800ba26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2a:	f000 bc77 	b.w	800c31c <__ieee754_sqrt>
 800ba2e:	2100      	movs	r1, #0
 800ba30:	9100      	str	r1, [sp, #0]
 800ba32:	ec43 2b10 	vmov	d0, r2, r3
 800ba36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba3a:	f000 fd23 	bl	800c484 <fabs>
 800ba3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba42:	ec51 0b10 	vmov	r0, r1, d0
 800ba46:	f1b8 0f00 	cmp.w	r8, #0
 800ba4a:	d12a      	bne.n	800baa2 <__ieee754_pow+0x1ca>
 800ba4c:	b12c      	cbz	r4, 800ba5a <__ieee754_pow+0x182>
 800ba4e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800bb04 <__ieee754_pow+0x22c>
 800ba52:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800ba56:	45e6      	cmp	lr, ip
 800ba58:	d123      	bne.n	800baa2 <__ieee754_pow+0x1ca>
 800ba5a:	2f00      	cmp	r7, #0
 800ba5c:	da05      	bge.n	800ba6a <__ieee754_pow+0x192>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	2000      	movs	r0, #0
 800ba64:	4927      	ldr	r1, [pc, #156]	; (800bb04 <__ieee754_pow+0x22c>)
 800ba66:	f7f4 fea1 	bl	80007ac <__aeabi_ddiv>
 800ba6a:	f1b9 0f00 	cmp.w	r9, #0
 800ba6e:	dab7      	bge.n	800b9e0 <__ieee754_pow+0x108>
 800ba70:	9b00      	ldr	r3, [sp, #0]
 800ba72:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ba76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ba7a:	4323      	orrs	r3, r4
 800ba7c:	d108      	bne.n	800ba90 <__ieee754_pow+0x1b8>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4610      	mov	r0, r2
 800ba84:	4619      	mov	r1, r3
 800ba86:	f7f4 fbaf 	bl	80001e8 <__aeabi_dsub>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	e78d      	b.n	800b9ac <__ieee754_pow+0xd4>
 800ba90:	9b00      	ldr	r3, [sp, #0]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d1a4      	bne.n	800b9e0 <__ieee754_pow+0x108>
 800ba96:	4602      	mov	r2, r0
 800ba98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	4619      	mov	r1, r3
 800baa0:	e79e      	b.n	800b9e0 <__ieee754_pow+0x108>
 800baa2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800baa6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800baaa:	950a      	str	r5, [sp, #40]	; 0x28
 800baac:	9d00      	ldr	r5, [sp, #0]
 800baae:	46ac      	mov	ip, r5
 800bab0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bab2:	ea5c 0505 	orrs.w	r5, ip, r5
 800bab6:	d0e4      	beq.n	800ba82 <__ieee754_pow+0x1aa>
 800bab8:	4b15      	ldr	r3, [pc, #84]	; (800bb10 <__ieee754_pow+0x238>)
 800baba:	429e      	cmp	r6, r3
 800babc:	f340 80fc 	ble.w	800bcb8 <__ieee754_pow+0x3e0>
 800bac0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bac4:	429e      	cmp	r6, r3
 800bac6:	4b10      	ldr	r3, [pc, #64]	; (800bb08 <__ieee754_pow+0x230>)
 800bac8:	dd07      	ble.n	800bada <__ieee754_pow+0x202>
 800baca:	429c      	cmp	r4, r3
 800bacc:	dc0a      	bgt.n	800bae4 <__ieee754_pow+0x20c>
 800bace:	2f00      	cmp	r7, #0
 800bad0:	da84      	bge.n	800b9dc <__ieee754_pow+0x104>
 800bad2:	a307      	add	r3, pc, #28	; (adr r3, 800baf0 <__ieee754_pow+0x218>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	e795      	b.n	800ba06 <__ieee754_pow+0x12e>
 800bada:	429c      	cmp	r4, r3
 800badc:	dbf7      	blt.n	800bace <__ieee754_pow+0x1f6>
 800bade:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <__ieee754_pow+0x22c>)
 800bae0:	429c      	cmp	r4, r3
 800bae2:	dd17      	ble.n	800bb14 <__ieee754_pow+0x23c>
 800bae4:	2f00      	cmp	r7, #0
 800bae6:	dcf4      	bgt.n	800bad2 <__ieee754_pow+0x1fa>
 800bae8:	e778      	b.n	800b9dc <__ieee754_pow+0x104>
 800baea:	bf00      	nop
 800baec:	f3af 8000 	nop.w
 800baf0:	8800759c 	.word	0x8800759c
 800baf4:	7e37e43c 	.word	0x7e37e43c
 800baf8:	7ff00000 	.word	0x7ff00000
 800bafc:	0800cbc8 	.word	0x0800cbc8
 800bb00:	433fffff 	.word	0x433fffff
 800bb04:	3ff00000 	.word	0x3ff00000
 800bb08:	3fefffff 	.word	0x3fefffff
 800bb0c:	3fe00000 	.word	0x3fe00000
 800bb10:	41e00000 	.word	0x41e00000
 800bb14:	4b64      	ldr	r3, [pc, #400]	; (800bca8 <__ieee754_pow+0x3d0>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	f7f4 fb66 	bl	80001e8 <__aeabi_dsub>
 800bb1c:	a356      	add	r3, pc, #344	; (adr r3, 800bc78 <__ieee754_pow+0x3a0>)
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	4604      	mov	r4, r0
 800bb24:	460d      	mov	r5, r1
 800bb26:	f7f4 fd17 	bl	8000558 <__aeabi_dmul>
 800bb2a:	a355      	add	r3, pc, #340	; (adr r3, 800bc80 <__ieee754_pow+0x3a8>)
 800bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb30:	4606      	mov	r6, r0
 800bb32:	460f      	mov	r7, r1
 800bb34:	4620      	mov	r0, r4
 800bb36:	4629      	mov	r1, r5
 800bb38:	f7f4 fd0e 	bl	8000558 <__aeabi_dmul>
 800bb3c:	4b5b      	ldr	r3, [pc, #364]	; (800bcac <__ieee754_pow+0x3d4>)
 800bb3e:	4682      	mov	sl, r0
 800bb40:	468b      	mov	fp, r1
 800bb42:	2200      	movs	r2, #0
 800bb44:	4620      	mov	r0, r4
 800bb46:	4629      	mov	r1, r5
 800bb48:	f7f4 fd06 	bl	8000558 <__aeabi_dmul>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	a14d      	add	r1, pc, #308	; (adr r1, 800bc88 <__ieee754_pow+0x3b0>)
 800bb52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb56:	f7f4 fb47 	bl	80001e8 <__aeabi_dsub>
 800bb5a:	4622      	mov	r2, r4
 800bb5c:	462b      	mov	r3, r5
 800bb5e:	f7f4 fcfb 	bl	8000558 <__aeabi_dmul>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	2000      	movs	r0, #0
 800bb68:	4951      	ldr	r1, [pc, #324]	; (800bcb0 <__ieee754_pow+0x3d8>)
 800bb6a:	f7f4 fb3d 	bl	80001e8 <__aeabi_dsub>
 800bb6e:	4622      	mov	r2, r4
 800bb70:	4680      	mov	r8, r0
 800bb72:	4689      	mov	r9, r1
 800bb74:	462b      	mov	r3, r5
 800bb76:	4620      	mov	r0, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	f7f4 fced 	bl	8000558 <__aeabi_dmul>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	460b      	mov	r3, r1
 800bb82:	4640      	mov	r0, r8
 800bb84:	4649      	mov	r1, r9
 800bb86:	f7f4 fce7 	bl	8000558 <__aeabi_dmul>
 800bb8a:	a341      	add	r3, pc, #260	; (adr r3, 800bc90 <__ieee754_pow+0x3b8>)
 800bb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb90:	f7f4 fce2 	bl	8000558 <__aeabi_dmul>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	4650      	mov	r0, sl
 800bb9a:	4659      	mov	r1, fp
 800bb9c:	f7f4 fb24 	bl	80001e8 <__aeabi_dsub>
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	4680      	mov	r8, r0
 800bba6:	4689      	mov	r9, r1
 800bba8:	4630      	mov	r0, r6
 800bbaa:	4639      	mov	r1, r7
 800bbac:	f7f4 fb1e 	bl	80001ec <__adddf3>
 800bbb0:	2400      	movs	r4, #0
 800bbb2:	4632      	mov	r2, r6
 800bbb4:	463b      	mov	r3, r7
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	460d      	mov	r5, r1
 800bbba:	f7f4 fb15 	bl	80001e8 <__aeabi_dsub>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	f7f4 fb0f 	bl	80001e8 <__aeabi_dsub>
 800bbca:	9b00      	ldr	r3, [sp, #0]
 800bbcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	4682      	mov	sl, r0
 800bbd4:	468b      	mov	fp, r1
 800bbd6:	f040 81f1 	bne.w	800bfbc <__ieee754_pow+0x6e4>
 800bbda:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bc98 <__ieee754_pow+0x3c0>
 800bbde:	eeb0 8a47 	vmov.f32	s16, s14
 800bbe2:	eef0 8a67 	vmov.f32	s17, s15
 800bbe6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bbea:	2600      	movs	r6, #0
 800bbec:	4632      	mov	r2, r6
 800bbee:	463b      	mov	r3, r7
 800bbf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf4:	f7f4 faf8 	bl	80001e8 <__aeabi_dsub>
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	462b      	mov	r3, r5
 800bbfc:	f7f4 fcac 	bl	8000558 <__aeabi_dmul>
 800bc00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc04:	4680      	mov	r8, r0
 800bc06:	4689      	mov	r9, r1
 800bc08:	4650      	mov	r0, sl
 800bc0a:	4659      	mov	r1, fp
 800bc0c:	f7f4 fca4 	bl	8000558 <__aeabi_dmul>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4640      	mov	r0, r8
 800bc16:	4649      	mov	r1, r9
 800bc18:	f7f4 fae8 	bl	80001ec <__adddf3>
 800bc1c:	4632      	mov	r2, r6
 800bc1e:	463b      	mov	r3, r7
 800bc20:	4680      	mov	r8, r0
 800bc22:	4689      	mov	r9, r1
 800bc24:	4620      	mov	r0, r4
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f4 fc96 	bl	8000558 <__aeabi_dmul>
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	4604      	mov	r4, r0
 800bc30:	460d      	mov	r5, r1
 800bc32:	4602      	mov	r2, r0
 800bc34:	4649      	mov	r1, r9
 800bc36:	4640      	mov	r0, r8
 800bc38:	f7f4 fad8 	bl	80001ec <__adddf3>
 800bc3c:	4b1d      	ldr	r3, [pc, #116]	; (800bcb4 <__ieee754_pow+0x3dc>)
 800bc3e:	4299      	cmp	r1, r3
 800bc40:	ec45 4b19 	vmov	d9, r4, r5
 800bc44:	4606      	mov	r6, r0
 800bc46:	460f      	mov	r7, r1
 800bc48:	468b      	mov	fp, r1
 800bc4a:	f340 82fe 	ble.w	800c24a <__ieee754_pow+0x972>
 800bc4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bc52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bc56:	4303      	orrs	r3, r0
 800bc58:	f000 81f0 	beq.w	800c03c <__ieee754_pow+0x764>
 800bc5c:	a310      	add	r3, pc, #64	; (adr r3, 800bca0 <__ieee754_pow+0x3c8>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	ec51 0b18 	vmov	r0, r1, d8
 800bc66:	f7f4 fc77 	bl	8000558 <__aeabi_dmul>
 800bc6a:	a30d      	add	r3, pc, #52	; (adr r3, 800bca0 <__ieee754_pow+0x3c8>)
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	e6cb      	b.n	800ba0a <__ieee754_pow+0x132>
 800bc72:	bf00      	nop
 800bc74:	f3af 8000 	nop.w
 800bc78:	60000000 	.word	0x60000000
 800bc7c:	3ff71547 	.word	0x3ff71547
 800bc80:	f85ddf44 	.word	0xf85ddf44
 800bc84:	3e54ae0b 	.word	0x3e54ae0b
 800bc88:	55555555 	.word	0x55555555
 800bc8c:	3fd55555 	.word	0x3fd55555
 800bc90:	652b82fe 	.word	0x652b82fe
 800bc94:	3ff71547 	.word	0x3ff71547
 800bc98:	00000000 	.word	0x00000000
 800bc9c:	bff00000 	.word	0xbff00000
 800bca0:	8800759c 	.word	0x8800759c
 800bca4:	7e37e43c 	.word	0x7e37e43c
 800bca8:	3ff00000 	.word	0x3ff00000
 800bcac:	3fd00000 	.word	0x3fd00000
 800bcb0:	3fe00000 	.word	0x3fe00000
 800bcb4:	408fffff 	.word	0x408fffff
 800bcb8:	4bd7      	ldr	r3, [pc, #860]	; (800c018 <__ieee754_pow+0x740>)
 800bcba:	ea03 0309 	and.w	r3, r3, r9
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	b92b      	cbnz	r3, 800bcce <__ieee754_pow+0x3f6>
 800bcc2:	4bd6      	ldr	r3, [pc, #856]	; (800c01c <__ieee754_pow+0x744>)
 800bcc4:	f7f4 fc48 	bl	8000558 <__aeabi_dmul>
 800bcc8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bccc:	460c      	mov	r4, r1
 800bcce:	1523      	asrs	r3, r4, #20
 800bcd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bcd4:	4413      	add	r3, r2
 800bcd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd8:	4bd1      	ldr	r3, [pc, #836]	; (800c020 <__ieee754_pow+0x748>)
 800bcda:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bcde:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bce2:	429c      	cmp	r4, r3
 800bce4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bce8:	dd08      	ble.n	800bcfc <__ieee754_pow+0x424>
 800bcea:	4bce      	ldr	r3, [pc, #824]	; (800c024 <__ieee754_pow+0x74c>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	f340 8163 	ble.w	800bfb8 <__ieee754_pow+0x6e0>
 800bcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bcfc:	2400      	movs	r4, #0
 800bcfe:	00e3      	lsls	r3, r4, #3
 800bd00:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd02:	4bc9      	ldr	r3, [pc, #804]	; (800c028 <__ieee754_pow+0x750>)
 800bd04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd08:	ed93 7b00 	vldr	d7, [r3]
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	ec53 2b17 	vmov	r2, r3, d7
 800bd12:	eeb0 8a47 	vmov.f32	s16, s14
 800bd16:	eef0 8a67 	vmov.f32	s17, s15
 800bd1a:	4682      	mov	sl, r0
 800bd1c:	f7f4 fa64 	bl	80001e8 <__aeabi_dsub>
 800bd20:	4652      	mov	r2, sl
 800bd22:	4606      	mov	r6, r0
 800bd24:	460f      	mov	r7, r1
 800bd26:	462b      	mov	r3, r5
 800bd28:	ec51 0b18 	vmov	r0, r1, d8
 800bd2c:	f7f4 fa5e 	bl	80001ec <__adddf3>
 800bd30:	4602      	mov	r2, r0
 800bd32:	460b      	mov	r3, r1
 800bd34:	2000      	movs	r0, #0
 800bd36:	49bd      	ldr	r1, [pc, #756]	; (800c02c <__ieee754_pow+0x754>)
 800bd38:	f7f4 fd38 	bl	80007ac <__aeabi_ddiv>
 800bd3c:	ec41 0b19 	vmov	d9, r0, r1
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4630      	mov	r0, r6
 800bd46:	4639      	mov	r1, r7
 800bd48:	f7f4 fc06 	bl	8000558 <__aeabi_dmul>
 800bd4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9304      	str	r3, [sp, #16]
 800bd5c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bd60:	46ab      	mov	fp, r5
 800bd62:	106d      	asrs	r5, r5, #1
 800bd64:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bd68:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bd6c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bd70:	2200      	movs	r2, #0
 800bd72:	4640      	mov	r0, r8
 800bd74:	4649      	mov	r1, r9
 800bd76:	4614      	mov	r4, r2
 800bd78:	461d      	mov	r5, r3
 800bd7a:	f7f4 fbed 	bl	8000558 <__aeabi_dmul>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4630      	mov	r0, r6
 800bd84:	4639      	mov	r1, r7
 800bd86:	f7f4 fa2f 	bl	80001e8 <__aeabi_dsub>
 800bd8a:	ec53 2b18 	vmov	r2, r3, d8
 800bd8e:	4606      	mov	r6, r0
 800bd90:	460f      	mov	r7, r1
 800bd92:	4620      	mov	r0, r4
 800bd94:	4629      	mov	r1, r5
 800bd96:	f7f4 fa27 	bl	80001e8 <__aeabi_dsub>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	4650      	mov	r0, sl
 800bda0:	4659      	mov	r1, fp
 800bda2:	f7f4 fa21 	bl	80001e8 <__aeabi_dsub>
 800bda6:	4642      	mov	r2, r8
 800bda8:	464b      	mov	r3, r9
 800bdaa:	f7f4 fbd5 	bl	8000558 <__aeabi_dmul>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	4639      	mov	r1, r7
 800bdb6:	f7f4 fa17 	bl	80001e8 <__aeabi_dsub>
 800bdba:	ec53 2b19 	vmov	r2, r3, d9
 800bdbe:	f7f4 fbcb 	bl	8000558 <__aeabi_dmul>
 800bdc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdc6:	ec41 0b18 	vmov	d8, r0, r1
 800bdca:	4610      	mov	r0, r2
 800bdcc:	4619      	mov	r1, r3
 800bdce:	f7f4 fbc3 	bl	8000558 <__aeabi_dmul>
 800bdd2:	a37d      	add	r3, pc, #500	; (adr r3, 800bfc8 <__ieee754_pow+0x6f0>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	4604      	mov	r4, r0
 800bdda:	460d      	mov	r5, r1
 800bddc:	f7f4 fbbc 	bl	8000558 <__aeabi_dmul>
 800bde0:	a37b      	add	r3, pc, #492	; (adr r3, 800bfd0 <__ieee754_pow+0x6f8>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	f7f4 fa01 	bl	80001ec <__adddf3>
 800bdea:	4622      	mov	r2, r4
 800bdec:	462b      	mov	r3, r5
 800bdee:	f7f4 fbb3 	bl	8000558 <__aeabi_dmul>
 800bdf2:	a379      	add	r3, pc, #484	; (adr r3, 800bfd8 <__ieee754_pow+0x700>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f7f4 f9f8 	bl	80001ec <__adddf3>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	462b      	mov	r3, r5
 800be00:	f7f4 fbaa 	bl	8000558 <__aeabi_dmul>
 800be04:	a376      	add	r3, pc, #472	; (adr r3, 800bfe0 <__ieee754_pow+0x708>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	f7f4 f9ef 	bl	80001ec <__adddf3>
 800be0e:	4622      	mov	r2, r4
 800be10:	462b      	mov	r3, r5
 800be12:	f7f4 fba1 	bl	8000558 <__aeabi_dmul>
 800be16:	a374      	add	r3, pc, #464	; (adr r3, 800bfe8 <__ieee754_pow+0x710>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	f7f4 f9e6 	bl	80001ec <__adddf3>
 800be20:	4622      	mov	r2, r4
 800be22:	462b      	mov	r3, r5
 800be24:	f7f4 fb98 	bl	8000558 <__aeabi_dmul>
 800be28:	a371      	add	r3, pc, #452	; (adr r3, 800bff0 <__ieee754_pow+0x718>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	f7f4 f9dd 	bl	80001ec <__adddf3>
 800be32:	4622      	mov	r2, r4
 800be34:	4606      	mov	r6, r0
 800be36:	460f      	mov	r7, r1
 800be38:	462b      	mov	r3, r5
 800be3a:	4620      	mov	r0, r4
 800be3c:	4629      	mov	r1, r5
 800be3e:	f7f4 fb8b 	bl	8000558 <__aeabi_dmul>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4630      	mov	r0, r6
 800be48:	4639      	mov	r1, r7
 800be4a:	f7f4 fb85 	bl	8000558 <__aeabi_dmul>
 800be4e:	4642      	mov	r2, r8
 800be50:	4604      	mov	r4, r0
 800be52:	460d      	mov	r5, r1
 800be54:	464b      	mov	r3, r9
 800be56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be5a:	f7f4 f9c7 	bl	80001ec <__adddf3>
 800be5e:	ec53 2b18 	vmov	r2, r3, d8
 800be62:	f7f4 fb79 	bl	8000558 <__aeabi_dmul>
 800be66:	4622      	mov	r2, r4
 800be68:	462b      	mov	r3, r5
 800be6a:	f7f4 f9bf 	bl	80001ec <__adddf3>
 800be6e:	4642      	mov	r2, r8
 800be70:	4682      	mov	sl, r0
 800be72:	468b      	mov	fp, r1
 800be74:	464b      	mov	r3, r9
 800be76:	4640      	mov	r0, r8
 800be78:	4649      	mov	r1, r9
 800be7a:	f7f4 fb6d 	bl	8000558 <__aeabi_dmul>
 800be7e:	4b6c      	ldr	r3, [pc, #432]	; (800c030 <__ieee754_pow+0x758>)
 800be80:	2200      	movs	r2, #0
 800be82:	4606      	mov	r6, r0
 800be84:	460f      	mov	r7, r1
 800be86:	f7f4 f9b1 	bl	80001ec <__adddf3>
 800be8a:	4652      	mov	r2, sl
 800be8c:	465b      	mov	r3, fp
 800be8e:	f7f4 f9ad 	bl	80001ec <__adddf3>
 800be92:	9c04      	ldr	r4, [sp, #16]
 800be94:	460d      	mov	r5, r1
 800be96:	4622      	mov	r2, r4
 800be98:	460b      	mov	r3, r1
 800be9a:	4640      	mov	r0, r8
 800be9c:	4649      	mov	r1, r9
 800be9e:	f7f4 fb5b 	bl	8000558 <__aeabi_dmul>
 800bea2:	4b63      	ldr	r3, [pc, #396]	; (800c030 <__ieee754_pow+0x758>)
 800bea4:	4680      	mov	r8, r0
 800bea6:	4689      	mov	r9, r1
 800bea8:	2200      	movs	r2, #0
 800beaa:	4620      	mov	r0, r4
 800beac:	4629      	mov	r1, r5
 800beae:	f7f4 f99b 	bl	80001e8 <__aeabi_dsub>
 800beb2:	4632      	mov	r2, r6
 800beb4:	463b      	mov	r3, r7
 800beb6:	f7f4 f997 	bl	80001e8 <__aeabi_dsub>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4650      	mov	r0, sl
 800bec0:	4659      	mov	r1, fp
 800bec2:	f7f4 f991 	bl	80001e8 <__aeabi_dsub>
 800bec6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800beca:	f7f4 fb45 	bl	8000558 <__aeabi_dmul>
 800bece:	4622      	mov	r2, r4
 800bed0:	4606      	mov	r6, r0
 800bed2:	460f      	mov	r7, r1
 800bed4:	462b      	mov	r3, r5
 800bed6:	ec51 0b18 	vmov	r0, r1, d8
 800beda:	f7f4 fb3d 	bl	8000558 <__aeabi_dmul>
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	4630      	mov	r0, r6
 800bee4:	4639      	mov	r1, r7
 800bee6:	f7f4 f981 	bl	80001ec <__adddf3>
 800beea:	4606      	mov	r6, r0
 800beec:	460f      	mov	r7, r1
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	4640      	mov	r0, r8
 800bef4:	4649      	mov	r1, r9
 800bef6:	f7f4 f979 	bl	80001ec <__adddf3>
 800befa:	9c04      	ldr	r4, [sp, #16]
 800befc:	a33e      	add	r3, pc, #248	; (adr r3, 800bff8 <__ieee754_pow+0x720>)
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	4620      	mov	r0, r4
 800bf04:	460d      	mov	r5, r1
 800bf06:	f7f4 fb27 	bl	8000558 <__aeabi_dmul>
 800bf0a:	4642      	mov	r2, r8
 800bf0c:	ec41 0b18 	vmov	d8, r0, r1
 800bf10:	464b      	mov	r3, r9
 800bf12:	4620      	mov	r0, r4
 800bf14:	4629      	mov	r1, r5
 800bf16:	f7f4 f967 	bl	80001e8 <__aeabi_dsub>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	4630      	mov	r0, r6
 800bf20:	4639      	mov	r1, r7
 800bf22:	f7f4 f961 	bl	80001e8 <__aeabi_dsub>
 800bf26:	a336      	add	r3, pc, #216	; (adr r3, 800c000 <__ieee754_pow+0x728>)
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	f7f4 fb14 	bl	8000558 <__aeabi_dmul>
 800bf30:	a335      	add	r3, pc, #212	; (adr r3, 800c008 <__ieee754_pow+0x730>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	4606      	mov	r6, r0
 800bf38:	460f      	mov	r7, r1
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	f7f4 fb0b 	bl	8000558 <__aeabi_dmul>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4630      	mov	r0, r6
 800bf48:	4639      	mov	r1, r7
 800bf4a:	f7f4 f94f 	bl	80001ec <__adddf3>
 800bf4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf50:	4b38      	ldr	r3, [pc, #224]	; (800c034 <__ieee754_pow+0x75c>)
 800bf52:	4413      	add	r3, r2
 800bf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf58:	f7f4 f948 	bl	80001ec <__adddf3>
 800bf5c:	4682      	mov	sl, r0
 800bf5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf60:	468b      	mov	fp, r1
 800bf62:	f7f4 fa8f 	bl	8000484 <__aeabi_i2d>
 800bf66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf68:	4b33      	ldr	r3, [pc, #204]	; (800c038 <__ieee754_pow+0x760>)
 800bf6a:	4413      	add	r3, r2
 800bf6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf70:	4606      	mov	r6, r0
 800bf72:	460f      	mov	r7, r1
 800bf74:	4652      	mov	r2, sl
 800bf76:	465b      	mov	r3, fp
 800bf78:	ec51 0b18 	vmov	r0, r1, d8
 800bf7c:	f7f4 f936 	bl	80001ec <__adddf3>
 800bf80:	4642      	mov	r2, r8
 800bf82:	464b      	mov	r3, r9
 800bf84:	f7f4 f932 	bl	80001ec <__adddf3>
 800bf88:	4632      	mov	r2, r6
 800bf8a:	463b      	mov	r3, r7
 800bf8c:	f7f4 f92e 	bl	80001ec <__adddf3>
 800bf90:	9c04      	ldr	r4, [sp, #16]
 800bf92:	4632      	mov	r2, r6
 800bf94:	463b      	mov	r3, r7
 800bf96:	4620      	mov	r0, r4
 800bf98:	460d      	mov	r5, r1
 800bf9a:	f7f4 f925 	bl	80001e8 <__aeabi_dsub>
 800bf9e:	4642      	mov	r2, r8
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	f7f4 f921 	bl	80001e8 <__aeabi_dsub>
 800bfa6:	ec53 2b18 	vmov	r2, r3, d8
 800bfaa:	f7f4 f91d 	bl	80001e8 <__aeabi_dsub>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4650      	mov	r0, sl
 800bfb4:	4659      	mov	r1, fp
 800bfb6:	e606      	b.n	800bbc6 <__ieee754_pow+0x2ee>
 800bfb8:	2401      	movs	r4, #1
 800bfba:	e6a0      	b.n	800bcfe <__ieee754_pow+0x426>
 800bfbc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c010 <__ieee754_pow+0x738>
 800bfc0:	e60d      	b.n	800bbde <__ieee754_pow+0x306>
 800bfc2:	bf00      	nop
 800bfc4:	f3af 8000 	nop.w
 800bfc8:	4a454eef 	.word	0x4a454eef
 800bfcc:	3fca7e28 	.word	0x3fca7e28
 800bfd0:	93c9db65 	.word	0x93c9db65
 800bfd4:	3fcd864a 	.word	0x3fcd864a
 800bfd8:	a91d4101 	.word	0xa91d4101
 800bfdc:	3fd17460 	.word	0x3fd17460
 800bfe0:	518f264d 	.word	0x518f264d
 800bfe4:	3fd55555 	.word	0x3fd55555
 800bfe8:	db6fabff 	.word	0xdb6fabff
 800bfec:	3fdb6db6 	.word	0x3fdb6db6
 800bff0:	33333303 	.word	0x33333303
 800bff4:	3fe33333 	.word	0x3fe33333
 800bff8:	e0000000 	.word	0xe0000000
 800bffc:	3feec709 	.word	0x3feec709
 800c000:	dc3a03fd 	.word	0xdc3a03fd
 800c004:	3feec709 	.word	0x3feec709
 800c008:	145b01f5 	.word	0x145b01f5
 800c00c:	be3e2fe0 	.word	0xbe3e2fe0
 800c010:	00000000 	.word	0x00000000
 800c014:	3ff00000 	.word	0x3ff00000
 800c018:	7ff00000 	.word	0x7ff00000
 800c01c:	43400000 	.word	0x43400000
 800c020:	0003988e 	.word	0x0003988e
 800c024:	000bb679 	.word	0x000bb679
 800c028:	0800cbd8 	.word	0x0800cbd8
 800c02c:	3ff00000 	.word	0x3ff00000
 800c030:	40080000 	.word	0x40080000
 800c034:	0800cbf8 	.word	0x0800cbf8
 800c038:	0800cbe8 	.word	0x0800cbe8
 800c03c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c314 <__ieee754_pow+0xa3c>)
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	4640      	mov	r0, r8
 800c044:	4649      	mov	r1, r9
 800c046:	f7f4 f8d1 	bl	80001ec <__adddf3>
 800c04a:	4622      	mov	r2, r4
 800c04c:	ec41 0b1a 	vmov	d10, r0, r1
 800c050:	462b      	mov	r3, r5
 800c052:	4630      	mov	r0, r6
 800c054:	4639      	mov	r1, r7
 800c056:	f7f4 f8c7 	bl	80001e8 <__aeabi_dsub>
 800c05a:	4602      	mov	r2, r0
 800c05c:	460b      	mov	r3, r1
 800c05e:	ec51 0b1a 	vmov	r0, r1, d10
 800c062:	f7f4 fd09 	bl	8000a78 <__aeabi_dcmpgt>
 800c066:	2800      	cmp	r0, #0
 800c068:	f47f adf8 	bne.w	800bc5c <__ieee754_pow+0x384>
 800c06c:	4aa4      	ldr	r2, [pc, #656]	; (800c300 <__ieee754_pow+0xa28>)
 800c06e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c072:	4293      	cmp	r3, r2
 800c074:	f340 810b 	ble.w	800c28e <__ieee754_pow+0x9b6>
 800c078:	151b      	asrs	r3, r3, #20
 800c07a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c07e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c082:	fa4a f303 	asr.w	r3, sl, r3
 800c086:	445b      	add	r3, fp
 800c088:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c08c:	4e9d      	ldr	r6, [pc, #628]	; (800c304 <__ieee754_pow+0xa2c>)
 800c08e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c092:	4116      	asrs	r6, r2
 800c094:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c098:	2000      	movs	r0, #0
 800c09a:	ea23 0106 	bic.w	r1, r3, r6
 800c09e:	f1c2 0214 	rsb	r2, r2, #20
 800c0a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c0a6:	fa4a fa02 	asr.w	sl, sl, r2
 800c0aa:	f1bb 0f00 	cmp.w	fp, #0
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	bfb8      	it	lt
 800c0b8:	f1ca 0a00 	rsblt	sl, sl, #0
 800c0bc:	f7f4 f894 	bl	80001e8 <__aeabi_dsub>
 800c0c0:	ec41 0b19 	vmov	d9, r0, r1
 800c0c4:	4642      	mov	r2, r8
 800c0c6:	464b      	mov	r3, r9
 800c0c8:	ec51 0b19 	vmov	r0, r1, d9
 800c0cc:	f7f4 f88e 	bl	80001ec <__adddf3>
 800c0d0:	2400      	movs	r4, #0
 800c0d2:	a379      	add	r3, pc, #484	; (adr r3, 800c2b8 <__ieee754_pow+0x9e0>)
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	4620      	mov	r0, r4
 800c0da:	460d      	mov	r5, r1
 800c0dc:	f7f4 fa3c 	bl	8000558 <__aeabi_dmul>
 800c0e0:	ec53 2b19 	vmov	r2, r3, d9
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	460f      	mov	r7, r1
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	f7f4 f87c 	bl	80001e8 <__aeabi_dsub>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4640      	mov	r0, r8
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	f7f4 f876 	bl	80001e8 <__aeabi_dsub>
 800c0fc:	a370      	add	r3, pc, #448	; (adr r3, 800c2c0 <__ieee754_pow+0x9e8>)
 800c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c102:	f7f4 fa29 	bl	8000558 <__aeabi_dmul>
 800c106:	a370      	add	r3, pc, #448	; (adr r3, 800c2c8 <__ieee754_pow+0x9f0>)
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	4680      	mov	r8, r0
 800c10e:	4689      	mov	r9, r1
 800c110:	4620      	mov	r0, r4
 800c112:	4629      	mov	r1, r5
 800c114:	f7f4 fa20 	bl	8000558 <__aeabi_dmul>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4640      	mov	r0, r8
 800c11e:	4649      	mov	r1, r9
 800c120:	f7f4 f864 	bl	80001ec <__adddf3>
 800c124:	4604      	mov	r4, r0
 800c126:	460d      	mov	r5, r1
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	4630      	mov	r0, r6
 800c12e:	4639      	mov	r1, r7
 800c130:	f7f4 f85c 	bl	80001ec <__adddf3>
 800c134:	4632      	mov	r2, r6
 800c136:	463b      	mov	r3, r7
 800c138:	4680      	mov	r8, r0
 800c13a:	4689      	mov	r9, r1
 800c13c:	f7f4 f854 	bl	80001e8 <__aeabi_dsub>
 800c140:	4602      	mov	r2, r0
 800c142:	460b      	mov	r3, r1
 800c144:	4620      	mov	r0, r4
 800c146:	4629      	mov	r1, r5
 800c148:	f7f4 f84e 	bl	80001e8 <__aeabi_dsub>
 800c14c:	4642      	mov	r2, r8
 800c14e:	4606      	mov	r6, r0
 800c150:	460f      	mov	r7, r1
 800c152:	464b      	mov	r3, r9
 800c154:	4640      	mov	r0, r8
 800c156:	4649      	mov	r1, r9
 800c158:	f7f4 f9fe 	bl	8000558 <__aeabi_dmul>
 800c15c:	a35c      	add	r3, pc, #368	; (adr r3, 800c2d0 <__ieee754_pow+0x9f8>)
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	4604      	mov	r4, r0
 800c164:	460d      	mov	r5, r1
 800c166:	f7f4 f9f7 	bl	8000558 <__aeabi_dmul>
 800c16a:	a35b      	add	r3, pc, #364	; (adr r3, 800c2d8 <__ieee754_pow+0xa00>)
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	f7f4 f83a 	bl	80001e8 <__aeabi_dsub>
 800c174:	4622      	mov	r2, r4
 800c176:	462b      	mov	r3, r5
 800c178:	f7f4 f9ee 	bl	8000558 <__aeabi_dmul>
 800c17c:	a358      	add	r3, pc, #352	; (adr r3, 800c2e0 <__ieee754_pow+0xa08>)
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	f7f4 f833 	bl	80001ec <__adddf3>
 800c186:	4622      	mov	r2, r4
 800c188:	462b      	mov	r3, r5
 800c18a:	f7f4 f9e5 	bl	8000558 <__aeabi_dmul>
 800c18e:	a356      	add	r3, pc, #344	; (adr r3, 800c2e8 <__ieee754_pow+0xa10>)
 800c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c194:	f7f4 f828 	bl	80001e8 <__aeabi_dsub>
 800c198:	4622      	mov	r2, r4
 800c19a:	462b      	mov	r3, r5
 800c19c:	f7f4 f9dc 	bl	8000558 <__aeabi_dmul>
 800c1a0:	a353      	add	r3, pc, #332	; (adr r3, 800c2f0 <__ieee754_pow+0xa18>)
 800c1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a6:	f7f4 f821 	bl	80001ec <__adddf3>
 800c1aa:	4622      	mov	r2, r4
 800c1ac:	462b      	mov	r3, r5
 800c1ae:	f7f4 f9d3 	bl	8000558 <__aeabi_dmul>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4640      	mov	r0, r8
 800c1b8:	4649      	mov	r1, r9
 800c1ba:	f7f4 f815 	bl	80001e8 <__aeabi_dsub>
 800c1be:	4604      	mov	r4, r0
 800c1c0:	460d      	mov	r5, r1
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	4649      	mov	r1, r9
 800c1ca:	f7f4 f9c5 	bl	8000558 <__aeabi_dmul>
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	ec41 0b19 	vmov	d9, r0, r1
 800c1d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4629      	mov	r1, r5
 800c1dc:	f7f4 f804 	bl	80001e8 <__aeabi_dsub>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	ec51 0b19 	vmov	r0, r1, d9
 800c1e8:	f7f4 fae0 	bl	80007ac <__aeabi_ddiv>
 800c1ec:	4632      	mov	r2, r6
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	460d      	mov	r5, r1
 800c1f2:	463b      	mov	r3, r7
 800c1f4:	4640      	mov	r0, r8
 800c1f6:	4649      	mov	r1, r9
 800c1f8:	f7f4 f9ae 	bl	8000558 <__aeabi_dmul>
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	463b      	mov	r3, r7
 800c200:	f7f3 fff4 	bl	80001ec <__adddf3>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4620      	mov	r0, r4
 800c20a:	4629      	mov	r1, r5
 800c20c:	f7f3 ffec 	bl	80001e8 <__aeabi_dsub>
 800c210:	4642      	mov	r2, r8
 800c212:	464b      	mov	r3, r9
 800c214:	f7f3 ffe8 	bl	80001e8 <__aeabi_dsub>
 800c218:	460b      	mov	r3, r1
 800c21a:	4602      	mov	r2, r0
 800c21c:	493a      	ldr	r1, [pc, #232]	; (800c308 <__ieee754_pow+0xa30>)
 800c21e:	2000      	movs	r0, #0
 800c220:	f7f3 ffe2 	bl	80001e8 <__aeabi_dsub>
 800c224:	e9cd 0100 	strd	r0, r1, [sp]
 800c228:	9b01      	ldr	r3, [sp, #4]
 800c22a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c22e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c232:	da2f      	bge.n	800c294 <__ieee754_pow+0x9bc>
 800c234:	4650      	mov	r0, sl
 800c236:	ed9d 0b00 	vldr	d0, [sp]
 800c23a:	f000 f9cd 	bl	800c5d8 <scalbn>
 800c23e:	ec51 0b10 	vmov	r0, r1, d0
 800c242:	ec53 2b18 	vmov	r2, r3, d8
 800c246:	f7ff bbe0 	b.w	800ba0a <__ieee754_pow+0x132>
 800c24a:	4b30      	ldr	r3, [pc, #192]	; (800c30c <__ieee754_pow+0xa34>)
 800c24c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c250:	429e      	cmp	r6, r3
 800c252:	f77f af0b 	ble.w	800c06c <__ieee754_pow+0x794>
 800c256:	4b2e      	ldr	r3, [pc, #184]	; (800c310 <__ieee754_pow+0xa38>)
 800c258:	440b      	add	r3, r1
 800c25a:	4303      	orrs	r3, r0
 800c25c:	d00b      	beq.n	800c276 <__ieee754_pow+0x99e>
 800c25e:	a326      	add	r3, pc, #152	; (adr r3, 800c2f8 <__ieee754_pow+0xa20>)
 800c260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c264:	ec51 0b18 	vmov	r0, r1, d8
 800c268:	f7f4 f976 	bl	8000558 <__aeabi_dmul>
 800c26c:	a322      	add	r3, pc, #136	; (adr r3, 800c2f8 <__ieee754_pow+0xa20>)
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	f7ff bbca 	b.w	800ba0a <__ieee754_pow+0x132>
 800c276:	4622      	mov	r2, r4
 800c278:	462b      	mov	r3, r5
 800c27a:	f7f3 ffb5 	bl	80001e8 <__aeabi_dsub>
 800c27e:	4642      	mov	r2, r8
 800c280:	464b      	mov	r3, r9
 800c282:	f7f4 fbef 	bl	8000a64 <__aeabi_dcmpge>
 800c286:	2800      	cmp	r0, #0
 800c288:	f43f aef0 	beq.w	800c06c <__ieee754_pow+0x794>
 800c28c:	e7e7      	b.n	800c25e <__ieee754_pow+0x986>
 800c28e:	f04f 0a00 	mov.w	sl, #0
 800c292:	e717      	b.n	800c0c4 <__ieee754_pow+0x7ec>
 800c294:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c298:	4619      	mov	r1, r3
 800c29a:	e7d2      	b.n	800c242 <__ieee754_pow+0x96a>
 800c29c:	491a      	ldr	r1, [pc, #104]	; (800c308 <__ieee754_pow+0xa30>)
 800c29e:	2000      	movs	r0, #0
 800c2a0:	f7ff bb9e 	b.w	800b9e0 <__ieee754_pow+0x108>
 800c2a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2a8:	f7ff bb9a 	b.w	800b9e0 <__ieee754_pow+0x108>
 800c2ac:	9000      	str	r0, [sp, #0]
 800c2ae:	f7ff bb76 	b.w	800b99e <__ieee754_pow+0xc6>
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	f7ff bb60 	b.w	800b978 <__ieee754_pow+0xa0>
 800c2b8:	00000000 	.word	0x00000000
 800c2bc:	3fe62e43 	.word	0x3fe62e43
 800c2c0:	fefa39ef 	.word	0xfefa39ef
 800c2c4:	3fe62e42 	.word	0x3fe62e42
 800c2c8:	0ca86c39 	.word	0x0ca86c39
 800c2cc:	be205c61 	.word	0xbe205c61
 800c2d0:	72bea4d0 	.word	0x72bea4d0
 800c2d4:	3e663769 	.word	0x3e663769
 800c2d8:	c5d26bf1 	.word	0xc5d26bf1
 800c2dc:	3ebbbd41 	.word	0x3ebbbd41
 800c2e0:	af25de2c 	.word	0xaf25de2c
 800c2e4:	3f11566a 	.word	0x3f11566a
 800c2e8:	16bebd93 	.word	0x16bebd93
 800c2ec:	3f66c16c 	.word	0x3f66c16c
 800c2f0:	5555553e 	.word	0x5555553e
 800c2f4:	3fc55555 	.word	0x3fc55555
 800c2f8:	c2f8f359 	.word	0xc2f8f359
 800c2fc:	01a56e1f 	.word	0x01a56e1f
 800c300:	3fe00000 	.word	0x3fe00000
 800c304:	000fffff 	.word	0x000fffff
 800c308:	3ff00000 	.word	0x3ff00000
 800c30c:	4090cbff 	.word	0x4090cbff
 800c310:	3f6f3400 	.word	0x3f6f3400
 800c314:	652b82fe 	.word	0x652b82fe
 800c318:	3c971547 	.word	0x3c971547

0800c31c <__ieee754_sqrt>:
 800c31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c320:	ec55 4b10 	vmov	r4, r5, d0
 800c324:	4e56      	ldr	r6, [pc, #344]	; (800c480 <__ieee754_sqrt+0x164>)
 800c326:	43ae      	bics	r6, r5
 800c328:	ee10 0a10 	vmov	r0, s0
 800c32c:	ee10 3a10 	vmov	r3, s0
 800c330:	4629      	mov	r1, r5
 800c332:	462a      	mov	r2, r5
 800c334:	d110      	bne.n	800c358 <__ieee754_sqrt+0x3c>
 800c336:	ee10 2a10 	vmov	r2, s0
 800c33a:	462b      	mov	r3, r5
 800c33c:	f7f4 f90c 	bl	8000558 <__aeabi_dmul>
 800c340:	4602      	mov	r2, r0
 800c342:	460b      	mov	r3, r1
 800c344:	4620      	mov	r0, r4
 800c346:	4629      	mov	r1, r5
 800c348:	f7f3 ff50 	bl	80001ec <__adddf3>
 800c34c:	4604      	mov	r4, r0
 800c34e:	460d      	mov	r5, r1
 800c350:	ec45 4b10 	vmov	d0, r4, r5
 800c354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c358:	2d00      	cmp	r5, #0
 800c35a:	dc10      	bgt.n	800c37e <__ieee754_sqrt+0x62>
 800c35c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c360:	4330      	orrs	r0, r6
 800c362:	d0f5      	beq.n	800c350 <__ieee754_sqrt+0x34>
 800c364:	b15d      	cbz	r5, 800c37e <__ieee754_sqrt+0x62>
 800c366:	ee10 2a10 	vmov	r2, s0
 800c36a:	462b      	mov	r3, r5
 800c36c:	ee10 0a10 	vmov	r0, s0
 800c370:	f7f3 ff3a 	bl	80001e8 <__aeabi_dsub>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	f7f4 fa18 	bl	80007ac <__aeabi_ddiv>
 800c37c:	e7e6      	b.n	800c34c <__ieee754_sqrt+0x30>
 800c37e:	1509      	asrs	r1, r1, #20
 800c380:	d076      	beq.n	800c470 <__ieee754_sqrt+0x154>
 800c382:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c386:	07ce      	lsls	r6, r1, #31
 800c388:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c38c:	bf5e      	ittt	pl
 800c38e:	0fda      	lsrpl	r2, r3, #31
 800c390:	005b      	lslpl	r3, r3, #1
 800c392:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c396:	0fda      	lsrs	r2, r3, #31
 800c398:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c39c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	106d      	asrs	r5, r5, #1
 800c3a4:	005b      	lsls	r3, r3, #1
 800c3a6:	f04f 0e16 	mov.w	lr, #22
 800c3aa:	4684      	mov	ip, r0
 800c3ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3b0:	eb0c 0401 	add.w	r4, ip, r1
 800c3b4:	4294      	cmp	r4, r2
 800c3b6:	bfde      	ittt	le
 800c3b8:	1b12      	suble	r2, r2, r4
 800c3ba:	eb04 0c01 	addle.w	ip, r4, r1
 800c3be:	1840      	addle	r0, r0, r1
 800c3c0:	0052      	lsls	r2, r2, #1
 800c3c2:	f1be 0e01 	subs.w	lr, lr, #1
 800c3c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c3ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c3ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c3d2:	d1ed      	bne.n	800c3b0 <__ieee754_sqrt+0x94>
 800c3d4:	4671      	mov	r1, lr
 800c3d6:	2720      	movs	r7, #32
 800c3d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c3dc:	4562      	cmp	r2, ip
 800c3de:	eb04 060e 	add.w	r6, r4, lr
 800c3e2:	dc02      	bgt.n	800c3ea <__ieee754_sqrt+0xce>
 800c3e4:	d113      	bne.n	800c40e <__ieee754_sqrt+0xf2>
 800c3e6:	429e      	cmp	r6, r3
 800c3e8:	d811      	bhi.n	800c40e <__ieee754_sqrt+0xf2>
 800c3ea:	2e00      	cmp	r6, #0
 800c3ec:	eb06 0e04 	add.w	lr, r6, r4
 800c3f0:	da43      	bge.n	800c47a <__ieee754_sqrt+0x15e>
 800c3f2:	f1be 0f00 	cmp.w	lr, #0
 800c3f6:	db40      	blt.n	800c47a <__ieee754_sqrt+0x15e>
 800c3f8:	f10c 0801 	add.w	r8, ip, #1
 800c3fc:	eba2 020c 	sub.w	r2, r2, ip
 800c400:	429e      	cmp	r6, r3
 800c402:	bf88      	it	hi
 800c404:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800c408:	1b9b      	subs	r3, r3, r6
 800c40a:	4421      	add	r1, r4
 800c40c:	46c4      	mov	ip, r8
 800c40e:	0052      	lsls	r2, r2, #1
 800c410:	3f01      	subs	r7, #1
 800c412:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c416:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c41a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c41e:	d1dd      	bne.n	800c3dc <__ieee754_sqrt+0xc0>
 800c420:	4313      	orrs	r3, r2
 800c422:	d006      	beq.n	800c432 <__ieee754_sqrt+0x116>
 800c424:	1c4c      	adds	r4, r1, #1
 800c426:	bf13      	iteet	ne
 800c428:	3101      	addne	r1, #1
 800c42a:	3001      	addeq	r0, #1
 800c42c:	4639      	moveq	r1, r7
 800c42e:	f021 0101 	bicne.w	r1, r1, #1
 800c432:	1043      	asrs	r3, r0, #1
 800c434:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c438:	0849      	lsrs	r1, r1, #1
 800c43a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c43e:	07c2      	lsls	r2, r0, #31
 800c440:	bf48      	it	mi
 800c442:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c446:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c44a:	460c      	mov	r4, r1
 800c44c:	463d      	mov	r5, r7
 800c44e:	e77f      	b.n	800c350 <__ieee754_sqrt+0x34>
 800c450:	0ada      	lsrs	r2, r3, #11
 800c452:	3815      	subs	r0, #21
 800c454:	055b      	lsls	r3, r3, #21
 800c456:	2a00      	cmp	r2, #0
 800c458:	d0fa      	beq.n	800c450 <__ieee754_sqrt+0x134>
 800c45a:	02d7      	lsls	r7, r2, #11
 800c45c:	d50a      	bpl.n	800c474 <__ieee754_sqrt+0x158>
 800c45e:	f1c1 0420 	rsb	r4, r1, #32
 800c462:	fa23 f404 	lsr.w	r4, r3, r4
 800c466:	1e4d      	subs	r5, r1, #1
 800c468:	408b      	lsls	r3, r1
 800c46a:	4322      	orrs	r2, r4
 800c46c:	1b41      	subs	r1, r0, r5
 800c46e:	e788      	b.n	800c382 <__ieee754_sqrt+0x66>
 800c470:	4608      	mov	r0, r1
 800c472:	e7f0      	b.n	800c456 <__ieee754_sqrt+0x13a>
 800c474:	0052      	lsls	r2, r2, #1
 800c476:	3101      	adds	r1, #1
 800c478:	e7ef      	b.n	800c45a <__ieee754_sqrt+0x13e>
 800c47a:	46e0      	mov	r8, ip
 800c47c:	e7be      	b.n	800c3fc <__ieee754_sqrt+0xe0>
 800c47e:	bf00      	nop
 800c480:	7ff00000 	.word	0x7ff00000

0800c484 <fabs>:
 800c484:	ec51 0b10 	vmov	r0, r1, d0
 800c488:	ee10 2a10 	vmov	r2, s0
 800c48c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c490:	ec43 2b10 	vmov	d0, r2, r3
 800c494:	4770      	bx	lr

0800c496 <finite>:
 800c496:	b082      	sub	sp, #8
 800c498:	ed8d 0b00 	vstr	d0, [sp]
 800c49c:	9801      	ldr	r0, [sp, #4]
 800c49e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c4a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c4a6:	0fc0      	lsrs	r0, r0, #31
 800c4a8:	b002      	add	sp, #8
 800c4aa:	4770      	bx	lr
 800c4ac:	0000      	movs	r0, r0
	...

0800c4b0 <nan>:
 800c4b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c4b8 <nan+0x8>
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	00000000 	.word	0x00000000
 800c4bc:	7ff80000 	.word	0x7ff80000

0800c4c0 <rint>:
 800c4c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4c2:	ec51 0b10 	vmov	r0, r1, d0
 800c4c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4ca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c4ce:	2e13      	cmp	r6, #19
 800c4d0:	ee10 4a10 	vmov	r4, s0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c4da:	dc58      	bgt.n	800c58e <rint+0xce>
 800c4dc:	2e00      	cmp	r6, #0
 800c4de:	da2b      	bge.n	800c538 <rint+0x78>
 800c4e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c4e4:	4302      	orrs	r2, r0
 800c4e6:	d023      	beq.n	800c530 <rint+0x70>
 800c4e8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c4ec:	4302      	orrs	r2, r0
 800c4ee:	4254      	negs	r4, r2
 800c4f0:	4314      	orrs	r4, r2
 800c4f2:	0c4b      	lsrs	r3, r1, #17
 800c4f4:	0b24      	lsrs	r4, r4, #12
 800c4f6:	045b      	lsls	r3, r3, #17
 800c4f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c4fc:	ea44 0103 	orr.w	r1, r4, r3
 800c500:	4b32      	ldr	r3, [pc, #200]	; (800c5cc <rint+0x10c>)
 800c502:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c506:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	4630      	mov	r0, r6
 800c510:	4639      	mov	r1, r7
 800c512:	f7f3 fe6b 	bl	80001ec <__adddf3>
 800c516:	e9cd 0100 	strd	r0, r1, [sp]
 800c51a:	463b      	mov	r3, r7
 800c51c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c520:	4632      	mov	r2, r6
 800c522:	f7f3 fe61 	bl	80001e8 <__aeabi_dsub>
 800c526:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c52a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c52e:	4639      	mov	r1, r7
 800c530:	ec41 0b10 	vmov	d0, r0, r1
 800c534:	b003      	add	sp, #12
 800c536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c538:	4a25      	ldr	r2, [pc, #148]	; (800c5d0 <rint+0x110>)
 800c53a:	4132      	asrs	r2, r6
 800c53c:	ea01 0702 	and.w	r7, r1, r2
 800c540:	4307      	orrs	r7, r0
 800c542:	d0f5      	beq.n	800c530 <rint+0x70>
 800c544:	0851      	lsrs	r1, r2, #1
 800c546:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c54a:	4314      	orrs	r4, r2
 800c54c:	d00c      	beq.n	800c568 <rint+0xa8>
 800c54e:	ea23 0201 	bic.w	r2, r3, r1
 800c552:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c556:	2e13      	cmp	r6, #19
 800c558:	fa43 f606 	asr.w	r6, r3, r6
 800c55c:	bf0c      	ite	eq
 800c55e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c562:	2400      	movne	r4, #0
 800c564:	ea42 0306 	orr.w	r3, r2, r6
 800c568:	4918      	ldr	r1, [pc, #96]	; (800c5cc <rint+0x10c>)
 800c56a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c56e:	4622      	mov	r2, r4
 800c570:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c574:	4620      	mov	r0, r4
 800c576:	4629      	mov	r1, r5
 800c578:	f7f3 fe38 	bl	80001ec <__adddf3>
 800c57c:	e9cd 0100 	strd	r0, r1, [sp]
 800c580:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c584:	4622      	mov	r2, r4
 800c586:	462b      	mov	r3, r5
 800c588:	f7f3 fe2e 	bl	80001e8 <__aeabi_dsub>
 800c58c:	e7d0      	b.n	800c530 <rint+0x70>
 800c58e:	2e33      	cmp	r6, #51	; 0x33
 800c590:	dd07      	ble.n	800c5a2 <rint+0xe2>
 800c592:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c596:	d1cb      	bne.n	800c530 <rint+0x70>
 800c598:	ee10 2a10 	vmov	r2, s0
 800c59c:	f7f3 fe26 	bl	80001ec <__adddf3>
 800c5a0:	e7c6      	b.n	800c530 <rint+0x70>
 800c5a2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c5a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c5aa:	40d6      	lsrs	r6, r2
 800c5ac:	4230      	tst	r0, r6
 800c5ae:	d0bf      	beq.n	800c530 <rint+0x70>
 800c5b0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800c5b4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800c5b8:	bf1f      	itttt	ne
 800c5ba:	ea24 0101 	bicne.w	r1, r4, r1
 800c5be:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c5c2:	fa44 f202 	asrne.w	r2, r4, r2
 800c5c6:	ea41 0402 	orrne.w	r4, r1, r2
 800c5ca:	e7cd      	b.n	800c568 <rint+0xa8>
 800c5cc:	0800cc08 	.word	0x0800cc08
 800c5d0:	000fffff 	.word	0x000fffff
 800c5d4:	00000000 	.word	0x00000000

0800c5d8 <scalbn>:
 800c5d8:	b570      	push	{r4, r5, r6, lr}
 800c5da:	ec55 4b10 	vmov	r4, r5, d0
 800c5de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	462b      	mov	r3, r5
 800c5e6:	b99a      	cbnz	r2, 800c610 <scalbn+0x38>
 800c5e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c5ec:	4323      	orrs	r3, r4
 800c5ee:	d036      	beq.n	800c65e <scalbn+0x86>
 800c5f0:	4b39      	ldr	r3, [pc, #228]	; (800c6d8 <scalbn+0x100>)
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	ee10 0a10 	vmov	r0, s0
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f7f3 ffad 	bl	8000558 <__aeabi_dmul>
 800c5fe:	4b37      	ldr	r3, [pc, #220]	; (800c6dc <scalbn+0x104>)
 800c600:	429e      	cmp	r6, r3
 800c602:	4604      	mov	r4, r0
 800c604:	460d      	mov	r5, r1
 800c606:	da10      	bge.n	800c62a <scalbn+0x52>
 800c608:	a32b      	add	r3, pc, #172	; (adr r3, 800c6b8 <scalbn+0xe0>)
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	e03a      	b.n	800c686 <scalbn+0xae>
 800c610:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c614:	428a      	cmp	r2, r1
 800c616:	d10c      	bne.n	800c632 <scalbn+0x5a>
 800c618:	ee10 2a10 	vmov	r2, s0
 800c61c:	4620      	mov	r0, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	f7f3 fde4 	bl	80001ec <__adddf3>
 800c624:	4604      	mov	r4, r0
 800c626:	460d      	mov	r5, r1
 800c628:	e019      	b.n	800c65e <scalbn+0x86>
 800c62a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c62e:	460b      	mov	r3, r1
 800c630:	3a36      	subs	r2, #54	; 0x36
 800c632:	4432      	add	r2, r6
 800c634:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c638:	428a      	cmp	r2, r1
 800c63a:	dd08      	ble.n	800c64e <scalbn+0x76>
 800c63c:	2d00      	cmp	r5, #0
 800c63e:	a120      	add	r1, pc, #128	; (adr r1, 800c6c0 <scalbn+0xe8>)
 800c640:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c644:	da1c      	bge.n	800c680 <scalbn+0xa8>
 800c646:	a120      	add	r1, pc, #128	; (adr r1, 800c6c8 <scalbn+0xf0>)
 800c648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c64c:	e018      	b.n	800c680 <scalbn+0xa8>
 800c64e:	2a00      	cmp	r2, #0
 800c650:	dd08      	ble.n	800c664 <scalbn+0x8c>
 800c652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c65a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c65e:	ec45 4b10 	vmov	d0, r4, r5
 800c662:	bd70      	pop	{r4, r5, r6, pc}
 800c664:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c668:	da19      	bge.n	800c69e <scalbn+0xc6>
 800c66a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c66e:	429e      	cmp	r6, r3
 800c670:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c674:	dd0a      	ble.n	800c68c <scalbn+0xb4>
 800c676:	a112      	add	r1, pc, #72	; (adr r1, 800c6c0 <scalbn+0xe8>)
 800c678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e2      	bne.n	800c646 <scalbn+0x6e>
 800c680:	a30f      	add	r3, pc, #60	; (adr r3, 800c6c0 <scalbn+0xe8>)
 800c682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c686:	f7f3 ff67 	bl	8000558 <__aeabi_dmul>
 800c68a:	e7cb      	b.n	800c624 <scalbn+0x4c>
 800c68c:	a10a      	add	r1, pc, #40	; (adr r1, 800c6b8 <scalbn+0xe0>)
 800c68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d0b8      	beq.n	800c608 <scalbn+0x30>
 800c696:	a10e      	add	r1, pc, #56	; (adr r1, 800c6d0 <scalbn+0xf8>)
 800c698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c69c:	e7b4      	b.n	800c608 <scalbn+0x30>
 800c69e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6a2:	3236      	adds	r2, #54	; 0x36
 800c6a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	4b0c      	ldr	r3, [pc, #48]	; (800c6e0 <scalbn+0x108>)
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	e7e8      	b.n	800c686 <scalbn+0xae>
 800c6b4:	f3af 8000 	nop.w
 800c6b8:	c2f8f359 	.word	0xc2f8f359
 800c6bc:	01a56e1f 	.word	0x01a56e1f
 800c6c0:	8800759c 	.word	0x8800759c
 800c6c4:	7e37e43c 	.word	0x7e37e43c
 800c6c8:	8800759c 	.word	0x8800759c
 800c6cc:	fe37e43c 	.word	0xfe37e43c
 800c6d0:	c2f8f359 	.word	0xc2f8f359
 800c6d4:	81a56e1f 	.word	0x81a56e1f
 800c6d8:	43500000 	.word	0x43500000
 800c6dc:	ffff3cb0 	.word	0xffff3cb0
 800c6e0:	3c900000 	.word	0x3c900000

0800c6e4 <abort>:
 800c6e4:	b508      	push	{r3, lr}
 800c6e6:	2006      	movs	r0, #6
 800c6e8:	f000 f950 	bl	800c98c <raise>
 800c6ec:	2001      	movs	r0, #1
 800c6ee:	f7f8 f9f1 	bl	8004ad4 <_exit>
	...

0800c6f4 <__errno>:
 800c6f4:	4b01      	ldr	r3, [pc, #4]	; (800c6fc <__errno+0x8>)
 800c6f6:	6818      	ldr	r0, [r3, #0]
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	20000018 	.word	0x20000018

0800c700 <__libc_init_array>:
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	4d0d      	ldr	r5, [pc, #52]	; (800c738 <__libc_init_array+0x38>)
 800c704:	4c0d      	ldr	r4, [pc, #52]	; (800c73c <__libc_init_array+0x3c>)
 800c706:	1b64      	subs	r4, r4, r5
 800c708:	10a4      	asrs	r4, r4, #2
 800c70a:	2600      	movs	r6, #0
 800c70c:	42a6      	cmp	r6, r4
 800c70e:	d109      	bne.n	800c724 <__libc_init_array+0x24>
 800c710:	4d0b      	ldr	r5, [pc, #44]	; (800c740 <__libc_init_array+0x40>)
 800c712:	4c0c      	ldr	r4, [pc, #48]	; (800c744 <__libc_init_array+0x44>)
 800c714:	f000 f964 	bl	800c9e0 <_init>
 800c718:	1b64      	subs	r4, r4, r5
 800c71a:	10a4      	asrs	r4, r4, #2
 800c71c:	2600      	movs	r6, #0
 800c71e:	42a6      	cmp	r6, r4
 800c720:	d105      	bne.n	800c72e <__libc_init_array+0x2e>
 800c722:	bd70      	pop	{r4, r5, r6, pc}
 800c724:	f855 3b04 	ldr.w	r3, [r5], #4
 800c728:	4798      	blx	r3
 800c72a:	3601      	adds	r6, #1
 800c72c:	e7ee      	b.n	800c70c <__libc_init_array+0xc>
 800c72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c732:	4798      	blx	r3
 800c734:	3601      	adds	r6, #1
 800c736:	e7f2      	b.n	800c71e <__libc_init_array+0x1e>
 800c738:	0800cc20 	.word	0x0800cc20
 800c73c:	0800cc20 	.word	0x0800cc20
 800c740:	0800cc20 	.word	0x0800cc20
 800c744:	0800cc28 	.word	0x0800cc28

0800c748 <malloc>:
 800c748:	4b02      	ldr	r3, [pc, #8]	; (800c754 <malloc+0xc>)
 800c74a:	4601      	mov	r1, r0
 800c74c:	6818      	ldr	r0, [r3, #0]
 800c74e:	f000 b88b 	b.w	800c868 <_malloc_r>
 800c752:	bf00      	nop
 800c754:	20000018 	.word	0x20000018

0800c758 <free>:
 800c758:	4b02      	ldr	r3, [pc, #8]	; (800c764 <free+0xc>)
 800c75a:	4601      	mov	r1, r0
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	f000 b833 	b.w	800c7c8 <_free_r>
 800c762:	bf00      	nop
 800c764:	20000018 	.word	0x20000018

0800c768 <memcpy>:
 800c768:	440a      	add	r2, r1
 800c76a:	4291      	cmp	r1, r2
 800c76c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c770:	d100      	bne.n	800c774 <memcpy+0xc>
 800c772:	4770      	bx	lr
 800c774:	b510      	push	{r4, lr}
 800c776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c77a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c77e:	4291      	cmp	r1, r2
 800c780:	d1f9      	bne.n	800c776 <memcpy+0xe>
 800c782:	bd10      	pop	{r4, pc}

0800c784 <memmove>:
 800c784:	4288      	cmp	r0, r1
 800c786:	b510      	push	{r4, lr}
 800c788:	eb01 0402 	add.w	r4, r1, r2
 800c78c:	d902      	bls.n	800c794 <memmove+0x10>
 800c78e:	4284      	cmp	r4, r0
 800c790:	4623      	mov	r3, r4
 800c792:	d807      	bhi.n	800c7a4 <memmove+0x20>
 800c794:	1e43      	subs	r3, r0, #1
 800c796:	42a1      	cmp	r1, r4
 800c798:	d008      	beq.n	800c7ac <memmove+0x28>
 800c79a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c79e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7a2:	e7f8      	b.n	800c796 <memmove+0x12>
 800c7a4:	4402      	add	r2, r0
 800c7a6:	4601      	mov	r1, r0
 800c7a8:	428a      	cmp	r2, r1
 800c7aa:	d100      	bne.n	800c7ae <memmove+0x2a>
 800c7ac:	bd10      	pop	{r4, pc}
 800c7ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7b6:	e7f7      	b.n	800c7a8 <memmove+0x24>

0800c7b8 <memset>:
 800c7b8:	4402      	add	r2, r0
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d100      	bne.n	800c7c2 <memset+0xa>
 800c7c0:	4770      	bx	lr
 800c7c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c7c6:	e7f9      	b.n	800c7bc <memset+0x4>

0800c7c8 <_free_r>:
 800c7c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7ca:	2900      	cmp	r1, #0
 800c7cc:	d048      	beq.n	800c860 <_free_r+0x98>
 800c7ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7d2:	9001      	str	r0, [sp, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f1a1 0404 	sub.w	r4, r1, #4
 800c7da:	bfb8      	it	lt
 800c7dc:	18e4      	addlt	r4, r4, r3
 800c7de:	f000 f8f1 	bl	800c9c4 <__malloc_lock>
 800c7e2:	4a20      	ldr	r2, [pc, #128]	; (800c864 <_free_r+0x9c>)
 800c7e4:	9801      	ldr	r0, [sp, #4]
 800c7e6:	6813      	ldr	r3, [r2, #0]
 800c7e8:	4615      	mov	r5, r2
 800c7ea:	b933      	cbnz	r3, 800c7fa <_free_r+0x32>
 800c7ec:	6063      	str	r3, [r4, #4]
 800c7ee:	6014      	str	r4, [r2, #0]
 800c7f0:	b003      	add	sp, #12
 800c7f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7f6:	f000 b8eb 	b.w	800c9d0 <__malloc_unlock>
 800c7fa:	42a3      	cmp	r3, r4
 800c7fc:	d90b      	bls.n	800c816 <_free_r+0x4e>
 800c7fe:	6821      	ldr	r1, [r4, #0]
 800c800:	1862      	adds	r2, r4, r1
 800c802:	4293      	cmp	r3, r2
 800c804:	bf04      	itt	eq
 800c806:	681a      	ldreq	r2, [r3, #0]
 800c808:	685b      	ldreq	r3, [r3, #4]
 800c80a:	6063      	str	r3, [r4, #4]
 800c80c:	bf04      	itt	eq
 800c80e:	1852      	addeq	r2, r2, r1
 800c810:	6022      	streq	r2, [r4, #0]
 800c812:	602c      	str	r4, [r5, #0]
 800c814:	e7ec      	b.n	800c7f0 <_free_r+0x28>
 800c816:	461a      	mov	r2, r3
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	b10b      	cbz	r3, 800c820 <_free_r+0x58>
 800c81c:	42a3      	cmp	r3, r4
 800c81e:	d9fa      	bls.n	800c816 <_free_r+0x4e>
 800c820:	6811      	ldr	r1, [r2, #0]
 800c822:	1855      	adds	r5, r2, r1
 800c824:	42a5      	cmp	r5, r4
 800c826:	d10b      	bne.n	800c840 <_free_r+0x78>
 800c828:	6824      	ldr	r4, [r4, #0]
 800c82a:	4421      	add	r1, r4
 800c82c:	1854      	adds	r4, r2, r1
 800c82e:	42a3      	cmp	r3, r4
 800c830:	6011      	str	r1, [r2, #0]
 800c832:	d1dd      	bne.n	800c7f0 <_free_r+0x28>
 800c834:	681c      	ldr	r4, [r3, #0]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	6053      	str	r3, [r2, #4]
 800c83a:	4421      	add	r1, r4
 800c83c:	6011      	str	r1, [r2, #0]
 800c83e:	e7d7      	b.n	800c7f0 <_free_r+0x28>
 800c840:	d902      	bls.n	800c848 <_free_r+0x80>
 800c842:	230c      	movs	r3, #12
 800c844:	6003      	str	r3, [r0, #0]
 800c846:	e7d3      	b.n	800c7f0 <_free_r+0x28>
 800c848:	6825      	ldr	r5, [r4, #0]
 800c84a:	1961      	adds	r1, r4, r5
 800c84c:	428b      	cmp	r3, r1
 800c84e:	bf04      	itt	eq
 800c850:	6819      	ldreq	r1, [r3, #0]
 800c852:	685b      	ldreq	r3, [r3, #4]
 800c854:	6063      	str	r3, [r4, #4]
 800c856:	bf04      	itt	eq
 800c858:	1949      	addeq	r1, r1, r5
 800c85a:	6021      	streq	r1, [r4, #0]
 800c85c:	6054      	str	r4, [r2, #4]
 800c85e:	e7c7      	b.n	800c7f0 <_free_r+0x28>
 800c860:	b003      	add	sp, #12
 800c862:	bd30      	pop	{r4, r5, pc}
 800c864:	20004250 	.word	0x20004250

0800c868 <_malloc_r>:
 800c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86a:	1ccd      	adds	r5, r1, #3
 800c86c:	f025 0503 	bic.w	r5, r5, #3
 800c870:	3508      	adds	r5, #8
 800c872:	2d0c      	cmp	r5, #12
 800c874:	bf38      	it	cc
 800c876:	250c      	movcc	r5, #12
 800c878:	2d00      	cmp	r5, #0
 800c87a:	4606      	mov	r6, r0
 800c87c:	db01      	blt.n	800c882 <_malloc_r+0x1a>
 800c87e:	42a9      	cmp	r1, r5
 800c880:	d903      	bls.n	800c88a <_malloc_r+0x22>
 800c882:	230c      	movs	r3, #12
 800c884:	6033      	str	r3, [r6, #0]
 800c886:	2000      	movs	r0, #0
 800c888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c88a:	f000 f89b 	bl	800c9c4 <__malloc_lock>
 800c88e:	4921      	ldr	r1, [pc, #132]	; (800c914 <_malloc_r+0xac>)
 800c890:	680a      	ldr	r2, [r1, #0]
 800c892:	4614      	mov	r4, r2
 800c894:	b99c      	cbnz	r4, 800c8be <_malloc_r+0x56>
 800c896:	4f20      	ldr	r7, [pc, #128]	; (800c918 <_malloc_r+0xb0>)
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	b923      	cbnz	r3, 800c8a6 <_malloc_r+0x3e>
 800c89c:	4621      	mov	r1, r4
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f000 f83c 	bl	800c91c <_sbrk_r>
 800c8a4:	6038      	str	r0, [r7, #0]
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f000 f837 	bl	800c91c <_sbrk_r>
 800c8ae:	1c43      	adds	r3, r0, #1
 800c8b0:	d123      	bne.n	800c8fa <_malloc_r+0x92>
 800c8b2:	230c      	movs	r3, #12
 800c8b4:	6033      	str	r3, [r6, #0]
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f000 f88a 	bl	800c9d0 <__malloc_unlock>
 800c8bc:	e7e3      	b.n	800c886 <_malloc_r+0x1e>
 800c8be:	6823      	ldr	r3, [r4, #0]
 800c8c0:	1b5b      	subs	r3, r3, r5
 800c8c2:	d417      	bmi.n	800c8f4 <_malloc_r+0x8c>
 800c8c4:	2b0b      	cmp	r3, #11
 800c8c6:	d903      	bls.n	800c8d0 <_malloc_r+0x68>
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	441c      	add	r4, r3
 800c8cc:	6025      	str	r5, [r4, #0]
 800c8ce:	e004      	b.n	800c8da <_malloc_r+0x72>
 800c8d0:	6863      	ldr	r3, [r4, #4]
 800c8d2:	42a2      	cmp	r2, r4
 800c8d4:	bf0c      	ite	eq
 800c8d6:	600b      	streq	r3, [r1, #0]
 800c8d8:	6053      	strne	r3, [r2, #4]
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f000 f878 	bl	800c9d0 <__malloc_unlock>
 800c8e0:	f104 000b 	add.w	r0, r4, #11
 800c8e4:	1d23      	adds	r3, r4, #4
 800c8e6:	f020 0007 	bic.w	r0, r0, #7
 800c8ea:	1ac2      	subs	r2, r0, r3
 800c8ec:	d0cc      	beq.n	800c888 <_malloc_r+0x20>
 800c8ee:	1a1b      	subs	r3, r3, r0
 800c8f0:	50a3      	str	r3, [r4, r2]
 800c8f2:	e7c9      	b.n	800c888 <_malloc_r+0x20>
 800c8f4:	4622      	mov	r2, r4
 800c8f6:	6864      	ldr	r4, [r4, #4]
 800c8f8:	e7cc      	b.n	800c894 <_malloc_r+0x2c>
 800c8fa:	1cc4      	adds	r4, r0, #3
 800c8fc:	f024 0403 	bic.w	r4, r4, #3
 800c900:	42a0      	cmp	r0, r4
 800c902:	d0e3      	beq.n	800c8cc <_malloc_r+0x64>
 800c904:	1a21      	subs	r1, r4, r0
 800c906:	4630      	mov	r0, r6
 800c908:	f000 f808 	bl	800c91c <_sbrk_r>
 800c90c:	3001      	adds	r0, #1
 800c90e:	d1dd      	bne.n	800c8cc <_malloc_r+0x64>
 800c910:	e7cf      	b.n	800c8b2 <_malloc_r+0x4a>
 800c912:	bf00      	nop
 800c914:	20004250 	.word	0x20004250
 800c918:	20004254 	.word	0x20004254

0800c91c <_sbrk_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	4d06      	ldr	r5, [pc, #24]	; (800c938 <_sbrk_r+0x1c>)
 800c920:	2300      	movs	r3, #0
 800c922:	4604      	mov	r4, r0
 800c924:	4608      	mov	r0, r1
 800c926:	602b      	str	r3, [r5, #0]
 800c928:	f7f8 f8de 	bl	8004ae8 <_sbrk>
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	d102      	bne.n	800c936 <_sbrk_r+0x1a>
 800c930:	682b      	ldr	r3, [r5, #0]
 800c932:	b103      	cbz	r3, 800c936 <_sbrk_r+0x1a>
 800c934:	6023      	str	r3, [r4, #0]
 800c936:	bd38      	pop	{r3, r4, r5, pc}
 800c938:	200042a4 	.word	0x200042a4

0800c93c <_raise_r>:
 800c93c:	291f      	cmp	r1, #31
 800c93e:	b538      	push	{r3, r4, r5, lr}
 800c940:	4604      	mov	r4, r0
 800c942:	460d      	mov	r5, r1
 800c944:	d904      	bls.n	800c950 <_raise_r+0x14>
 800c946:	2316      	movs	r3, #22
 800c948:	6003      	str	r3, [r0, #0]
 800c94a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c94e:	bd38      	pop	{r3, r4, r5, pc}
 800c950:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c952:	b112      	cbz	r2, 800c95a <_raise_r+0x1e>
 800c954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c958:	b94b      	cbnz	r3, 800c96e <_raise_r+0x32>
 800c95a:	4620      	mov	r0, r4
 800c95c:	f000 f830 	bl	800c9c0 <_getpid_r>
 800c960:	462a      	mov	r2, r5
 800c962:	4601      	mov	r1, r0
 800c964:	4620      	mov	r0, r4
 800c966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c96a:	f000 b817 	b.w	800c99c <_kill_r>
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d00a      	beq.n	800c988 <_raise_r+0x4c>
 800c972:	1c59      	adds	r1, r3, #1
 800c974:	d103      	bne.n	800c97e <_raise_r+0x42>
 800c976:	2316      	movs	r3, #22
 800c978:	6003      	str	r3, [r0, #0]
 800c97a:	2001      	movs	r0, #1
 800c97c:	e7e7      	b.n	800c94e <_raise_r+0x12>
 800c97e:	2400      	movs	r4, #0
 800c980:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c984:	4628      	mov	r0, r5
 800c986:	4798      	blx	r3
 800c988:	2000      	movs	r0, #0
 800c98a:	e7e0      	b.n	800c94e <_raise_r+0x12>

0800c98c <raise>:
 800c98c:	4b02      	ldr	r3, [pc, #8]	; (800c998 <raise+0xc>)
 800c98e:	4601      	mov	r1, r0
 800c990:	6818      	ldr	r0, [r3, #0]
 800c992:	f7ff bfd3 	b.w	800c93c <_raise_r>
 800c996:	bf00      	nop
 800c998:	20000018 	.word	0x20000018

0800c99c <_kill_r>:
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4d07      	ldr	r5, [pc, #28]	; (800c9bc <_kill_r+0x20>)
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	4608      	mov	r0, r1
 800c9a6:	4611      	mov	r1, r2
 800c9a8:	602b      	str	r3, [r5, #0]
 800c9aa:	f7f8 f883 	bl	8004ab4 <_kill>
 800c9ae:	1c43      	adds	r3, r0, #1
 800c9b0:	d102      	bne.n	800c9b8 <_kill_r+0x1c>
 800c9b2:	682b      	ldr	r3, [r5, #0]
 800c9b4:	b103      	cbz	r3, 800c9b8 <_kill_r+0x1c>
 800c9b6:	6023      	str	r3, [r4, #0]
 800c9b8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ba:	bf00      	nop
 800c9bc:	200042a4 	.word	0x200042a4

0800c9c0 <_getpid_r>:
 800c9c0:	f7f8 b870 	b.w	8004aa4 <_getpid>

0800c9c4 <__malloc_lock>:
 800c9c4:	4801      	ldr	r0, [pc, #4]	; (800c9cc <__malloc_lock+0x8>)
 800c9c6:	f000 b809 	b.w	800c9dc <__retarget_lock_acquire_recursive>
 800c9ca:	bf00      	nop
 800c9cc:	200042ac 	.word	0x200042ac

0800c9d0 <__malloc_unlock>:
 800c9d0:	4801      	ldr	r0, [pc, #4]	; (800c9d8 <__malloc_unlock+0x8>)
 800c9d2:	f000 b804 	b.w	800c9de <__retarget_lock_release_recursive>
 800c9d6:	bf00      	nop
 800c9d8:	200042ac 	.word	0x200042ac

0800c9dc <__retarget_lock_acquire_recursive>:
 800c9dc:	4770      	bx	lr

0800c9de <__retarget_lock_release_recursive>:
 800c9de:	4770      	bx	lr

0800c9e0 <_init>:
 800c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e2:	bf00      	nop
 800c9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e6:	bc08      	pop	{r3}
 800c9e8:	469e      	mov	lr, r3
 800c9ea:	4770      	bx	lr

0800c9ec <_fini>:
 800c9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ee:	bf00      	nop
 800c9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9f2:	bc08      	pop	{r3}
 800c9f4:	469e      	mov	lr, r3
 800c9f6:	4770      	bx	lr
